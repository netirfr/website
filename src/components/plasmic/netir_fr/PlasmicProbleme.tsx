/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: UVDtGkgycWzF

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicProbleme.module.css"; // plasmic-import: UVDtGkgycWzF/css

import MoneyBagSvgrepoComSvgIcon from "./icons/PlasmicIcon__MoneyBagSvgrepoComSvg"; // plasmic-import: M2CYC4qTbvmP/icon

createPlasmicElementProxy;

export type PlasmicProbleme__VariantMembers = {};
export type PlasmicProbleme__VariantsArgs = {};
type VariantPropType = keyof PlasmicProbleme__VariantsArgs;
export const PlasmicProbleme__VariantProps = new Array<VariantPropType>();

export type PlasmicProbleme__ArgsType = {
  titre?: string;
  citation?: string;
  description?: string;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicProbleme__ArgsType;
export const PlasmicProbleme__ArgProps = new Array<ArgPropType>(
  "titre",
  "citation",
  "description",
  "children"
);

export type PlasmicProbleme__OverridesType = {
  root?: Flex__<"div">;
  h4?: Flex__<"h4">;
};

export interface DefaultProblemeProps {
  titre?: string;
  citation?: string;
  description?: string;
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicProbleme__RenderFunc(props: {
  variants: PlasmicProbleme__VariantsArgs;
  args: PlasmicProbleme__ArgsType;
  overrides: PlasmicProbleme__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          titre: "Les commissions voraces",
          citation: '"Mes comp\u00e9tences rapportent aux autres." ',
          description:
            "Les plateformes prennent une part d\u00e9mesur\u00e9e de ton travail. Chez Netir, tu gardes 97% de tes gains."
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__nhQmC)}>
        {renderPlasmicSlot({
          defaultContents: (
            <MoneyBagSvgrepoComSvgIcon
              className={classNames(projectcss.all, sty.svg__nCLbB)}
              role={"img"}
            />
          ),

          value: args.children
        })}
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__iqDtz)}>
        <h4
          data-plasmic-name={"h4"}
          data-plasmic-override={overrides.h4}
          className={classNames(
            projectcss.all,
            projectcss.h4,
            projectcss.__wab_text,
            sty.h4
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.titre;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Les commissions voraces";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </h4>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__insh5
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.citation;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return '"Mes comp\u00e9tences rapportent aux autres."';
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__v9KgC
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.description;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Les plateformes prennent une part d\u00e9mesur\u00e9e de ton travail. Chez Netir, tu gardes 97% de tes gains.";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h4"],
  h4: ["h4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h4: "h4";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProbleme__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProbleme__VariantsArgs;
    args?: PlasmicProbleme__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicProbleme__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicProbleme__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProbleme__ArgProps,
          internalVariantPropNames: PlasmicProbleme__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProbleme__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProbleme";
  } else {
    func.displayName = `PlasmicProbleme.${nodeName}`;
  }
  return func;
}

export const PlasmicProbleme = Object.assign(
  // Top-level PlasmicProbleme renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h4: makeNodeComponent("h4"),

    // Metadata about props expected for PlasmicProbleme
    internalVariantProps: PlasmicProbleme__VariantProps,
    internalArgProps: PlasmicProbleme__ArgProps
  }
);

export default PlasmicProbleme;
/* prettier-ignore-end */
