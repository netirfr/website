/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: IoBv-ShmsDDm

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import StepperStpeerForm from "../../StepperStpeerForm"; // plasmic-import: gdnfT_wfy0B6/component
import StepperComponentItem1 from "../../StepperComponentItem1"; // plasmic-import: G7huMVfUPnTr/component
import StepperComponentItem2 from "../../StepperComponentItem2"; // plasmic-import: w5hIBcFZSied/component
import StepperComponentItem3 from "../../StepperComponentItem3"; // plasmic-import: RJgpw8Fi8Gca/component
import StepperComponentItem4 from "../../StepperComponentItem4"; // plasmic-import: BVtzkh3oCAbt/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdPassword } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdPassword_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import CheckboxesCheckWithLabel from "../../CheckboxesCheckWithLabel"; // plasmic-import: pqDmGvKea0I3/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import StepperTitleSubtilte from "../../StepperTitleSubtilte"; // plasmic-import: SHfPHFSftlfZ/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicOldSignUpCompanyStep1.module.css"; // plasmic-import: IoBv-ShmsDDm/css

import nLogo4X7VwM2YjHhq from "./images/nLogo.svg"; // plasmic-import: 4X7vwM2yjHHQ/picture

createPlasmicElementProxy;

export type PlasmicOldSignUpCompanyStep1__VariantMembers = {};
export type PlasmicOldSignUpCompanyStep1__VariantsArgs = {};
type VariantPropType = keyof PlasmicOldSignUpCompanyStep1__VariantsArgs;
export const PlasmicOldSignUpCompanyStep1__VariantProps =
  new Array<VariantPropType>();

export type PlasmicOldSignUpCompanyStep1__ArgsType = {
  iconsSteps?: boolean;
  icon?: boolean;
  children?: React.ReactNode;
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  children4?: React.ReactNode;
  form2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicOldSignUpCompanyStep1__ArgsType;
export const PlasmicOldSignUpCompanyStep1__ArgProps = new Array<ArgPropType>(
  "iconsSteps",
  "icon",
  "children",
  "children2",
  "children3",
  "children4",
  "form2"
);

export type PlasmicOldSignUpCompanyStep1__OverridesType = {
  companyPage?: Flex__<"div">;
  stepperStpeerForm?: Flex__<typeof StepperStpeerForm>;
  stepperTitleSubtilte?: Flex__<typeof StepperTitleSubtilte>;
  text?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultOldSignUpCompanyStep1Props {
  iconsSteps?: boolean;
  icon?: boolean;
  children?: React.ReactNode;
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  children4?: React.ReactNode;
  form2?: React.ReactNode;
  className?: string;
}

const $$ = {};

export function Head() {
  return (
    <>
      <meta name="twitter:card" content="summary" />
      <title key="title">
        {PlasmicOldSignUpCompanyStep1.pageMetadata.title}
      </title>
      <meta
        key="og:title"
        property="og:title"
        content={PlasmicOldSignUpCompanyStep1.pageMetadata.title}
      />
      <meta
        key="twitter:title"
        name="twitter:title"
        content={PlasmicOldSignUpCompanyStep1.pageMetadata.title}
      />
    </>
  );
}

function PlasmicOldSignUpCompanyStep1__RenderFunc(props: {
  variants: PlasmicOldSignUpCompanyStep1__VariantsArgs;
  args: PlasmicOldSignUpCompanyStep1__ArgsType;
  overrides: PlasmicOldSignUpCompanyStep1__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          iconsSteps: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"companyPage"}
          data-plasmic-override={overrides.companyPage}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.companyPage
          )}
        >
          <StepperStpeerForm
            data-plasmic-name={"stepperStpeerForm"}
            data-plasmic-override={overrides.stepperStpeerForm}
            children2={renderPlasmicSlot({
              defaultContents: (
                <StepperComponentItem2
                  className={classNames(
                    "__wab_instance",
                    sty.stepperComponentItem2__fJihl
                  )}
                />
              ),

              value: args.children2
            })}
            children3={renderPlasmicSlot({
              defaultContents: (
                <StepperComponentItem3
                  className={classNames(
                    "__wab_instance",
                    sty.stepperComponentItem3__lc5Lc
                  )}
                />
              ),

              value: args.children3
            })}
            children4={renderPlasmicSlot({
              defaultContents: (
                <StepperComponentItem4
                  className={classNames(
                    "__wab_instance",
                    sty.stepperComponentItem4__xGaFw
                  )}
                />
              ),

              value: args.children4
            })}
            className={classNames("__wab_instance", sty.stepperStpeerForm)}
            form2={renderPlasmicSlot({
              defaultContents: (() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form__ebqZw),
                  formItems: [
                    { label: "Name", name: "name", inputType: "Text" },
                    {
                      label: "Message",
                      name: "message",
                      inputType: "Text Area"
                    }
                  ],
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: "advanced",
                  requiredMark: true,
                  submitSlot: null,
                  validateTrigger: [],
                  wrapperCol: (() => {
                    const __composite = {
                      span: null,
                      horizontalOnly: null,
                      offset: null
                    };
                    __composite["span"] = 24;
                    __composite["horizontalOnly"] = true;
                    __composite["offset"] = 23;
                    return __composite;
                  })()
                };

                return (
                  <FormWrapper {...child$Props}>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fkve2)}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__gRtiO
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xItoF
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "#0A043C" }}
                              >
                                {"Pr\u00e9nom"}
                              </span>
                            </React.Fragment>
                          </div>
                        }
                        name={"prenom"}
                        valuePropName={"prenom"}
                      >
                        {(() => {
                          const child$Props = {
                            autoFocus: true,
                            className: classNames(
                              "__wab_instance",
                              sty.input___0Mu7A
                            ),
                            size: "large"
                          };

                          return <AntdInput {...child$Props} />;
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__auozT
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__obpD3
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "#0A043C" }}
                              >
                                {"Nom"}
                              </span>
                            </React.Fragment>
                          </div>
                        }
                        name={"nom"}
                        valuePropName={"nom"}
                      >
                        {(() => {
                          const child$Props = {
                            autoFocus: true,
                            className: classNames(
                              "__wab_instance",
                              sty.input__mRaQ
                            ),
                            size: "large"
                          };

                          return <AntdInput {...child$Props} />;
                        })()}
                      </FormItemWrapper>
                    </div>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField___8Ci1G
                      )}
                      hidden={false}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__n5Ufs
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 500, color: "#0A043C" }}
                            >
                              {"E-mail"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"email"}
                      noLabel={false}
                      valuePropName={"email"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.input__v42Sc
                          ),
                          size: "large"
                        };

                        return <AntdInput {...child$Props} />;
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField___8Lwpw
                      )}
                      hidden={false}
                      hideValidationMessage={false}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jMLi5
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#0A043C", fontWeight: 500 }}
                            >
                              {"Mot de passe"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"password"}
                      noLabel={false}
                      noStyle={false}
                      shouldUpdate={false}
                      valuePropName={"password"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rhp3H
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            bordered: true,
                            className: classNames(
                              "__wab_instance",
                              sty.passwordInput__riOk
                            ),
                            maxLength: 8
                          };

                          return <AntdPassword {...child$Props} />;
                        })()}
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__v964V
                          )}
                        >
                          {
                            "8 caract\u00e8res \u2022 1 lettre majuscule \u2022 1 caract\u00e8re sp\u00e9cial\r\n\r"
                          }
                        </div>
                      </div>
                    </FormItemWrapper>
                    <CheckboxesCheckWithLabel
                      className={classNames(
                        "__wab_instance",
                        sty.checkboxesCheckWithLabel__dh6Qo
                      )}
                    />

                    <AntdButton
                      className={classNames("__wab_instance", sty.button__jMTq)}
                      danger={true}
                      disabled={false}
                      ghost={false}
                      href={`/sign-up/company-2`}
                      shape={"default"}
                      size={"large"}
                      submitsForm={true}
                      target={false}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mp4N
                        )}
                      >
                        {"Valider"}
                      </div>
                    </AntdButton>
                  </FormWrapper>
                );
              })(),
              value: args.form2
            })}
            slot={
              <StepperTitleSubtilte
                data-plasmic-name={"stepperTitleSubtilte"}
                data-plasmic-override={overrides.stepperTitleSubtilte}
                className={classNames(
                  "__wab_instance",
                  sty.stepperTitleSubtilte
                )}
              />
            }
            slot2={
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#000000" }}
                  >
                    {"Vous n\u2019\u00eates plus qu\u2019\u00e0"}
                  </span>
                  <React.Fragment> </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700, color: "#F43F5E" }}
                  >
                    {"4 \u00e9tapes"}
                  </span>
                  <React.Fragment> </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#000000" }}
                  >
                    {"de trouver LE freelance id\u00e9al pour votre projet !"}
                  </span>
                  <React.Fragment>{"\r\n\r"}</React.Fragment>
                </React.Fragment>
              </div>
            }
            slot3={
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"28px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"76px"}
                loading={"lazy"}
                src={{
                  src: nLogo4X7VwM2YjHhq,
                  fullWidth: 100.26872253417969,
                  fullHeight: 36.720001220703125,
                  aspectRatio: 2.72973
                }}
              />
            }
          >
            {renderPlasmicSlot({
              defaultContents: (
                <StepperComponentItem1
                  className={classNames(
                    "__wab_instance",
                    sty.stepperComponentItem1__dQ5Tv
                  )}
                />
              ),

              value: args.children
            })}
          </StepperStpeerForm>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  companyPage: [
    "companyPage",
    "stepperStpeerForm",
    "stepperTitleSubtilte",
    "text",
    "img"
  ],
  stepperStpeerForm: [
    "stepperStpeerForm",
    "stepperTitleSubtilte",
    "text",
    "img"
  ],
  stepperTitleSubtilte: ["stepperTitleSubtilte"],
  text: ["text"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  companyPage: "div";
  stepperStpeerForm: typeof StepperStpeerForm;
  stepperTitleSubtilte: typeof StepperTitleSubtilte;
  text: "div";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOldSignUpCompanyStep1__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOldSignUpCompanyStep1__VariantsArgs;
    args?: PlasmicOldSignUpCompanyStep1__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicOldSignUpCompanyStep1__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicOldSignUpCompanyStep1__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOldSignUpCompanyStep1__ArgProps,
          internalVariantPropNames: PlasmicOldSignUpCompanyStep1__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOldSignUpCompanyStep1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "companyPage") {
    func.displayName = "PlasmicOldSignUpCompanyStep1";
  } else {
    func.displayName = `PlasmicOldSignUpCompanyStep1.${nodeName}`;
  }
  return func;
}

export const PlasmicOldSignUpCompanyStep1 = Object.assign(
  // Top-level PlasmicOldSignUpCompanyStep1 renders the root element
  makeNodeComponent("companyPage"),
  {
    // Helper components rendering sub-elements
    stepperStpeerForm: makeNodeComponent("stepperStpeerForm"),
    stepperTitleSubtilte: makeNodeComponent("stepperTitleSubtilte"),
    text: makeNodeComponent("text"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicOldSignUpCompanyStep1
    internalVariantProps: PlasmicOldSignUpCompanyStep1__VariantProps,
    internalArgProps: PlasmicOldSignUpCompanyStep1__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Netir – Inscription : Informations",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicOldSignUpCompanyStep1;
/* prettier-ignore-end */
