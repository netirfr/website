/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: 4L80KNrOoiaf

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicHomepageEtapes.module.css"; // plasmic-import: 4L80KNrOoiaf/css

import ArrowDownSvgrepoComSvgIcon from "./icons/PlasmicIcon__ArrowDownSvgrepoComSvg"; // plasmic-import: OQB6wx6YZNRV/icon
import ArrowUpSvgrepoComSvgIcon from "./icons/PlasmicIcon__ArrowUpSvgrepoComSvg"; // plasmic-import: rZ42A7fLO0qp/icon

createPlasmicElementProxy;

export type PlasmicHomepageEtapes__VariantMembers = {
  _3: "unnamedVariant";
  pageFreelance: "pageFreelance";
};
export type PlasmicHomepageEtapes__VariantsArgs = {
  _3?: MultiChoiceArg<"unnamedVariant">;
  pageFreelance?: SingleBooleanChoiceArg<"pageFreelance">;
};
type VariantPropType = keyof PlasmicHomepageEtapes__VariantsArgs;
export const PlasmicHomepageEtapes__VariantProps = new Array<VariantPropType>(
  "_3",
  "pageFreelance"
);

export type PlasmicHomepageEtapes__ArgsType = {
  titre?: string;
  description?: string;
};
type ArgPropType = keyof PlasmicHomepageEtapes__ArgsType;
export const PlasmicHomepageEtapes__ArgProps = new Array<ArgPropType>(
  "titre",
  "description"
);

export type PlasmicHomepageEtapes__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultHomepageEtapesProps {
  titre?: string;
  description?: string;
  _3?: MultiChoiceArg<"unnamedVariant">;
  pageFreelance?: SingleBooleanChoiceArg<"pageFreelance">;
  className?: string;
}

const $$ = {};

function PlasmicHomepageEtapes__RenderFunc(props: {
  variants: PlasmicHomepageEtapes__VariantsArgs;
  args: PlasmicHomepageEtapes__ArgsType;
  overrides: PlasmicHomepageEtapes__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          titre: "Inscrivez-vous ",
          description:
            "Rejoignez Netir en quelques clics et acc\u00e9dez \u00e0 un r\u00e9seau de freelances experts pr\u00eats \u00e0 r\u00e9pondre \u00e0 vos besoins."
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "_3",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props._3
      },
      {
        path: "pageFreelance",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.pageFreelance
      },
      {
        path: "isOspen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__q2NCy)}
        onClick={async event => {
          const $steps = {};

          $steps["updateIsOspen"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["isOspen"]
                  },
                  operation: 4
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  const oldValue = $stateGet(objRoot, variablePath);
                  $stateSet(objRoot, variablePath, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateIsOspen"] != null &&
            typeof $steps["updateIsOspen"] === "object" &&
            typeof $steps["updateIsOspen"].then === "function"
          ) {
            $steps["updateIsOspen"] = await $steps["updateIsOspen"];
          }
        }}
      >
        <div className={classNames(projectcss.all, sty.freeBox__cEFzA)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__iU1Cj
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.titre;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Inscrivez-vous ";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <ArrowDownSvgrepoComSvgIcon
            className={classNames(projectcss.all, sty.svg__zKn3R)}
            role={"img"}
          />

          {(() => {
            try {
              return $state.isOspen;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <ArrowUpSvgrepoComSvgIcon
              className={classNames(projectcss.all, sty.svg__wf0Er)}
              role={"img"}
            />
          ) : null}
        </div>
        {(() => {
          try {
            return $state.isOspen;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___5UPu4
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.description;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Rejoignez Netir en quelques clics et acc\u00e9dez \u00e0 un r\u00e9seau de freelances experts pr\u00eats \u00e0 r\u00e9pondre \u00e0 vos besoins.";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepageEtapes__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepageEtapes__VariantsArgs;
    args?: PlasmicHomepageEtapes__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicHomepageEtapes__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicHomepageEtapes__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepageEtapes__ArgProps,
          internalVariantPropNames: PlasmicHomepageEtapes__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepageEtapes__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepageEtapes";
  } else {
    func.displayName = `PlasmicHomepageEtapes.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepageEtapes = Object.assign(
  // Top-level PlasmicHomepageEtapes renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicHomepageEtapes
    internalVariantProps: PlasmicHomepageEtapes__VariantProps,
    internalArgProps: PlasmicHomepageEtapes__ArgProps
  }
);

export default PlasmicHomepageEtapes;
/* prettier-ignore-end */
