/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: Ml83Hhd5Y1LZ

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { BaseOverlayArrow } from "@plasmicpkgs/react-aria/skinny/registerOverlayArrow";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicOverlayArrow.module.css"; // plasmic-import: Ml83Hhd5Y1LZ/css

import TriangleFilledIcon from "./icons/PlasmicIcon__TriangleFilled"; // plasmic-import: rgIQpbkqvmSF/icon

createPlasmicElementProxy;

export type PlasmicOverlayArrow__VariantMembers = {
  dark: "dark";
};
export type PlasmicOverlayArrow__VariantsArgs = {
  dark?: SingleBooleanChoiceArg<"dark">;
};
type VariantPropType = keyof PlasmicOverlayArrow__VariantsArgs;
export const PlasmicOverlayArrow__VariantProps = new Array<VariantPropType>(
  "dark"
);

export type PlasmicOverlayArrow__ArgsType = {};
type ArgPropType = keyof PlasmicOverlayArrow__ArgsType;
export const PlasmicOverlayArrow__ArgProps = new Array<ArgPropType>();

export type PlasmicOverlayArrow__OverridesType = {
  root?: Flex__<typeof BaseOverlayArrow>;
  svg?: Flex__<"svg">;
};

export interface DefaultOverlayArrowProps {
  dark?: SingleBooleanChoiceArg<"dark">;
  className?: string;
}

const $$ = {};

function PlasmicOverlayArrow__RenderFunc(props: {
  variants: PlasmicOverlayArrow__VariantsArgs;
  args: PlasmicOverlayArrow__ArgsType;
  overrides: PlasmicOverlayArrow__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dark",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.dark
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  const [$ccVariants, setDollarCcVariants] = React.useState<
    Record<string, boolean>
  >({
    placementTop: false,
    placementLeft: false,
    placementRight: false
  });
  const updateVariant = React.useCallback(
    (changes: Record<string, boolean>) => {
      setDollarCcVariants(prev => {
        if (!Object.keys(changes).some(k => prev[k] !== changes[k])) {
          return prev;
        }
        return { ...prev, ...changes };
      });
    },
    []
  );

  return (
    <BaseOverlayArrow
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        { [sty.rootdark]: hasVariant($state, "dark", "dark") }
      )}
      plasmicUpdateVariant={updateVariant}
    >
      <TriangleFilledIcon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg, {
          [sty.svgdark]: hasVariant($state, "dark", "dark")
        })}
        role={"img"}
      />
    </BaseOverlayArrow>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof BaseOverlayArrow;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOverlayArrow__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOverlayArrow__VariantsArgs;
    args?: PlasmicOverlayArrow__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicOverlayArrow__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicOverlayArrow__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOverlayArrow__ArgProps,
          internalVariantPropNames: PlasmicOverlayArrow__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOverlayArrow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOverlayArrow";
  } else {
    func.displayName = `PlasmicOverlayArrow.${nodeName}`;
  }
  return func;
}

export const PlasmicOverlayArrow = Object.assign(
  // Top-level PlasmicOverlayArrow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicOverlayArrow
    internalVariantProps: PlasmicOverlayArrow__VariantProps,
    internalArgProps: PlasmicOverlayArrow__ArgProps
  }
);

export default PlasmicOverlayArrow;
/* prettier-ignore-end */
