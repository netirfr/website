/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: x1KjNaq7cQO0

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SiteHeader from "../../SiteHeader"; // plasmic-import: Vg4NgSIGKm96/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: byb1-I0x_v8X/component
import ButtonOldHoverNetir from "../../ButtonOldHoverNetir"; // plasmic-import: oz0RlE6uDG5S/component
import Probleme from "../../Probleme"; // plasmic-import: UVDtGkgycWzF/component
import Parcours from "../../Parcours"; // plasmic-import: 4kw4zRyWcW3Y/component
import Besoin from "../../Besoin"; // plasmic-import: CZV8F0NS4iKj/component
import Pourquoimentor from "../../Pourquoimentor"; // plasmic-import: uetCmPPf_YKH/component
import WhyMentoring from "../../WhyMentoring"; // plasmic-import: 3CrxnqpAup0w/component
import Testimonial from "../../Testimonial"; // plasmic-import: dCyluW4eRMLq/component
import Faq from "../../Faq"; // plasmic-import: wBbJjw0EbsaX/component
import Footer from "../../Footer"; // plasmic-import: lPSQkcOmsQQw/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicLandingMentor.module.css"; // plasmic-import: x1KjNaq7cQO0/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: 99U4uMxg1jkf/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: FEzuhm3U7mDW/icon
import NIcons3Icon from "./icons/PlasmicIcon__NIcons3"; // plasmic-import: ZzsUrvDAoxUM/icon
import PiggyBankSaveSvgrepoComSvgIcon from "./icons/PlasmicIcon__PiggyBankSaveSvgrepoComSvg"; // plasmic-import: f7RZb-9Lyqyq/icon
import BuildSvgrepoComSvgIcon from "./icons/PlasmicIcon__BuildSvgrepoComSvg"; // plasmic-import: ICINrcYsx2ye/icon
import ShareSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__ShareSvgrepoCom1Svg"; // plasmic-import: dv_PMYQhsYzL/icon
import BirdSvgrepoComSvgIcon from "./icons/PlasmicIcon__BirdSvgrepoComSvg"; // plasmic-import: ptdwA2CYCFeS/icon
import BanknotesEuroMoneyCurrencyFinancePaymentSvgrepoComSvgIcon from "./icons/PlasmicIcon__BanknotesEuroMoneyCurrencyFinancePaymentSvgrepoComSvg"; // plasmic-import: FGTM-s75xkRY/icon
import PhCaretRightBoldIcon from "./icons/PlasmicIcon__PhCaretRightBold"; // plasmic-import: ze4Fnw-tUZOH/icon
import ToolsSolidSvgrepoComSvgIcon from "./icons/PlasmicIcon__ToolsSolidSvgrepoComSvg"; // plasmic-import: AIBrYWM_cNE9/icon
import TrophySvgrepoCom1SvgIcon from "./icons/PlasmicIcon__TrophySvgrepoCom1Svg"; // plasmic-import: 3-CL4fA10oeb/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: PULVk5w2WWx_/icon
import ConfoundedSquareSvgrepoComSvgIcon from "./icons/PlasmicIcon__ConfoundedSquareSvgrepoComSvg"; // plasmic-import: FxfCNV_9moKd/icon
import FriendSvgrepoComSvg2Icon from "./icons/PlasmicIcon__FriendSvgrepoComSvg2"; // plasmic-import: Xwyub7VrgltR/icon
import StrategySvgrepoComSvgIcon from "./icons/PlasmicIcon__StrategySvgrepoComSvg"; // plasmic-import: QYt0VL7-aN8q/icon
import WelcomeLearnMoreSvgrepoComSvgIcon from "./icons/PlasmicIcon__WelcomeLearnMoreSvgrepoComSvg"; // plasmic-import: 9-Xu5Um-1bw2/icon
import UpRightArrowSvgrepoComSvgIcon from "./icons/PlasmicIcon__UpRightArrowSvgrepoComSvg"; // plasmic-import: IJwl-W1jTjq9/icon
import ShareSvgrepoComSvgIcon from "./icons/PlasmicIcon__ShareSvgrepoComSvg"; // plasmic-import: zI2ApZ2oW0EX/icon
import NetworkingHumanpictosSvgrepoComSvgIcon from "./icons/PlasmicIcon__NetworkingHumanpictosSvgrepoComSvg"; // plasmic-import: pen4TRX3-O4v/icon
import NIcons2Icon from "./icons/PlasmicIcon__NIcons2"; // plasmic-import: _EC8PI1hBKVF/icon
import mentor3PngTQv2Vxp8NSt from "./images/mentor3Png.png"; // plasmic-import: T_qv2Vxp8NSt/picture
import image98Msj2E5HdHLyD from "./images/image98.svg"; // plasmic-import: MSJ2E5HdHLyD/picture
import image25P3WJjSxncOy from "./images/image25.png"; // plasmic-import: P3wJJSxnc_Oy/picture
import chevre2RemovebgPreviewPngO75IhK4K4VeR from "./images/chevre2RemovebgPreviewPng.png"; // plasmic-import: O75IhK4K4VeR/picture
import _246556642202W039N003113BP1113JpgLK8OabgKs2I9 from "./images/_246556642202W039N003113BP1113Jpg.jpg"; // plasmic-import: lK8oabgKS2I9/picture
import _453022119208Jpg1QfgazTjLkB8 from "./images/_453022119208Jpg.jpg"; // plasmic-import: 1QFGAZTjLkB8/picture
import geminiGeneratedImageEzkeytezkeytezkePng5RmklOer4Xzy from "./images/geminiGeneratedImageEzkeytezkeytezkePng.png"; // plasmic-import: 5RMKLOer4Xzy/picture
import geminiGeneratedImageA5I3Roa5I3Roa5I3PngXmCrSs4TOtMj from "./images/geminiGeneratedImageA5I3Roa5I3Roa5I3Png.png"; // plasmic-import: XmCRSs4tOtMj/picture
import geminiGeneratedImageDghrcodghrcodghrPngKxSUpNaIbv from "./images/geminiGeneratedImageDghrcodghrcodghrPng.png"; // plasmic-import: kxS-UpNa-IBV/picture
import mentorapplausRemovebgPreviewPngJiqdtvBdgnp4 from "./images/mentorapplausRemovebgPreviewPng.png"; // plasmic-import: JiqdtvBDGNP4/picture
import geminiGeneratedImage8R11Yk8R11Yk8R11RemovebgPreviewPngBZ8T737YaQxk from "./images/geminiGeneratedImage8R11Yk8R11Yk8R11RemovebgPreviewPng.png"; // plasmic-import: bZ8t737YaQXK/picture
import image41MvZbyZuDk41 from "./images/image41.svg"; // plasmic-import: MvZBY-ZuDK41/picture
import logoTextBlackColorBgWhite1500PngBSyZCbzPXsht from "./images/logoTextBlackColorBgWhite1500Png.png"; // plasmic-import: BSyZCbzPXsht/picture

createPlasmicElementProxy;

export type PlasmicLandingMentor__VariantMembers = {};
export type PlasmicLandingMentor__VariantsArgs = {};
type VariantPropType = keyof PlasmicLandingMentor__VariantsArgs;
export const PlasmicLandingMentor__VariantProps = new Array<VariantPropType>();

export type PlasmicLandingMentor__ArgsType = { children?: React.ReactNode };
type ArgPropType = keyof PlasmicLandingMentor__ArgsType;
export const PlasmicLandingMentor__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicLandingMentor__OverridesType = {
  body?: Flex__<"div">;
  wrapper?: Flex__<"div">;
  hero?: Flex__<"div">;
  siteHeader3?: Flex__<typeof SiteHeader>;
  buttonButton5?: Flex__<typeof ButtonPrimary>;
  interactionEffect6?: Flex__<"div">;
  value?: Flex__<"div">;
  titre?: Flex__<"div">;
  h4?: Flex__<"h4">;
  boutons2?: Flex__<"div">;
  primary?: Flex__<typeof ButtonPrimary>;
  primary2?: Flex__<typeof ButtonPrimary>;
  old?: Flex__<"div">;
  blur2?: Flex__<typeof PlasmicImg__>;
  valueProposition?: Flex__<"div">;
  buttons2?: Flex__<"div">;
  problemes?: Flex__<"section">;
  parcours?: Flex__<"section">;
  solutions?: Flex__<"section">;
  besoinOld?: Flex__<"section">;
  blur?: Flex__<typeof PlasmicImg__>;
  _3Etapes?: Flex__<"section">;
  old2?: Flex__<"div">;
  testimonials?: Flex__<"div">;
  titre4?: Flex__<"div">;
  testimonial?: Flex__<"div">;
  callToAction2?: Flex__<"div">;
  buttonButton7?: Flex__<typeof ButtonPrimary>;
  callToAction1?: Flex__<"div">;
  buttonButton4?: Flex__<typeof ButtonPrimary>;
  faq?: Flex__<"div">;
  titre7?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultLandingMentorProps {
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

export function Head() {
  return (
    <>
      <meta name="twitter:card" content="summary_large_image" />
      <title key="title">{PlasmicLandingMentor.pageMetadata.title}</title>
      <meta
        key="og:title"
        property="og:title"
        content={PlasmicLandingMentor.pageMetadata.title}
      />
      <meta
        key="twitter:title"
        name="twitter:title"
        content={PlasmicLandingMentor.pageMetadata.title}
      />
      <meta
        key="description"
        name="description"
        content={PlasmicLandingMentor.pageMetadata.description}
      />
      <meta
        key="og:description"
        property="og:description"
        content={PlasmicLandingMentor.pageMetadata.description}
      />
      <meta
        key="twitter:description"
        name="twitter:description"
        content={PlasmicLandingMentor.pageMetadata.description}
      />
      <meta
        key="og:image"
        property="og:image"
        content={PlasmicLandingMentor.pageMetadata.ogImageSrc}
      />
      <meta
        key="twitter:image"
        name="twitter:image"
        content={PlasmicLandingMentor.pageMetadata.ogImageSrc}
      />
      <link
        rel="canonical"
        href={PlasmicLandingMentor.pageMetadata.canonical}
      />
    </>
  );
}

function PlasmicLandingMentor__RenderFunc(props: {
  variants: PlasmicLandingMentor__VariantsArgs;
  args: PlasmicLandingMentor__ArgsType;
  overrides: PlasmicLandingMentor__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "siteHeader3.isNavopen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonButton5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonButton5.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonButton4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonButton4.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonButton7.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "buttonNoirModifier2"
      },
      {
        path: "buttonButton7.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "soft"
      },
      {
        path: "primary.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "primary.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "primary2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "primary2.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "soft"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"body"}
          data-plasmic-override={overrides.body}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.body
          )}
        >
          <div
            data-plasmic-name={"wrapper"}
            data-plasmic-override={overrides.wrapper}
            className={classNames(projectcss.all, sty.wrapper)}
          >
            <div
              data-plasmic-name={"hero"}
              data-plasmic-override={overrides.hero}
              className={classNames(projectcss.all, sty.hero)}
            >
              <SiteHeader
                data-plasmic-name={"siteHeader3"}
                data-plasmic-override={overrides.siteHeader3}
                className={classNames("__wab_instance", sty.siteHeader3)}
                isNavopen={generateStateValueProp($state, [
                  "siteHeader3",
                  "isNavopen"
                ])}
                onIsNavopenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "siteHeader3",
                    "isNavopen"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <ButtonPrimary
                  data-plasmic-name={"buttonButton5"}
                  data-plasmic-override={overrides.buttonButton5}
                  className={classNames("__wab_instance", sty.buttonButton5)}
                  color={generateStateValueProp($state, [
                    "buttonButton5",
                    "color"
                  ])}
                  disabled={false}
                  interactionEffect2={
                    <div
                      data-plasmic-name={"interactionEffect6"}
                      data-plasmic-override={overrides.interactionEffect6}
                      className={classNames(
                        projectcss.all,
                        sty.interactionEffect6
                      )}
                    />
                  }
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3UjT0
                      )}
                    >
                      {"Inscription"}
                    </div>
                  }
                  onColorChange2={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "buttonButton5",
                      "color"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onTypeChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "buttonButton5",
                      "type"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  type={generateStateValueProp($state, [
                    "buttonButton5",
                    "type"
                  ])}
                />
              </SiteHeader>
              <div className={classNames(projectcss.all, sty.freeBox__fbDmm)}>
                <div
                  data-plasmic-name={"value"}
                  data-plasmic-override={overrides.value}
                  className={classNames(projectcss.all, sty.value)}
                >
                  <div
                    data-plasmic-name={"titre"}
                    data-plasmic-override={overrides.titre}
                    className={classNames(projectcss.all, sty.titre)}
                  >
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1___3T5Bx
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "tabletOnly") ? (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "var(--token-a7EGbo9QyMt7)" }}
                          >
                            {
                              "Mentor : transformez votre expertise en impact et en revenu compl\u00e9mentaire."
                            }
                          </span>
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "var(--token-a7EGbo9QyMt7)" }}
                          >
                            {
                              "Mentor : transformez votre expertise en impact et en revenu compl\u00e9mentaire."
                            }
                          </span>
                        </React.Fragment>
                      )}
                    </h1>
                    <h4
                      data-plasmic-name={"h4"}
                      data-plasmic-override={overrides.h4}
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Faites confiance \u00e0 nos mentors, ils sauront vous proposer nos meilleurs freelances."
                        : "Rejoignez Netir et devenez le guide de la nouvelle g\u00e9n\u00e9ration freelance. Transmettez votre savoir, construisez votre h\u00e9ritage et soyez r\u00e9mun\u00e9r\u00e9 pour votre exp\u00e9rience."}
                    </h4>
                    <div
                      data-plasmic-name={"boutons2"}
                      data-plasmic-override={overrides.boutons2}
                      className={classNames(projectcss.all, sty.boutons2)}
                    >
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__h46Zw
                        )}
                        component={Link}
                        href={"netir.fr/sign-up"}
                        platform={"gatsby"}
                      >
                        <ButtonPrimary
                          data-plasmic-name={"primary"}
                          data-plasmic-override={overrides.primary}
                          className={classNames("__wab_instance", sty.primary)}
                          color={generateStateValueProp($state, [
                            "primary",
                            "color"
                          ])}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__t2NZh
                              )}
                            >
                              {"Devenez mentor Netir !"}
                            </div>
                          }
                          onColorChange2={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "primary",
                              "color"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onTypeChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "primary",
                              "type"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          type={generateStateValueProp($state, [
                            "primary",
                            "type"
                          ])}
                        />
                      </PlasmicLink__>
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__wsFkw
                        )}
                        component={Link}
                        href={"#problemes"}
                        platform={"gatsby"}
                      >
                        <ButtonPrimary
                          data-plasmic-name={"primary2"}
                          data-plasmic-override={overrides.primary2}
                          className={classNames("__wab_instance", sty.primary2)}
                          color={generateStateValueProp($state, [
                            "primary2",
                            "color"
                          ])}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__q4BpV
                              )}
                            >
                              {"D\u00e9couvrir le programme de mentorat"}
                            </div>
                          }
                          onColorChange2={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "primary2",
                              "color"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onTypeChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "primary2",
                              "type"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          type={generateStateValueProp($state, [
                            "primary2",
                            "type"
                          ])}
                        />
                      </PlasmicLink__>
                    </div>
                  </div>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___3FGkT)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "auto"
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "450px"
                          : "600px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "none"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "auto"
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "40%"
                          : "37%"
                    }
                    loading={"lazy"}
                    src={{
                      src: mentor3PngTQv2Vxp8NSt,
                      fullWidth: 1024,
                      fullHeight: 1024,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"old"}
              data-plasmic-override={overrides.old}
              className={classNames(projectcss.all, sty.old)}
            >
              <PlasmicImg__
                data-plasmic-name={"blur2"}
                data-plasmic-override={overrides.blur2}
                alt={""}
                className={classNames(sty.blur2)}
                displayHeight={"630px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"70%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"630px"}
                loading={"lazy"}
                src={{
                  src: image98Msj2E5HdHLyD,
                  fullWidth: 1037,
                  fullHeight: 1031,
                  aspectRatio: 1.00582
                }}
              />

              <div className={classNames(projectcss.all, sty.freeBox__hOmV)}>
                <div
                  data-plasmic-name={"valueProposition"}
                  data-plasmic-override={overrides.valueProposition}
                  className={classNames(projectcss.all, sty.valueProposition)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___42MtO
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "tabletOnly") ? (
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <h1
                            className={classNames(
                              projectcss.all,
                              projectcss.h1,
                              projectcss.__wab_text,
                              sty.h1___3X9I
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "tabletOnly"
                            ) ? (
                              <React.Fragment>
                                <React.Fragment>{"Des "}</React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ color: "var(--token-9HNAvI0pqHnB)" }}
                                >
                                  {"freelances"}
                                </span>
                                <React.Fragment>
                                  {" mentor\u00e9s pour des "}
                                </React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ color: "var(--token-9HNAvI0pqHnB)" }}
                                >
                                  {"r\u00e9sultats"}
                                </span>
                                <React.Fragment>{" au sommet"}</React.Fragment>
                              </React.Fragment>
                            ) : (
                              "Le coup de pouce qui fait d\u00e9coller ta carri\u00e8re freelance \ud83d\ude80"
                            )}
                          </h1>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <h1
                            className={classNames(
                              projectcss.all,
                              projectcss.h1,
                              projectcss.__wab_text,
                              sty.h1___3X9I
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "tabletOnly"
                            ) ? (
                              <React.Fragment>
                                <React.Fragment>{"Des "}</React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ color: "var(--token-9HNAvI0pqHnB)" }}
                                >
                                  {"freelances"}
                                </span>
                                <React.Fragment>
                                  {" mentor\u00e9s pour des "}
                                </React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ color: "var(--token-9HNAvI0pqHnB)" }}
                                >
                                  {"r\u00e9sultats"}
                                </span>
                                <React.Fragment>{" au sommet"}</React.Fragment>
                              </React.Fragment>
                            ) : (
                              "Le coup de pouce qui fait d\u00e9coller ta carri\u00e8re freelance \ud83d\ude80"
                            )}
                          </h1>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    )}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__a78Pn
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Faites confiance \u00e0 nos mentors, ils sauront vous proposer nos meilleurs freelances."
                      : hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "Faites confiance \u00e0 nos mentors, ils sauront vous proposer nos meilleurs freelances."
                        : "Bienvenue dans l\u2019univers Mentor de Netir : un accompagnement personnalis\u00e9 pour acc\u00e9l\u00e9rer ta r\u00e9ussite."}
                  </div>
                  <div
                    data-plasmic-name={"buttons2"}
                    data-plasmic-override={overrides.buttons2}
                    className={classNames(projectcss.all, sty.buttons2)}
                  >
                    {renderPlasmicSlot({
                      defaultContents: (
                        <ButtonOldHoverNetir
                          className={classNames(
                            "__wab_instance",
                            sty.buttonOldHoverNetir__lsZKe
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__phGoD
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uisk
                              )}
                            >
                              {"Je rejoins Netir"}
                            </div>
                            <NIcons3Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___2SkC
                              )}
                              role={"img"}
                            />
                          </div>
                        </ButtonOldHoverNetir>
                      ),
                      value: args.children
                    })}
                  </div>
                </div>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__b72Zq)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "auto"
                      : hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "auto"
                        : "auto"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "30em"
                      : hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "30em"
                        : "30%"
                  }
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "100%"
                      : hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "100%"
                        : "auto"
                  }
                  loading={"lazy"}
                  src={{
                    src: image25P3WJjSxncOy,
                    fullWidth: 795,
                    fullHeight: 971,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <section
              data-plasmic-name={"problemes"}
              data-plasmic-override={overrides.problemes}
              className={classNames(projectcss.all, sty.problemes)}
              id={"problemes"}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__xxRdC
                )}
              >
                {
                  "Votre exp\u00e9rience a de la valeur. \nIl est temps de la faire fructifier."
                }
              </h2>
              <div className={classNames(projectcss.all, sty.freeBox__czy1T)}>
                <Probleme
                  citation={``}
                  className={classNames("__wab_instance", sty.probleme__nMyfa)}
                  description={
                    "Recevez un pourcentage des revenus des missions de vos freelances coach\u00e9s, sans effort de vente. Votre savoir est enfin justement r\u00e9mun\u00e9r\u00e9."
                  }
                  titre={"Mon\u00e9tisez Votre Expertise"}
                >
                  <PiggyBankSaveSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg___22Hzl)}
                    role={"img"}
                  />
                </Probleme>
                <Probleme
                  citation={``}
                  className={classNames("__wab_instance", sty.probleme__oOt67)}
                  description={
                    "Guidez des talents prometteurs, acc\u00e9l\u00e9rez leur carri\u00e8re et participez \u00e0 la cr\u00e9ation de l'\u00e9lite freelance de demain. Votre impact est concret."
                  }
                  titre={"B\u00e2tissez Votre H\u00e9ritage"}
                >
                  <BuildSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__iuAaN)}
                    role={"img"}
                  />
                </Probleme>
                <Probleme
                  citation={``}
                  className={classNames("__wab_instance", sty.probleme___5E5Ig)}
                  description={
                    "\u00c9changez avec d'autres mentors experts et des entreprises innovantes. Affirmez votre position de leader d'opinion dans votre domaine."
                  }
                  titre={"D\u00e9veloppez Votre R\u00e9seau et Votre Marque"}
                >
                  <ShareSvgrepoCom1SvgIcon
                    className={classNames(projectcss.all, sty.svg__lRzyb)}
                    role={"img"}
                  />
                </Probleme>
                <Probleme
                  citation={``}
                  className={classNames("__wab_instance", sty.probleme__rFb90)}
                  description={
                    "Choisissez le nombre de freelances \u00e0 accompagner et g\u00e9rez votre temps comme vous l'entendez. Un r\u00f4le enrichissant sans les contraintes."
                  }
                  titre={"Flexibilit\u00e9 et Libert\u00e9"}
                >
                  <BirdSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__cJpxm)}
                    role={"img"}
                  />
                </Probleme>
              </div>
            </section>
            <section
              data-plasmic-name={"parcours"}
              data-plasmic-override={overrides.parcours}
              className={classNames(projectcss.all, sty.parcours)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__fdNik)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2___8998
                  )}
                >
                  {hasVariant(globalVariants, "screen", "tabletOnly")
                    ? "Comment vous allez transformer des carri\u00e8res."
                    : "Comment vous allez transformer des carri\u00e8res."}
                </h2>
                <div className={classNames(projectcss.all, sty.freeBox__kx87W)}>
                  <Parcours
                    className={classNames(
                      "__wab_instance",
                      sty.parcours__pD9ID
                    )}
                    description={
                      "Pr\u00e9sentez votre parcours et vos expertises. Notre \u00e9quipe valide votre statut de GOAT pour la qualit\u00e9 de notre \u00e9cosyst\u00e8me."
                    }
                    titre={"Validez Votre Profil d'Expert"}
                  />

                  <Parcours
                    className={classNames("__wab_instance", sty.parcours__bc2O)}
                    description={
                      "Nous vous attribuons des freelances dont les besoins correspondent \u00e0 vos comp\u00e9tences. Un matching intelligent pour un impact maximal."
                    }
                    etape={"2"}
                    titre={"Connectez avec Vos Freelances"}
                  />

                  <Parcours
                    className={classNames("__wab_instance", sty.parcours___90Q)}
                    description={
                      "Organisez des sessions de coaching individuelles, participez \u00e0 des masterclass, proposez du pair-programming. Aidez vos freelances \u00e0 surmonter leurs d\u00e9fis et \u00e0 monter en comp\u00e9tence."
                    }
                    etape={"3"}
                    titre={"Guidez et Accompagnez"}
                  />

                  <Parcours
                    className={classNames(
                      "__wab_instance",
                      sty.parcours__uSpxv
                    )}
                    description={
                      "Observez la progression de vos poulains et recevez votre r\u00e9mun\u00e9ration. Un r\u00f4le gratifiant et g\u00e9n\u00e9rateur de revenus."
                    }
                    etape={"4"}
                    titre={"Suivez l'\u00c9volution et R\u00e9coltez"}
                  />
                </div>
              </div>
            </section>
            <section
              data-plasmic-name={"solutions"}
              data-plasmic-override={overrides.solutions}
              className={classNames(projectcss.all, sty.solutions)}
              id={"solutions"}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__bHmsd
                )}
              >
                {"Pourquoi Netir est le cadre id\u00e9al pour votre mentorat."}
              </h2>
              <div className={classNames(projectcss.all, sty.freeBox__fMhn0)}>
                <Probleme
                  citation={
                    "Netir : Votre temps est valoris\u00e9 financi\u00e8rement. "
                  }
                  className={classNames("__wab_instance", sty.probleme__owkV3)}
                  description={
                    "Ailleurs : Souvent b\u00e9n\u00e9vole, ou difficilement mon\u00e9tisable."
                  }
                  titre={"R\u00e9mun\u00e9ration Structur\u00e9e\t"}
                >
                  <BanknotesEuroMoneyCurrencyFinancePaymentSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__o09D9)}
                    role={"img"}
                  />
                </Probleme>
                <Probleme
                  citation={
                    "Netir : Des freelances motiv\u00e9s, d\u00e9j\u00e0 pr\u00e9-qualifi\u00e9s. "
                  }
                  className={classNames("__wab_instance", sty.probleme__zBd2M)}
                  description={
                    "Ailleurs : Sourcing incertain, profils disparates."
                  }
                  titre={"Acc\u00e8s \u00e0 des Talents Qualifi\u00e9s"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__r8Eu2)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__yvdPt)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "150px"
                          : "250px"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "150px"
                          : "250px"
                      }
                      loading={"lazy"}
                      src={{
                        src: chevre2RemovebgPreviewPngO75IhK4K4VeR,
                        fullWidth: 427,
                        fullHeight: 585,
                        aspectRatio: undefined
                      }}
                    />

                    <PhCaretRightBoldIcon
                      className={classNames(projectcss.all, sty.svg__eNlq4)}
                      role={"img"}
                    />
                  </div>
                </Probleme>
                <Probleme
                  citation={
                    "Netir : Une plateforme d\u00e9di\u00e9e, des outils de suivi, une communaut\u00e9 de mentors. "
                  }
                  className={classNames("__wab_instance", sty.probleme__adKnx)}
                  description={"Ailleurs : Gestion individuelle, isolement."}
                  titre={"Cadre et Outils de Support"}
                >
                  <ToolsSolidSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__b6MSq)}
                    role={"img"}
                  />
                </Probleme>
                <Probleme
                  citation={
                    "Netir : Votre r\u00f4le est central et valoris\u00e9. "
                  }
                  className={classNames("__wab_instance", sty.probleme__sB9Rc)}
                  description={"Ailleurs : Souvent un r\u00f4le de l'ombre."}
                  titre={"Impact Reconnu"}
                >
                  <TrophySvgrepoCom1SvgIcon
                    className={classNames(projectcss.all, sty.svg__dWmy1)}
                    role={"img"}
                  />
                </Probleme>
              </div>
            </section>
            <section
              data-plasmic-name={"besoinOld"}
              data-plasmic-override={overrides.besoinOld}
              className={classNames(projectcss.all, sty.besoinOld)}
            >
              <PlasmicImg__
                data-plasmic-name={"blur"}
                data-plasmic-override={overrides.blur}
                alt={""}
                className={classNames(sty.blur)}
                displayHeight={"970px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"80%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"976px"}
                loading={"lazy"}
                src={{
                  src: image98Msj2E5HdHLyD,
                  fullWidth: 1037,
                  fullHeight: 1031,
                  aspectRatio: 1.00582
                }}
              />

              <div className={classNames(projectcss.all, sty.freeBox__qcFt9)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__xqXjb
                  )}
                >
                  {"Le mentorat, c\u2019est quoi concr\u00e8tement ?"}
                </h2>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9PqzY
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontStyle: "italic" }}
                    >
                      {
                        "C\u2019est un partenariat gagnant-gagnant : ton succ\u00e8s est aussi celui de ton mentor."
                      }
                    </span>
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__zdPzq)}>
                <Besoin
                  className={classNames("__wab_instance", sty.besoin__hIUs8)}
                  description={
                    "En visio ou t\u00e9l\u00e9phone, pour avancer sereinement avec un mentor \u00e0 ton \u00e9coute."
                  }
                  titre={"Des \u00e9changes r\u00e9guliers"}
                >
                  <Icon6Icon
                    className={classNames(projectcss.all, sty.svg__oIv4G)}
                    role={"img"}
                  />
                </Besoin>
                <Besoin
                  className={classNames("__wab_instance", sty.besoin___9WfOw)}
                  description={
                    "Suivi adapt\u00e9 \u00e0 tes besoins, conseils cibl\u00e9s et outils concrets pour progresser."
                  }
                  titre={"Un accompagnement personnalis\u00e9"}
                >
                  <Icon6Icon
                    className={classNames(projectcss.all, sty.svg__jTsLb)}
                    role={"img"}
                  />
                </Besoin>
                <Besoin
                  className={classNames("__wab_instance", sty.besoin__vmYac)}
                  description={
                    "Tu gagnes en clart\u00e9, structure et confiance. Ton mentor t\u2019aide \u00e0 tenir le cap."
                  }
                  titre={"Une vraie dynamique de croissance"}
                >
                  <Icon6Icon
                    className={classNames(projectcss.all, sty.svg__bYrNp)}
                    role={"img"}
                  />
                </Besoin>
              </div>
            </section>
            <section
              data-plasmic-name={"_3Etapes"}
              data-plasmic-override={overrides._3Etapes}
              className={classNames(projectcss.all, sty._3Etapes)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__iU8Lf)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2___8P079
                  )}
                >
                  {"Pourquoi choisir un mentor Netir ?\r"}
                </h2>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cru3U
                  )}
                >
                  {
                    "Le mentoring chez Netir est un processus collaboratif et personnalis\u00e9 con\u00e7u pour vous aider \u00e0 atteindre vos objectifs professionnels en tant que freelance. Il s'agit d'une relation de confiance avec un expert qui partage son exp\u00e9rience et ses connaissances."
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__lOdFs)}>
                <div className={classNames(projectcss.all, sty.freeBox__kljlm)}>
                  <Pourquoimentor
                    className={classNames(
                      "__wab_instance",
                      sty.pourquoimentor__bbayf
                    )}
                  >
                    <ConfoundedSquareSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__hDpMf)}
                      role={"img"}
                    />
                  </Pourquoimentor>
                  <Pourquoimentor
                    className={classNames(
                      "__wab_instance",
                      sty.pourquoimentor__dbG8E
                    )}
                    description={
                      "Le mentorat vous apporte un soutien moral et une perspective ext\u00e9rieure, essentiels pour b\u00e2tir votre confiance en vous et en votre entreprise."
                    }
                    titire={"Confiance accrue"}
                  >
                    <FriendSvgrepoComSvg2Icon
                      className={classNames(projectcss.all, sty.svg__is5U)}
                      role={"img"}
                    />
                  </Pourquoimentor>
                  <Pourquoimentor
                    className={classNames(
                      "__wab_instance",
                      sty.pourquoimentor__sl9HI
                    )}
                    description={
                      "Votre mentor vous aide \u00e0 fixer des objectifs clairs et \u00e0 d\u00e9finir une strat\u00e9gie de croissance adapt\u00e9e \u00e0 votre activit\u00e9."
                    }
                    titire={"Guidance strat\u00e9gique"}
                  >
                    <StrategySvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__ynmto)}
                      role={"img"}
                    />
                  </Pourquoimentor>
                  <Pourquoimentor
                    className={classNames(
                      "__wab_instance",
                      sty.pourquoimentor__lMtu8
                    )}
                    description={
                      "Affinez vos comp\u00e9tences techniques, commerciales ou de gestion avec des conseils pratiques et actuels."
                    }
                    titire={"Monter en comp\u00e9tence"}
                  >
                    <WelcomeLearnMoreSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__hqrhp)}
                      role={"img"}
                    />
                  </Pourquoimentor>
                  <Pourquoimentor
                    className={classNames(
                      "__wab_instance",
                      sty.pourquoimentor__fT4Mx
                    )}
                    description={
                      "Optimisez vos processus et diversifiez vos revenus pour une croissance durable."
                    }
                    titire={"Optimisation et croissance"}
                  >
                    <UpRightArrowSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__oInzH)}
                      role={"img"}
                    />
                  </Pourquoimentor>
                  <Pourquoimentor
                    className={classNames(
                      "__wab_instance",
                      sty.pourquoimentor___0PmRf
                    )}
                    description={
                      "Votre mentor partage ses r\u00e9ussites et ses erreurs, vous permettant d'apprendre de son parcours et d'\u00e9viter les pi\u00e8ges courants."
                    }
                    titire={"Partage d'exp\u00e9rience"}
                  >
                    <ShareSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__wom9Y)}
                      role={"img"}
                    />
                  </Pourquoimentor>
                  <Pourquoimentor
                    className={classNames(
                      "__wab_instance",
                      sty.pourquoimentor___8Lgi
                    )}
                    description={
                      "Un mentor peut vous ouvrir les portes de son r\u00e9seau et vous conseiller sur les meilleures strat\u00e9gies pour d\u00e9velopper votre propre visibilit\u00e9 et trouver de nouveaux clients."
                    }
                    titire={"R\u00e9seautage et visibilit\u00e9"}
                  >
                    <NetworkingHumanpictosSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__o8QpM)}
                      role={"img"}
                    />
                  </Pourquoimentor>
                </div>
              </div>
              <div
                data-plasmic-name={"old2"}
                data-plasmic-override={overrides.old2}
                className={classNames(projectcss.all, sty.old2)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__vriRo)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jVtDz)}
                  >
                    <WhyMentoring
                      className={classNames(
                        "__wab_instance",
                        sty.whyMentoring__yA9CJ
                      )}
                      content={
                        "B\u00e9n\u00e9ficiez de solutions concr\u00e8tes et de strat\u00e9gies \u00e9prouv\u00e9es pour surmonter les d\u00e9fis sp\u00e9cifiques au freelancing, tels que la prospection de clients, la gestion efficace de votre temps, "
                      }
                      illustration={{
                        src: _246556642202W039N003113BP1113JpgLK8OabgKs2I9,
                        fullWidth: 7500,
                        fullHeight: 3061,
                        aspectRatio: undefined
                      }}
                      titre={"\ud83d\udd39R\u00e9solution de Probl\u00e8mes"}
                    />

                    <WhyMentoring
                      className={classNames(
                        "__wab_instance",
                        sty.whyMentoring___1PbGb
                      )}
                      content={
                        "Le mentorat vous apporte un soutien moral et une perspective ext\u00e9rieure, essentiels pour b\u00e2tir votre confiance en vous et en votre entreprise."
                      }
                      titre={"\ud83d\udd39Confiance accrue"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__laWwA)}
                  >
                    <WhyMentoring
                      className={classNames(
                        "__wab_instance",
                        sty.whyMentoring__zMBx
                      )}
                      content={
                        "Votre mentor vous aide \u00e0 fixer des objectifs clairs et \u00e0 d\u00e9finir une strat\u00e9gie de croissance adapt\u00e9e \u00e0 votre activit\u00e9."
                      }
                      illustration={{
                        src: _453022119208Jpg1QfgazTjLkB8,
                        fullWidth: 8000,
                        fullHeight: 3929,
                        aspectRatio: undefined
                      }}
                      titre={"\ud83d\udd39Guidance Stragt\u00e9gique"}
                    />

                    <WhyMentoring
                      className={classNames(
                        "__wab_instance",
                        sty.whyMentoring__lLmju
                      )}
                      content={
                        "Affinez vos comp\u00e9tences techniques, commerciales ou de gestion avec des conseils pratiques et actuels."
                      }
                      titre={"\ud83d\udd39Montez en comp\u00e9tence"}
                    />

                    <WhyMentoring
                      className={classNames(
                        "__wab_instance",
                        sty.whyMentoring__qFu5R
                      )}
                      content={
                        "Optimisez vos processus et diversifiez vos revenus pour une croissance durable."
                      }
                      titre={"\ud83d\udd39Optimisation et Croissance"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__y22Ll)}
                  >
                    <WhyMentoring
                      className={classNames(
                        "__wab_instance",
                        sty.whyMentoring___7Vvff
                      )}
                      content={
                        "Votre mentor partage ses r\u00e9ussites et ses erreurs, vous permettant d'apprendre de son parcours et d'\u00e9viter les pi\u00e8ges courants."
                      }
                      titre={"\ud83d\udd39Partage d'Exp\u00e9rience"}
                    />

                    <WhyMentoring
                      className={classNames(
                        "__wab_instance",
                        sty.whyMentoring___7Nodt
                      )}
                      content={
                        "Un mentor peut vous ouvrir les portes de son r\u00e9seau et vous conseiller sur les meilleures strat\u00e9gies pour d\u00e9velopper votre propre visibilit\u00e9 et trouver de nouveaux clients."
                      }
                      titre={"\ud83d\udd39R\u00e9seautage et Visibilit\u00e9"}
                    />
                  </div>
                </div>
              </div>
            </section>
            <div
              data-plasmic-name={"testimonials"}
              data-plasmic-override={overrides.testimonials}
              className={classNames(projectcss.all, sty.testimonials)}
            >
              <div
                data-plasmic-name={"titre4"}
                data-plasmic-override={overrides.titre4}
                className={classNames(projectcss.all, sty.titre4)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2___7O4GN
                  )}
                >
                  {
                    "Ils ont d\u00e9j\u00e0 boost\u00e9 leur activit\u00e9 avec Netir."
                  }
                </h2>
              </div>
              <div
                data-plasmic-name={"testimonial"}
                data-plasmic-override={overrides.testimonial}
                className={classNames(projectcss.all, sty.testimonial)}
              >
                <Testimonial
                  className={classNames(
                    "__wab_instance",
                    sty.testimonial__hPyW
                  )}
                  img={{
                    src: geminiGeneratedImageEzkeytezkeytezkePng5RmklOer4Xzy,
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["unnamedVariant"]
                      : undefined
                  }
                  name={"Marc N."}
                  review={
                    "\"Transmettre mon savoir sur Netir a redonn\u00e9 un sens concret \u00e0 mes 20 ans d'exp\u00e9rience. Voir mes 'poulains' s'\u00e9panouir et d\u00e9crocher des missions gr\u00e2ce \u00e0 mes conseils, c'est une satisfaction immense. Et la commission en fin de mois, c'est la juste reconnaissance de mon investissement.\""
                  }
                  starColor={"green"}
                  starCount={5}
                />

                <Testimonial
                  className={classNames(
                    "__wab_instance",
                    sty.testimonial__y30Ny
                  )}
                  img={{
                    src: geminiGeneratedImageA5I3Roa5I3Roa5I3PngXmCrSs4TOtMj,
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["unnamedVariant"]
                      : undefined
                  }
                  name={"Sophie P."}
                  review={
                    "\"J'ai enfin trouv\u00e9 la plateforme o\u00f9 mon expertise est vraiment valoris\u00e9e et o\u00f9 je peux impacter directement des carri\u00e8res. Le matching avec les freelances est pr\u00e9cis, et la flexibilit\u00e9 du r\u00f4le me permet d'\u00e9quilibrer parfaitement mon temps. Netir, c'est l'avenir du mentorat, sans aucun doute.\""
                  }
                  starCount={5}
                />

                <Testimonial
                  className={classNames(
                    "__wab_instance",
                    sty.testimonial__cVwV
                  )}
                  img={{
                    src: geminiGeneratedImageDghrcodghrcodghrPngKxSUpNaIbv,
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["unnamedVariant"]
                      : undefined
                  }
                  name={"J\u00e9remy L."}
                  review={
                    '"Le cadre de Netir est id\u00e9al pour le mentorat. Fini les discussions informelles sans r\u00e9el suivi. Ici, je peux guider des talents motiv\u00e9s, participer \u00e0 des masterclass enrichissantes, et surtout, contribuer \u00e0 b\u00e2tir une \u00e9lite freelance. C\'est un r\u00f4le gratifiant et tr\u00e8s stimulant intellectuellement."'
                  }
                  starColor={"blue"}
                  starCount={5}
                />
              </div>
            </div>
            <div
              data-plasmic-name={"callToAction2"}
              data-plasmic-override={overrides.callToAction2}
              className={classNames(projectcss.all, sty.callToAction2)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__bUOlk)}>
                <div className={classNames(projectcss.all, sty.freeBox__xMiac)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__eFuuD
                    )}
                  >
                    {
                      "Pr\u00eat \u00e0 partager votre savoir et \u00e0 fa\u00e7onner l'avenir ?"
                    }
                  </h2>
                  <ButtonPrimary
                    data-plasmic-name={"buttonButton7"}
                    data-plasmic-override={overrides.buttonButton7}
                    className={classNames("__wab_instance", sty.buttonButton7)}
                    color={generateStateValueProp($state, [
                      "buttonButton7",
                      "color"
                    ])}
                    end={
                      <NIcons2Icon
                        className={classNames(projectcss.all, sty.svg__eglxL)}
                        role={"img"}
                      />
                    }
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oWi8G
                        )}
                      >
                        {"Rejoignez la communaut\u00e9 des Mentors Netir !"}
                      </div>
                    }
                    linkTo={"netir.fr/sign-up"}
                    onColorChange2={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "buttonButton7",
                        "color"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onTypeChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "buttonButton7",
                        "type"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    type={generateStateValueProp($state, [
                      "buttonButton7",
                      "type"
                    ])}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__yPpkK)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "150px"
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "250px"
                          : "300px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100px"
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "150px"
                          : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: mentorapplausRemovebgPreviewPngJiqdtvBdgnp4,
                      fullWidth: 500,
                      fullHeight: 500,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"callToAction1"}
              data-plasmic-override={overrides.callToAction1}
              className={classNames(projectcss.all, sty.callToAction1)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__ego1J)}>
                <div className={classNames(projectcss.all, sty.freeBox__eqJ7A)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2___20Rdk
                    )}
                  >
                    {"Rejoignez un \u00e9cosyst\u00e8me 100% gagnant"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iyB7
                    )}
                  >
                    {
                      "Inscrivez-vous maintenant et d\u00e9couvrez une plateforme o\u00f9 talents et r\u00e9sultats se rencontrent."
                    }
                  </div>
                  <ButtonPrimary
                    data-plasmic-name={"buttonButton4"}
                    data-plasmic-override={overrides.buttonButton4}
                    className={classNames("__wab_instance", sty.buttonButton4)}
                    color={generateStateValueProp($state, [
                      "buttonButton4",
                      "color"
                    ])}
                    end={
                      <NIcons2Icon
                        className={classNames(projectcss.all, sty.svg__auK09)}
                        role={"img"}
                      />
                    }
                    iconEnd={true}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__h9Br5
                        )}
                      >
                        {"Je rejoins Netir"}
                      </div>
                    }
                    onColorChange2={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "buttonButton4",
                        "color"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onTypeChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "buttonButton4",
                        "type"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    type={generateStateValueProp($state, [
                      "buttonButton4",
                      "type"
                    ])}
                  />
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"faq"}
              data-plasmic-override={overrides.faq}
              className={classNames(projectcss.all, sty.faq)}
            >
              <div
                data-plasmic-name={"titre7"}
                data-plasmic-override={overrides.titre7}
                className={classNames(projectcss.all, sty.titre7)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__a1I
                  )}
                >
                  {
                    "Mentor chez Netir : Vos interrogations, nos \u00e9claircissements."
                  }
                </h2>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__mGmEq)}>
                <div className={classNames(projectcss.all, sty.freeBox__zduE)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xtg2P)}
                  >
                    <Faq
                      answer={
                        "Pour garantir l'excellence de notre mentorat, nous avons un processus de validation. Vous nous soumettez votre profil et vos expertises. Notre \u00e9quipe \u00e9value votre exp\u00e9rience et vos comp\u00e9tences en communication pour s'assurer que vous \u00eates un v\u00e9ritable GOAT, pr\u00eat \u00e0 transmettre votre savoir."
                      }
                      className={classNames("__wab_instance", sty.faq__tVe6C)}
                      question={
                        "Quel est le processus pour devenir Mentor Netir ?"
                      }
                    />

                    <Faq
                      answer={
                        "En tant que Mentor Netir, vous percevez une commission de 3% sur le montant des missions r\u00e9alis\u00e9es par les freelances que vous accompagnez. Votre r\u00e9mun\u00e9ration est directe, transparente et d\u00e9pend du succ\u00e8s de vos poulains, sans effort de vente de votre part."
                      }
                      className={classNames("__wab_instance", sty.faq__m1M7O)}
                      question={
                        "Comment suis-je r\u00e9mun\u00e9r\u00e9 en tant que Mentor ?"
                      }
                    />

                    <Faq
                      answer={
                        "La flexibilit\u00e9 est essentielle. Vous d\u00e9finissez le nombre de freelances que vous souhaitez accompagner (g\u00e9n\u00e9ralement 1 \u00e0 3 par mois au d\u00e9but). Le temps allou\u00e9 est \u00e0 discuter avec chaque freelance, mais nous encourageons des sessions r\u00e9guli\u00e8res (ex: 1h par semaine/quinzaine) ainsi que la participation \u00e0 nos masterclass ou sessions de pair-programming."
                      }
                      className={classNames("__wab_instance", sty.faq___6KWl)}
                      question={
                        "Combien de temps dois-je consacrer au mentorat ?"
                      }
                    />

                    <Faq
                      answer={
                        "Votre r\u00f4le est de guider et d'inspirer. Cela inclut le coaching sur les comp\u00e9tences techniques et soft skills, l'aide \u00e0 la r\u00e9solution de probl\u00e8mes sp\u00e9cifiques sur leurs missions, le partage d'exp\u00e9rience, et des conseils pour leur d\u00e9veloppement business. Nous vous fournissons des outils et un cadre pour structurer cet accompagnement."
                      }
                      className={classNames("__wab_instance", sty.faq__hwWdv)}
                      question={
                        "Quel type d'accompagnement dois-je apporter aux freelances ? "
                      }
                    />

                    <Faq
                      answer={
                        "Nous effectuons un matching intelligent bas\u00e9 sur vos expertises et les besoins des freelances. Nous vous proposons des profils, mais la d\u00e9cision finale vous appartient pour assurer une bonne synergie et un engagement mutuel."
                      }
                      className={classNames("__wab_instance", sty.faq__lt6Wc)}
                      question={
                        "Puis-je choisir les freelances que j'accompagne ? "
                      }
                    />

                    <Faq
                      answer={
                        "Absolument ! Vous rejoignez une communaut\u00e9 exclusive d'experts. Vous pourrez \u00e9changer avec d'autres mentors, partager vos meilleures pratiques, et b\u00e9n\u00e9ficier du support de l'\u00e9quipe Netir. Nous organisons \u00e9galement des \u00e9v\u00e9nements et des workshops d\u00e9di\u00e9s aux mentors."
                      }
                      className={classNames("__wab_instance", sty.faq__asysm)}
                      question={
                        "Y a-t-il une communaut\u00e9 ou un support pour les Mentors ?"
                      }
                    />

                    <Faq
                      answer={
                        "Chez Netir, vous payez uniquement \u00e0 la fin de la mission, soit mensuellement, soit au forfait selon vos besoins. La facturation est facilit\u00e9e et auto-g\u00e9n\u00e9r\u00e9e pour vous simplifier la vie et r\u00e9duire la charge administrative."
                      }
                      className={classNames("__wab_instance", sty.faq__vZq32)}
                      question={"Comment \u00e7a se passe pour le paiement ?"}
                    />
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__xqRui)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__twwf5)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "100%"
                        : "auto"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "100%"
                        : "80%"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "20px"
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "100%"
                          : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: geminiGeneratedImage8R11Yk8R11Yk8R11RemovebgPreviewPngBZ8T737YaQxk,
                      fullWidth: 427,
                      fullHeight: 585,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__tHgIy)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"285px"}
                loading={"lazy"}
                src={{
                  src: image41MvZbyZuDk41,
                  fullWidth: 720,
                  fullHeight: 997,
                  aspectRatio: 0.722166
                }}
              />
            </div>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  body: [
    "body",
    "wrapper",
    "hero",
    "siteHeader3",
    "buttonButton5",
    "interactionEffect6",
    "value",
    "titre",
    "h4",
    "boutons2",
    "primary",
    "primary2",
    "old",
    "blur2",
    "valueProposition",
    "buttons2",
    "problemes",
    "parcours",
    "solutions",
    "besoinOld",
    "blur",
    "_3Etapes",
    "old2",
    "testimonials",
    "titre4",
    "testimonial",
    "callToAction2",
    "buttonButton7",
    "callToAction1",
    "buttonButton4",
    "faq",
    "titre7",
    "footer"
  ],
  wrapper: [
    "wrapper",
    "hero",
    "siteHeader3",
    "buttonButton5",
    "interactionEffect6",
    "value",
    "titre",
    "h4",
    "boutons2",
    "primary",
    "primary2",
    "old",
    "blur2",
    "valueProposition",
    "buttons2",
    "problemes",
    "parcours",
    "solutions",
    "besoinOld",
    "blur",
    "_3Etapes",
    "old2",
    "testimonials",
    "titre4",
    "testimonial",
    "callToAction2",
    "buttonButton7",
    "callToAction1",
    "buttonButton4",
    "faq",
    "titre7",
    "footer"
  ],
  hero: [
    "hero",
    "siteHeader3",
    "buttonButton5",
    "interactionEffect6",
    "value",
    "titre",
    "h4",
    "boutons2",
    "primary",
    "primary2"
  ],
  siteHeader3: ["siteHeader3", "buttonButton5", "interactionEffect6"],
  buttonButton5: ["buttonButton5", "interactionEffect6"],
  interactionEffect6: ["interactionEffect6"],
  value: ["value", "titre", "h4", "boutons2", "primary", "primary2"],
  titre: ["titre", "h4", "boutons2", "primary", "primary2"],
  h4: ["h4"],
  boutons2: ["boutons2", "primary", "primary2"],
  primary: ["primary"],
  primary2: ["primary2"],
  old: ["old", "blur2", "valueProposition", "buttons2"],
  blur2: ["blur2"],
  valueProposition: ["valueProposition", "buttons2"],
  buttons2: ["buttons2"],
  problemes: ["problemes"],
  parcours: ["parcours"],
  solutions: ["solutions"],
  besoinOld: ["besoinOld", "blur"],
  blur: ["blur"],
  _3Etapes: ["_3Etapes", "old2"],
  old2: ["old2"],
  testimonials: ["testimonials", "titre4", "testimonial"],
  titre4: ["titre4"],
  testimonial: ["testimonial"],
  callToAction2: ["callToAction2", "buttonButton7"],
  buttonButton7: ["buttonButton7"],
  callToAction1: ["callToAction1", "buttonButton4"],
  buttonButton4: ["buttonButton4"],
  faq: ["faq", "titre7"],
  titre7: ["titre7"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  body: "div";
  wrapper: "div";
  hero: "div";
  siteHeader3: typeof SiteHeader;
  buttonButton5: typeof ButtonPrimary;
  interactionEffect6: "div";
  value: "div";
  titre: "div";
  h4: "h4";
  boutons2: "div";
  primary: typeof ButtonPrimary;
  primary2: typeof ButtonPrimary;
  old: "div";
  blur2: typeof PlasmicImg__;
  valueProposition: "div";
  buttons2: "div";
  problemes: "section";
  parcours: "section";
  solutions: "section";
  besoinOld: "section";
  blur: typeof PlasmicImg__;
  _3Etapes: "section";
  old2: "div";
  testimonials: "div";
  titre4: "div";
  testimonial: "div";
  callToAction2: "div";
  buttonButton7: typeof ButtonPrimary;
  callToAction1: "div";
  buttonButton4: typeof ButtonPrimary;
  faq: "div";
  titre7: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLandingMentor__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLandingMentor__VariantsArgs;
    args?: PlasmicLandingMentor__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicLandingMentor__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicLandingMentor__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLandingMentor__ArgProps,
          internalVariantPropNames: PlasmicLandingMentor__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLandingMentor__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "body") {
    func.displayName = "PlasmicLandingMentor";
  } else {
    func.displayName = `PlasmicLandingMentor.${nodeName}`;
  }
  return func;
}

export const PlasmicLandingMentor = Object.assign(
  // Top-level PlasmicLandingMentor renders the root element
  makeNodeComponent("body"),
  {
    // Helper components rendering sub-elements
    wrapper: makeNodeComponent("wrapper"),
    hero: makeNodeComponent("hero"),
    siteHeader3: makeNodeComponent("siteHeader3"),
    buttonButton5: makeNodeComponent("buttonButton5"),
    interactionEffect6: makeNodeComponent("interactionEffect6"),
    value: makeNodeComponent("value"),
    titre: makeNodeComponent("titre"),
    h4: makeNodeComponent("h4"),
    boutons2: makeNodeComponent("boutons2"),
    primary: makeNodeComponent("primary"),
    primary2: makeNodeComponent("primary2"),
    old: makeNodeComponent("old"),
    blur2: makeNodeComponent("blur2"),
    valueProposition: makeNodeComponent("valueProposition"),
    buttons2: makeNodeComponent("buttons2"),
    problemes: makeNodeComponent("problemes"),
    parcours: makeNodeComponent("parcours"),
    solutions: makeNodeComponent("solutions"),
    besoinOld: makeNodeComponent("besoinOld"),
    blur: makeNodeComponent("blur"),
    _3Etapes: makeNodeComponent("_3Etapes"),
    old2: makeNodeComponent("old2"),
    testimonials: makeNodeComponent("testimonials"),
    titre4: makeNodeComponent("titre4"),
    testimonial: makeNodeComponent("testimonial"),
    callToAction2: makeNodeComponent("callToAction2"),
    buttonButton7: makeNodeComponent("buttonButton7"),
    callToAction1: makeNodeComponent("callToAction1"),
    buttonButton4: makeNodeComponent("buttonButton4"),
    faq: makeNodeComponent("faq"),
    titre7: makeNodeComponent("titre7"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicLandingMentor
    internalVariantProps: PlasmicLandingMentor__VariantProps,
    internalArgProps: PlasmicLandingMentor__ArgProps,

    // Page metadata
    pageMetadata: {
      title:
        "Netir - Les meilleurs freelances et mentors pour votre entreprise",
      description:
        "Netir est la plateforme qui vous garantie la qualité des freelance grâce aux recommandations des mentors.",
      ogImageSrc:
        "https://site-assets.plasmic.app/9f3005b94278521a011c47609ecbb96a.png",
      canonical: "https://www.netir.fr/entreprise"
    }
  }
);

export default PlasmicLandingMentor;
/* prettier-ignore-end */
