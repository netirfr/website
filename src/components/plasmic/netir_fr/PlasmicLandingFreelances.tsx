/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: nc5s0GMCuACv

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SiteHeader from "../../SiteHeader"; // plasmic-import: Vg4NgSIGKm96/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: byb1-I0x_v8X/component
import Avantages from "../../Avantages"; // plasmic-import: I1cyDttPCrVx/component
import HomepageInteret from "../../HomepageInteret"; // plasmic-import: JbGOPxR5Ca_f/component
import Probleme from "../../Probleme"; // plasmic-import: UVDtGkgycWzF/component
import Parcours from "../../Parcours"; // plasmic-import: 4kw4zRyWcW3Y/component
import Testimonial from "../../Testimonial"; // plasmic-import: dCyluW4eRMLq/component
import FreelanceStarterPackImage from "../../FreelanceStarterPackImage"; // plasmic-import: h_YoDDWaO8L3/component
import Faq from "../../Faq"; // plasmic-import: wBbJjw0EbsaX/component
import Service from "../../Service"; // plasmic-import: MQ3erQnwY6K8/component
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import FreelanceCartesFreelance from "../../FreelanceCartesFreelance"; // plasmic-import: IrYgS-V1Gdk4/component
import HomepageEtapes from "../../HomepageEtapes"; // plasmic-import: 4L80KNrOoiaf/component
import Footer from "../../Footer"; // plasmic-import: lPSQkcOmsQQw/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicLandingFreelances.module.css"; // plasmic-import: nc5s0GMCuACv/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: 99U4uMxg1jkf/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: FEzuhm3U7mDW/icon
import CreateSvgrepoComSvgIcon from "./icons/PlasmicIcon__CreateSvgrepoComSvg"; // plasmic-import: 4TATrQV7zOOA/icon
import AccountingSvgrepoComSvgIcon from "./icons/PlasmicIcon__AccountingSvgrepoComSvg"; // plasmic-import: lxTAklgpKYAV/icon
import InvoiceSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__InvoiceSvgrepoCom1Svg"; // plasmic-import: j2xyP3jkb1d6/icon
import SupportSvgrepoComSvgIcon from "./icons/PlasmicIcon__SupportSvgrepoComSvg"; // plasmic-import: -zTbrSpEi0oM/icon
import HealthSvgrepoComSvgIcon from "./icons/PlasmicIcon__HealthSvgrepoComSvg"; // plasmic-import: H-kGvVs8IKBX/icon
import MoneyBagSvgrepoComSvgIcon from "./icons/PlasmicIcon__MoneyBagSvgrepoComSvg"; // plasmic-import: M2CYC4qTbvmP/icon
import PersonMaleSvgrepoComSvgIcon from "./icons/PlasmicIcon__PersonMaleSvgrepoComSvg"; // plasmic-import: hIC6UnWyg_RL/icon
import DocumentBusinessPaperFilePaperworkJob3SvgrepoComSvgIcon from "./icons/PlasmicIcon__DocumentBusinessPaperFilePaperworkJob3SvgrepoComSvg"; // plasmic-import: AVSdrZ64m6Gi/icon
import BlockProhibitedSvgrepoComSvgIcon from "./icons/PlasmicIcon__BlockProhibitedSvgrepoComSvg"; // plasmic-import: yAkplFFA8kvi/icon
import IncomesSvgrepoComSvgIcon from "./icons/PlasmicIcon__IncomesSvgrepoComSvg"; // plasmic-import: SdAL309WbWPH/icon
import SkillsSvgrepoComSvgIcon from "./icons/PlasmicIcon__SkillsSvgrepoComSvg"; // plasmic-import: GCGZZhm_Xq4C/icon
import MeditationSvgrepoComSvgIcon from "./icons/PlasmicIcon__MeditationSvgrepoComSvg"; // plasmic-import: PZVgFE1QYVPm/icon
import AddFriendSvgrepoComSvgIcon from "./icons/PlasmicIcon__AddFriendSvgrepoComSvg"; // plasmic-import: ruochHHQvOC3/icon
import NIcons2Icon from "./icons/PlasmicIcon__NIcons2"; // plasmic-import: _EC8PI1hBKVF/icon
import freelance15PngS2KjoXwmedVt from "./images/freelance15Png.png"; // plasmic-import: S2KjoXWMEDVt/picture
import image272ZkKWo6MEt3L from "./images/image27.svg"; // plasmic-import: 2ZkKWo6MEt3l/picture
import chevre2RemovebgPreviewPngO75IhK4K4VeR from "./images/chevre2RemovebgPreviewPng.png"; // plasmic-import: O75IhK4K4VeR/picture
import geminiGeneratedImageJ00L65J00L65J00L1PngBQcKg4PcBayL from "./images/geminiGeneratedImageJ00L65J00L65J00L1Png.png"; // plasmic-import: BQcKG4pcBayL/picture
import geminiGeneratedImageCzm7K9Czm7K9Czm71PngLi0FNu1C8GLt from "./images/geminiGeneratedImageCzm7K9Czm7K9Czm71Png.png"; // plasmic-import: li0fNu1c8GLt/picture
import geminiGeneratedImageJ00L65J00L65J00LPngTgU1Nzq47Htm from "./images/geminiGeneratedImageJ00L65J00L65J00LPng.png"; // plasmic-import: TgU1Nzq47HTM/picture
import freelance6RemovebgPreviewPngKYdF9Sw41KmK from "./images/freelance6RemovebgPreviewPng.png"; // plasmic-import: KYdF9Sw41KmK/picture
import geminiGeneratedImage8R11Yk8R11Yk8R11RemovebgPreviewPngBZ8T737YaQxk from "./images/geminiGeneratedImage8R11Yk8R11Yk8R11RemovebgPreviewPng.png"; // plasmic-import: bZ8t737YaQXK/picture
import freelance7PngNqyCraNVflnp from "./images/freelance7Png.png"; // plasmic-import: nqyCraNVflnp/picture
import freelance6PngDcMe7NlczKez from "./images/freelance6Png.png"; // plasmic-import: dcME7nlczKez/picture
import freelance8PngDkReKvEsEuvn from "./images/freelance8Png.png"; // plasmic-import: DkReKVEsEuvn/picture
import freelance3PngXm3EngEhCrfg from "./images/freelance3Png.png"; // plasmic-import: Xm3ENGEhCRFG/picture
import headhunting17929492PngUTyjj2WD5Bmm from "./images/headhunting17929492Png.png"; // plasmic-import: uTYJJ2wD5Bmm/picture
import performance18218222PngZFTcrpQc3X from "./images/performance18218222Png.png"; // plasmic-import: z-fTcrpQC3-x/picture
import paper18856909PngG0081EOcWk4P from "./images/paper18856909Png.png"; // plasmic-import: g0081eOcWk4P/picture
import roi15101196PngSvQvFvAzOr from "./images/roi15101196Png.png"; // plasmic-import: SVQvFvAZ-OR-/picture
import freelance4PngJhwESfl1N7Yn from "./images/freelance4Png.png"; // plasmic-import: JhwESfl1n7YN/picture
import logoTextBlackColorBgWhite1500PngBSyZCbzPXsht from "./images/logoTextBlackColorBgWhite1500Png.png"; // plasmic-import: BSyZCbzPXsht/picture

createPlasmicElementProxy;

export type PlasmicLandingFreelances__VariantMembers = {};
export type PlasmicLandingFreelances__VariantsArgs = {};
type VariantPropType = keyof PlasmicLandingFreelances__VariantsArgs;
export const PlasmicLandingFreelances__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLandingFreelances__ArgsType = {};
type ArgPropType = keyof PlasmicLandingFreelances__ArgsType;
export const PlasmicLandingFreelances__ArgProps = new Array<ArgPropType>();

export type PlasmicLandingFreelances__OverridesType = {
  body?: Flex__<"div">;
  wrapper?: Flex__<"div">;
  hero?: Flex__<"div">;
  siteHeader?: Flex__<typeof SiteHeader>;
  buttonButton7?: Flex__<typeof ButtonPrimary>;
  interactionEffect10?: Flex__<"div">;
  value2?: Flex__<"div">;
  titre3?: Flex__<"div">;
  h1?: Flex__<"h1">;
  boutons4?: Flex__<"div">;
  primary5?: Flex__<typeof ButtonPrimary>;
  primary6?: Flex__<typeof ButtonPrimary>;
  besoin?: Flex__<"section">;
  homepageInteret?: Flex__<typeof HomepageInteret>;
  problemes?: Flex__<"section">;
  parcours?: Flex__<"section">;
  solutions?: Flex__<"section">;
  testimonials?: Flex__<"div">;
  titre4?: Flex__<"div">;
  testimonial?: Flex__<"div">;
  wemind?: Flex__<"section">;
  h3?: Flex__<"h3">;
  freelanceStarterPackImage?: Flex__<typeof FreelanceStarterPackImage>;
  primary?: Flex__<typeof ButtonPrimary>;
  callToAction1?: Flex__<"div">;
  buttonButton5?: Flex__<typeof ButtonPrimary>;
  interactionEffect?: Flex__<"div">;
  faq?: Flex__<"div">;
  titre7?: Flex__<"div">;
  services?: Flex__<"div">;
  service1?: Flex__<typeof Service>;
  service2?: Flex__<typeof Service>;
  service3?: Flex__<typeof Service>;
  service4?: Flex__<typeof Service>;
  old?: Flex__<"div">;
  popover5?: Flex__<typeof AntdPopover>;
  popover6?: Flex__<typeof AntdPopover>;
  popover7?: Flex__<typeof AntdPopover>;
  popover8?: Flex__<typeof AntdPopover>;
  etapes?: Flex__<"section">;
  illu?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultLandingFreelancesProps {
  className?: string;
}

const $$ = {};

export function Head() {
  return (
    <>
      <meta name="twitter:card" content="summary_large_image" />
      <title key="title">{PlasmicLandingFreelances.pageMetadata.title}</title>
      <meta
        key="og:title"
        property="og:title"
        content={PlasmicLandingFreelances.pageMetadata.title}
      />
      <meta
        key="twitter:title"
        name="twitter:title"
        content={PlasmicLandingFreelances.pageMetadata.title}
      />
      <meta
        key="description"
        name="description"
        content={PlasmicLandingFreelances.pageMetadata.description}
      />
      <meta
        key="og:description"
        property="og:description"
        content={PlasmicLandingFreelances.pageMetadata.description}
      />
      <meta
        key="twitter:description"
        name="twitter:description"
        content={PlasmicLandingFreelances.pageMetadata.description}
      />
      <meta
        key="og:image"
        property="og:image"
        content={PlasmicLandingFreelances.pageMetadata.ogImageSrc}
      />
      <meta
        key="twitter:image"
        name="twitter:image"
        content={PlasmicLandingFreelances.pageMetadata.ogImageSrc}
      />
      <link
        rel="canonical"
        href={PlasmicLandingFreelances.pageMetadata.canonical}
      />
    </>
  );
}

function PlasmicLandingFreelances__RenderFunc(props: {
  variants: PlasmicLandingFreelances__VariantsArgs;
  args: PlasmicLandingFreelances__ArgsType;
  overrides: PlasmicLandingFreelances__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "popover5.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "popover6.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "popover7.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "popover8.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonButton5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "buttonNoirModifier2"
      },
      {
        path: "buttonButton5.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "soft"
      },
      {
        path: "siteHeader.isNavopen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonButton7.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonButton7.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "primary5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "primary5.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "primary6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "primary6.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "soft"
      },
      {
        path: "primary.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "primary.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"body"}
          data-plasmic-override={overrides.body}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.body
          )}
        >
          <div
            data-plasmic-name={"wrapper"}
            data-plasmic-override={overrides.wrapper}
            className={classNames(projectcss.all, sty.wrapper)}
          >
            <div
              data-plasmic-name={"hero"}
              data-plasmic-override={overrides.hero}
              className={classNames(projectcss.all, sty.hero)}
            >
              <SiteHeader
                data-plasmic-name={"siteHeader"}
                data-plasmic-override={overrides.siteHeader}
                className={classNames("__wab_instance", sty.siteHeader)}
                isNavopen={generateStateValueProp($state, [
                  "siteHeader",
                  "isNavopen"
                ])}
                onIsNavopenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "siteHeader",
                    "isNavopen"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <ButtonPrimary
                  data-plasmic-name={"buttonButton7"}
                  data-plasmic-override={overrides.buttonButton7}
                  className={classNames("__wab_instance", sty.buttonButton7)}
                  color={generateStateValueProp($state, [
                    "buttonButton7",
                    "color"
                  ])}
                  destination={""}
                  disabled={false}
                  interactionEffect2={
                    <div
                      data-plasmic-name={"interactionEffect10"}
                      data-plasmic-override={overrides.interactionEffect10}
                      className={classNames(
                        projectcss.all,
                        sty.interactionEffect10
                      )}
                    />
                  }
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0Xg7K
                      )}
                    >
                      {"Inscription"}
                    </div>
                  }
                  linkTo={"netir.fr/sign-up"}
                  onColorChange2={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "buttonButton7",
                      "color"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onTypeChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "buttonButton7",
                      "type"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  type={generateStateValueProp($state, [
                    "buttonButton7",
                    "type"
                  ])}
                />
              </SiteHeader>
              <div className={classNames(projectcss.all, sty.freeBox__iGtEy)}>
                <div
                  data-plasmic-name={"value2"}
                  data-plasmic-override={overrides.value2}
                  className={classNames(projectcss.all, sty.value2)}
                >
                  <div
                    data-plasmic-name={"titre3"}
                    data-plasmic-override={overrides.titre3}
                    className={classNames(projectcss.all, sty.titre3)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "var(--token-a7EGbo9QyMt7)" }}
                        >
                          {
                            "Freelance : arr\u00eate de te faire plumer et d\u00e9veloppe ton business pour de vrai."
                          }
                        </span>
                      </React.Fragment>
                    </h1>
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__aPtt
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "Faites confiance \u00e0 nos mentors, ils sauront vous proposer nos meilleurs freelances."
                        : "Netir t'offre des missions rentables, un mentor \npour te d\u00e9passer et une communaut\u00e9 qui te soutient. \nFinie la solitude et les commissions exorbitantes."}
                    </h4>
                    <div
                      data-plasmic-name={"boutons4"}
                      data-plasmic-override={overrides.boutons4}
                      className={classNames(projectcss.all, sty.boutons4)}
                    >
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__ffM6D
                        )}
                        component={Link}
                        href={"netir.fr/sign-up"}
                        platform={"gatsby"}
                      >
                        <ButtonPrimary
                          data-plasmic-name={"primary5"}
                          data-plasmic-override={overrides.primary5}
                          className={classNames("__wab_instance", sty.primary5)}
                          color={generateStateValueProp($state, [
                            "primary5",
                            "color"
                          ])}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__piuX1
                              )}
                            >
                              {"Rejoins l'aventure Netir !"}
                            </div>
                          }
                          onColorChange2={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "primary5",
                              "color"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onTypeChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "primary5",
                              "type"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          type={generateStateValueProp($state, [
                            "primary5",
                            "type"
                          ])}
                        />
                      </PlasmicLink__>
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link___7YSI
                        )}
                        component={Link}
                        href={"netir.fr/sign-up"}
                        platform={"gatsby"}
                      >
                        <ButtonPrimary
                          data-plasmic-name={"primary6"}
                          data-plasmic-override={overrides.primary6}
                          className={classNames("__wab_instance", sty.primary6)}
                          color={generateStateValueProp($state, [
                            "primary6",
                            "color"
                          ])}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kxQVb
                              )}
                            >
                              {"D\u00e9couvrir notre solution"}
                            </div>
                          }
                          linkTo={"#problemes"}
                          onColorChange2={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "primary6",
                              "color"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onTypeChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "primary6",
                              "type"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          type={generateStateValueProp($state, [
                            "primary6",
                            "type"
                          ])}
                        />
                      </PlasmicLink__>
                    </div>
                  </div>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ldmpe)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "auto"
                        : "600px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "100%"
                        : "none"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "auto"
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "40%"
                          : "37%"
                    }
                    loading={"lazy"}
                    src={{
                      src: freelance15PngS2KjoXwmedVt,
                      fullWidth: 1608,
                      fullHeight: 1656,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </div>
            <section
              data-plasmic-name={"besoin"}
              data-plasmic-override={overrides.besoin}
              className={classNames(projectcss.all, sty.besoin)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2___2RtW2
                )}
              >
                {"Lib\u00e8re toi des contraintes"}
              </h2>
              <div className={classNames(projectcss.all, sty.freeBox__e65Ep)}>
                <Avantages
                  avantage={"Aide \u00e0 la cr\u00e9ation du statut"}
                  className={classNames("__wab_instance", sty.avantages__duThS)}
                  icon={undefined}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["mobile"]
                      : undefined
                  }
                >
                  <CreateSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__giJt8)}
                    role={"img"}
                  />
                </Avantages>
                <Avantages
                  avantage={"Experts-comptables \u00e0 disposition"}
                  className={classNames("__wab_instance", sty.avantages__h0NcO)}
                  icon={undefined}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["mobile"]
                      : undefined
                  }
                >
                  <AccountingSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg___4SVpP)}
                    role={"img"}
                  />
                </Avantages>
                <Avantages
                  avantage={"Outil de facturation inclus"}
                  className={classNames("__wab_instance", sty.avantages__doMlx)}
                  icon={undefined}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["mobile"]
                      : undefined
                  }
                >
                  <InvoiceSvgrepoCom1SvgIcon
                    className={classNames(projectcss.all, sty.svg__tbIRb)}
                    role={"img"}
                  />
                </Avantages>
                <Avantages
                  avantage={"Accompagnement humain"}
                  className={classNames(
                    "__wab_instance",
                    sty.avantages___0Ebey
                  )}
                  icon={undefined}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["mobile"]
                      : undefined
                  }
                >
                  <SupportSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__jqDc2)}
                    role={"img"}
                  />
                </Avantages>
                <Avantages
                  avantage={"Mutuelle et pr\u00e9voyance"}
                  className={classNames("__wab_instance", sty.avantages__dlAqY)}
                  icon={undefined}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["mobile"]
                      : undefined
                  }
                >
                  <HealthSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__fUyl5)}
                    role={"img"}
                  />
                </Avantages>
              </div>
              <HomepageInteret
                data-plasmic-name={"homepageInteret"}
                data-plasmic-override={overrides.homepageInteret}
                className={classNames("__wab_instance", sty.homepageInteret)}
                img={{
                  src: image272ZkKWo6MEt3L,
                  fullWidth: 542,
                  fullHeight: 635,
                  aspectRatio: 0.853543
                }}
                objectif={
                  "Cr\u00e9er ta bo\u00eete te stresse ? Netir s\u2019occupe du stress. Toi, tu te lances."
                }
                qui={"Freelance"}
                quoi1={
                  "Lancement simplifi\u00e9, on t\u2019aide \u00e0 cr\u00e9er ton statut pas \u00e0 pas"
                }
                quoi2={
                  " Comptabilit\u00e9 prise en charge nos experts-comptables s\u2019occupent de tout"
                }
                quoi3={
                  "Accompagnement humain, de vrais pros disponibles pour te guider"
                }
              />
            </section>
            <section
              data-plasmic-name={"problemes"}
              data-plasmic-override={overrides.problemes}
              className={classNames(projectcss.all, sty.problemes)}
              id={"problemes"}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__h0P6
                )}
              >
                {"Tu te reconnais ? On a la solution."}
              </h2>
              <div className={classNames(projectcss.all, sty.freeBox__ppr8D)}>
                <Probleme
                  className={classNames("__wab_instance", sty.probleme__cbEl)}
                  description={
                    "Les plateformes prennent une part d\u00e9mesur\u00e9e de ton travail. Netir ne garde que 3% de tes gains."
                  }
                >
                  <MoneyBagSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__kWRz8)}
                    role={"img"}
                  />
                </Probleme>
                <Probleme
                  citation={'"Je stagne et je me sens seul(e)."'}
                  className={classNames("__wab_instance", sty.probleme__eLiYx)}
                  description={
                    "L'isolement du freelance freine ta progression. Avec ton Mentor d\u00e9di\u00e9 et la communaut\u00e9, tu es accompagn\u00e9 et en constante \u00e9volution."
                  }
                  titre={"La solitude et le plafonnement"}
                >
                  <PersonMaleSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__wtvnn)}
                    role={"img"}
                  />
                </Probleme>
                <Probleme
                  citation={
                    '"Je perds mon temps dans l\'admin et les relances."'
                  }
                  className={classNames("__wab_instance", sty.probleme__eGbxf)}
                  description={
                    "Devis, factures, juridique... Netir simplifie ta vie administrative et t'aide \u00e0 te concentrer sur l'essentiel : tes missions."
                  }
                  titre={"La paperasse et l'incertitude"}
                >
                  <DocumentBusinessPaperFilePaperworkJob3SvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__p1Chz)}
                    role={"img"}
                  />
                </Probleme>
                <Probleme
                  citation={
                    '"Les missions \u00e0 bas prix s\'encha\u00eenent, la qualit\u00e9 manque."'
                  }
                  className={classNames("__wab_instance", sty.probleme__b0T1D)}
                  description={
                    "Fini les propositions ind\u00e9centes. Netir te connecte avec des entreprises exigeantes, pr\u00eates \u00e0 valoriser ton expertise."
                  }
                  titre={"Trouver des missions de qualit\u00e9"}
                >
                  <BlockProhibitedSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__uhXDc)}
                    role={"img"}
                  />
                </Probleme>
              </div>
            </section>
            <section
              data-plasmic-name={"parcours"}
              data-plasmic-override={overrides.parcours}
              className={classNames(projectcss.all, sty.parcours)}
              id={"parcours"}
            >
              <div className={classNames(projectcss.all, sty.freeBox___2GN02)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2___3OsXg
                  )}
                >
                  {"Ton parcours vers la libert\u00e9 et la croissance."}
                </h2>
                <div className={classNames(projectcss.all, sty.freeBox__zGiGl)}>
                  <Parcours
                    className={classNames("__wab_instance", sty.parcours__iHWa)}
                    titre={`Crée ton profil 
GOAT`}
                  />

                  <Parcours
                    className={classNames(
                      "__wab_instance",
                      sty.parcours__mdwmZ
                    )}
                    description={
                      "Un Mentor expert est assign\u00e9 pour t'accompagner. D\u00e9finissez ensemble tes objectifs, tes d\u00e9fis et tes axes de progression (masterclass, pair-programming)"
                    }
                    etape={"2"}
                    titre={`Connecte avec 
ton mentor`}
                  />

                  <Parcours
                    className={classNames(
                      "__wab_instance",
                      sty.parcours___6Rein
                    )}
                    description={
                      "Explore des missions qualifi\u00e9es, propos\u00e9es par des entreprises valid\u00e9es. Postule, d\u00e9croche le contrat et concentre-toi sur la r\u00e9alisation."
                    }
                    etape={"3"}
                    titre={
                      "Acc\u00e8de \u00e0 des missions r\u00e9mun\u00e9ratrices"
                    }
                  />

                  <Parcours
                    className={classNames(
                      "__wab_instance",
                      sty.parcours__hxi9K
                    )}
                    description={
                      "Ton Mentor t'aide \u00e0 monter en comp\u00e9tence. Une partie des gains est r\u00e9investie dans des projets \u00e0 impact, pour une \u00e9conomie plus responsable."
                    }
                    etape={"4"}
                    titre={"D\u00e9veloppe-toi et impulsons l'impact"}
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__sTtFw)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__zlBl9)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "200px"
                      : "250px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "150px"
                      : hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "200px"
                        : "250px"
                  }
                  loading={"lazy"}
                  src={{
                    src: chevre2RemovebgPreviewPngO75IhK4K4VeR,
                    fullWidth: 427,
                    fullHeight: 585,
                    aspectRatio: undefined
                  }}
                />

                <h4
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.h4__eKTbq
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 900 }}
                    >
                      {"B\u00e9\u00e9\u00e9\u00e9\u00e9\u00e9"}
                    </span>
                  </React.Fragment>
                </h4>
              </div>
            </section>
            <section
              data-plasmic-name={"solutions"}
              data-plasmic-override={overrides.solutions}
              className={classNames(projectcss.all, sty.solutions)}
              id={"solutions"}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__hnyoD
                )}
              >
                {
                  "Plus qu'une plateforme, \nun v\u00e9ritable acc\u00e9l\u00e9rateur pour ton activit\u00e9."
                }
              </h2>
              <div className={classNames(projectcss.all, sty.freeBox__w6D0)}>
                <Probleme
                  citation={``}
                  className={classNames("__wab_instance", sty.probleme__lqzKm)}
                  description={
                    "Garde un maximum de tes revenus : fini les 10-20% de commissions plateforme ! Tes comp\u00e9tences sont enfin justement valoris\u00e9es."
                  }
                  titre={"Plus de r\u00e9mun\u00e9ration"}
                >
                  <IncomesSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg___6Cs)}
                    role={"img"}
                  />
                </Probleme>
                <Probleme
                  citation={``}
                  className={classNames("__wab_instance", sty.probleme__i3My5)}
                  description={
                    "Un Mentor d\u00e9di\u00e9 pour t'accompagner, des masterclass, du pair-programming. \u00c9volue plus vite, gagne en assurance."
                  }
                  titre={"Plus de Comp\u00e9tences"}
                >
                  <SkillsSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__avyws)}
                    role={"img"}
                  />
                </Probleme>
                <Probleme
                  citation={``}
                  className={classNames("__wab_instance", sty.probleme___55STr)}
                  description={
                    "On g\u00e8re (en partie) ton administratif. Concentre-toi sur tes missions, pas sur la paperasse. Z\u00e9ro stress, plus de temps libre."
                  }
                  titre={"Plus de s\u00e9r\u00e9nit\u00e9"}
                >
                  <MeditationSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__h0QlW)}
                    role={"img"}
                  />
                </Probleme>
                <Probleme
                  citation={``}
                  className={classNames("__wab_instance", sty.probleme___1XBnJ)}
                  description={
                    "Acc\u00e8de \u00e0 une communaut\u00e9 d'experts. Partage, apprends, et participe \u00e0 des projets qui ont du sens."
                  }
                  titre={"Plus de r\u00e9seau et de solidarit\u00e9"}
                >
                  <AddFriendSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg___81Y8J)}
                    role={"img"}
                  />
                </Probleme>
              </div>
            </section>
            <div
              data-plasmic-name={"testimonials"}
              data-plasmic-override={overrides.testimonials}
              className={classNames(projectcss.all, sty.testimonials)}
            >
              <div
                data-plasmic-name={"titre4"}
                data-plasmic-override={overrides.titre4}
                className={classNames(projectcss.all, sty.titre4)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__hOd0K
                  )}
                >
                  {
                    "Ils ont d\u00e9j\u00e0 boost\u00e9 leur activit\u00e9 avec Netir."
                  }
                </h2>
              </div>
              <div
                data-plasmic-name={"testimonial"}
                data-plasmic-override={overrides.testimonial}
                className={classNames(projectcss.all, sty.testimonial)}
              >
                <Testimonial
                  className={classNames(
                    "__wab_instance",
                    sty.testimonial__hidtO
                  )}
                  img={{
                    src: geminiGeneratedImageJ00L65J00L65J00L1PngBQcKg4PcBayL,
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["unnamedVariant"]
                      : undefined
                  }
                  name={"Julien L."}
                  review={
                    "Mon TJM a explos\u00e9 et j'ai arr\u00eat\u00e9 de me sentir seul gr\u00e2ce \u00e0 mon mentor. Netir, c'est le game changer !"
                  }
                  starColor={"green"}
                  starCount={5}
                />

                <Testimonial
                  className={classNames(
                    "__wab_instance",
                    sty.testimonial__tB8D
                  )}
                  img={{
                    src: geminiGeneratedImageCzm7K9Czm7K9Czm71PngLi0FNu1C8GLt,
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["unnamedVariant"]
                      : undefined
                  }
                  name={"Marie B."}
                  review={
                    "J'ai enfin trouv\u00e9 des missions qui me challengent vraiment et des clients qui valorisent mon travail. Et la paperasse, c'est de l'histoire ancienne !"
                  }
                  starCount={5}
                />

                <Testimonial
                  className={classNames(
                    "__wab_instance",
                    sty.testimonial__qzBat
                  )}
                  img={{
                    src: geminiGeneratedImageJ00L65J00L65J00LPngTgU1Nzq47Htm,
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["unnamedVariant"]
                      : undefined
                  }
                  name={"Fran\u00e7ois R."}
                  review={
                    "Netir, c'est la confiance retrouv\u00e9e. Mon mentor m'a pouss\u00e9 \u00e0 me d\u00e9passer, et savoir qu'une partie de mes gains finance des projets \u00e0 impact, c'est ma plus grande fiert\u00e9. Je suis acteur, pas juste un ex\u00e9cutant."
                  }
                  starColor={"blue"}
                  starCount={5}
                />
              </div>
            </div>
            <section
              data-plasmic-name={"wemind"}
              data-plasmic-override={overrides.wemind}
              className={classNames(projectcss.all, sty.wemind)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___2KBJl)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__hbzet
                  )}
                >
                  {
                    "Netir & Wemind : Votre S\u00e9r\u00e9nit\u00e9, Notre Priorit\u00e9"
                  }
                </h2>
                <h3
                  data-plasmic-name={"h3"}
                  data-plasmic-override={overrides.h3}
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3
                  )}
                >
                  {
                    "Ensemble, simplifions votre protection sociale pour que vous puissiez vous concentrer sur l'essentiel."
                  }
                </h3>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__xRRj7)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___30Frr)}
                >
                  <FreelanceStarterPackImage
                    data-plasmic-name={"freelanceStarterPackImage"}
                    data-plasmic-override={overrides.freelanceStarterPackImage}
                    className={classNames(
                      "__wab_instance",
                      sty.freelanceStarterPackImage
                    )}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__l7Czs)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__b2ECh
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {
                            "PARTENARIAT Netir et Wemind pour protection sant\u00e9."
                          }
                        </span>
                        <React.Fragment>
                          {
                            " Mutuelle, pr\u00e9voyance, retraite... ne t'en soucie plus."
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aVjM
                      )}
                    >
                      {
                        "Gr\u00e2ce \u00e0 notre partenariat avec Wemind, sp\u00e9cialiste de l'accompagnement des ind\u00e9pendants, tu as acc\u00e8s \u00e0 des solutions compl\u00e8tes et adapt\u00e9es \u00e0 ton statut."
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dNXcq
                      )}
                    >
                      {
                        "Netir + Wemind = 100% s\u00e9r\u00e9nit\u00e9 pour ton aventure."
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ulz4U
                      )}
                    >
                      {
                        "Concentre-toi sur tes missions, nous veillons sur ta s\u00e9curit\u00e9 financi\u00e8re et ta sant\u00e9, en toute simplicit\u00e9."
                      }
                    </div>
                  </div>
                </div>
                <ButtonPrimary
                  data-plasmic-name={"primary"}
                  data-plasmic-override={overrides.primary}
                  className={classNames("__wab_instance", sty.primary)}
                  color={generateStateValueProp($state, ["primary", "color"])}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__z2Ea7
                      )}
                    >
                      {"En savoir plus"}
                    </div>
                  }
                  linkTo={"https://care.wemind.io/partenaire/netir"}
                  onColorChange2={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "primary",
                      "color"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onTypeChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "primary",
                      "type"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  openLinkInNewTab={true}
                  type={generateStateValueProp($state, ["primary", "type"])}
                />
              </div>
            </section>
            <div
              data-plasmic-name={"callToAction1"}
              data-plasmic-override={overrides.callToAction1}
              className={classNames(projectcss.all, sty.callToAction1)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__mgtj)}>
                <div className={classNames(projectcss.all, sty.freeBox___7V6N)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__ewnoK
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "tabletOnly")
                      ? "Pr\u00eat \u00e0 rejoindre l'\u00e9lite des freelances ?"
                      : "Pr\u00eat \u00e0 rejoindre l'\u00e9lite des freelances ?"}
                  </h2>
                  <ButtonPrimary
                    data-plasmic-name={"buttonButton5"}
                    data-plasmic-override={overrides.buttonButton5}
                    className={classNames("__wab_instance", sty.buttonButton5)}
                    color={generateStateValueProp($state, [
                      "buttonButton5",
                      "color"
                    ])}
                    end={
                      <NIcons2Icon
                        className={classNames(projectcss.all, sty.svg__mposa)}
                        role={"img"}
                      />
                    }
                    interactionEffect2={
                      <div
                        data-plasmic-name={"interactionEffect"}
                        data-plasmic-override={overrides.interactionEffect}
                        className={classNames(
                          projectcss.all,
                          sty.interactionEffect
                        )}
                      />
                    }
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kAqjw
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Inscris-toi !"
                          : "Inscris-toi sur Netir et D\u00e9marre ta Croissance !"}
                      </div>
                    }
                    linkTo={"netir.fr/sign-up"}
                    onColorChange2={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "buttonButton5",
                        "color"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onTypeChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "buttonButton5",
                        "type"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    type={generateStateValueProp($state, [
                      "buttonButton5",
                      "type"
                    ])}
                  />
                </div>
              </div>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__nuPfE)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "150px"
                    : "320px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "200px"
                    : "430px"
                }
                loading={"lazy"}
                src={{
                  src: freelance6RemovebgPreviewPngKYdF9Sw41KmK,
                  fullWidth: 500,
                  fullHeight: 500,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div
              data-plasmic-name={"faq"}
              data-plasmic-override={overrides.faq}
              className={classNames(projectcss.all, sty.faq)}
            >
              <div
                data-plasmic-name={"titre7"}
                data-plasmic-override={overrides.titre7}
                className={classNames(projectcss.all, sty.titre7)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__xWUk)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__kxqri
                    )}
                  >
                    {
                      "Tes questions, nos r\u00e9ponses : Tout sur Netir pour les Freelances."
                    }
                  </h2>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__h5C69)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__agI4O)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__okKxB)}
                    >
                      <Faq
                        answer={
                          "C'est notre force ! Netir applique seulement 3% de commission c\u00f4t\u00e9 entreprise. Cela signifie que tu per\u00e7ois 97% de tes gains (avant l'\u00e9ventuelle part mentor si tu en as un et de l'apporteur d'affaires s'il existe), ce qui est l'un des taux les plus bas du march\u00e9."
                        }
                        className={classNames("__wab_instance", sty.faq__iAiK)}
                        question={
                          "Quelle est la commission pr\u00e9lev\u00e9e par Netir sur mes missions ?"
                        }
                      />

                      <Faq
                        answer={
                          "Chaque freelance Netir est \u00e9ligible \u00e0 un mentorat personnalis\u00e9. Un mentor expert t'accompagne pour t'aider \u00e0 monter en comp\u00e9tence, r\u00e9soudre tes blocages et d\u00e9velopper ton activit\u00e9. Le mentorat est fortement recommand\u00e9 et fait partie int\u00e9grante de l'exp\u00e9rience Netir pour maximiser ta croissance."
                        }
                        className={classNames("__wab_instance", sty.faq__cqGd4)}
                        question={
                          "Comment fonctionne le mentorat et est-il obligatoire ?"
                        }
                      />

                      <Faq
                        answer={
                          "Nous proposons des missions qualifi\u00e9es, vari\u00e9es et stimulantes, principalement dans le digital et l'IT. Les entreprises sont rigoureusement s\u00e9lectionn\u00e9es pour garantir des projets \u00e0 forte valeur ajout\u00e9e, o\u00f9 ton expertise est reconnue et valoris\u00e9e."
                        }
                        className={classNames("__wab_instance", sty.faq__ceSaT)}
                        question={
                          "Quel type de missions puis-je trouver sur Netir ?"
                        }
                      />

                      <Faq
                        answer={
                          "Netir simplifie ta vie ! Nous nous occupons de la gestion des devis, de la facturation et des aspects contractuels avec l'entreprise. Tu te concentres sur ta mission, nous g\u00e9rons la paperasse pour que tu puisses te concentrer sur l'essentiel."
                        }
                        className={classNames("__wab_instance", sty.faq__amMbH)}
                        question={
                          "Comment Netir m'aide-t-il avec l'administratif ?"
                        }
                      />

                      <Faq
                        answer={
                          "Netir s\u00e9curise tes paiements. Une fois ta mission valid\u00e9e par l'entreprise, nous nous assurons que tu re\u00e7oives tes fonds dans les d\u00e9lais convenus. Notre syst\u00e8me est con\u00e7u pour te garantir une r\u00e9mun\u00e9ration rapide et fiable."
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.faq___9Mef3
                        )}
                        question={
                          "Comment suis-je s\u00fbr d'\u00eatre pay\u00e9 \u00e0 temps ?"
                        }
                      />

                      <Faq
                        answer={
                          "Oui ! Au-del\u00e0 du mentorat individuel, tu rejoins une communaut\u00e9 de freelances et de mentors partageant les m\u00eames valeurs. \u00c9changes, partages d'exp\u00e9riences, \u00e9v\u00e9nements... Finie la solitude de l'ind\u00e9pendant !"
                        }
                        className={classNames("__wab_instance", sty.faq__d50Ce)}
                        question={
                          "Y a-t-il une communaut\u00e9 de freelances sur Netir ?"
                        }
                      />

                      <Faq
                        answer={
                          "Chez Netir, vous payez uniquement \u00e0 la fin de la mission, soit mensuellement, soit au forfait selon vos besoins. La facturation est facilit\u00e9e et auto-g\u00e9n\u00e9r\u00e9e pour vous simplifier la vie et r\u00e9duire la charge administrative."
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.faq___4IFpr
                        )}
                        question={"Comment \u00e7a se passe pour le paiement ?"}
                      />
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__o8Wbc)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__vFfmF)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "100%"
                          : "auto"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "100%"
                          : "80%"
                      }
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "20px"
                          : hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "100%"
                            : "auto"
                      }
                      loading={"lazy"}
                      src={{
                        src: geminiGeneratedImage8R11Yk8R11Yk8R11RemovebgPreviewPngBZ8T737YaQxk,
                        fullWidth: 427,
                        fullHeight: 585,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"services"}
              data-plasmic-override={overrides.services}
              className={classNames(projectcss.all, sty.services)}
            >
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__tr2Oe
                )}
                component={Link}
                href={`/apporteur-affaires`}
                platform={"gatsby"}
              >
                <Service
                  data-plasmic-name={"service1"}
                  data-plasmic-override={overrides.service1}
                  className={classNames("__wab_instance", sty.service1)}
                  image={{
                    src: freelance7PngNqyCraNVflnp,
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                  titre={"Fais grandir ton activit\u00e9 sans perdre de temps"}
                />
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__k3FRy
                )}
                component={Link}
                href={`/mentor`}
                platform={"gatsby"}
              >
                <Service
                  data-plasmic-name={"service2"}
                  data-plasmic-override={overrides.service2}
                  aide1={"Coaching pour monter en comp\u00e9tences techniques"}
                  aide2={"Conseils pour am\u00e9liorer ta communication client"}
                  aide3={"Aide \u00e0 structurer et valoriser ton offre"}
                  bouton={"Mentors"}
                  className={classNames("__wab_instance", sty.service2)}
                  image={{
                    src: freelance6PngDcMe7NlczKez,
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                  invers={"unnamedVariant"}
                  titre={"Gagne en confiance et en professionnalisme"}
                />
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__s3CuH
                )}
                component={Link}
                platform={"gatsby"}
              >
                <Service
                  data-plasmic-name={"service3"}
                  data-plasmic-override={overrides.service3}
                  aide1={
                    "Devis & factures centralis\u00e9s dans une interface claire"
                  }
                  aide2={"Conseils pour am\u00e9liorer ta communication client"}
                  aide3={"Aide \u00e0 structurer et valoriser ton offre"}
                  bouton={"Inscription"}
                  className={classNames("__wab_instance", sty.service3)}
                  image={{
                    src: freelance8PngDkReKvEsEuvn,
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                  titre={
                    "Concentre-toi sur ton m\u00e9tier, on s\u2019occupe du reste"
                  }
                />
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__x7Smy
                )}
                component={Link}
                platform={"gatsby"}
              >
                <Service
                  data-plasmic-name={"service4"}
                  data-plasmic-override={overrides.service4}
                  aide1={
                    "Programme intensif pour cr\u00e9er ton SaaS en 7 jours"
                  }
                  aide2={"Accompagnement sur-mesure"}
                  aide3={
                    "M\u00e9thodologie \u00e9prouv\u00e9e et retours d\u2019exp\u00e9rience"
                  }
                  bouton={"SaaS camp"}
                  className={classNames("__wab_instance", sty.service4)}
                  image={{
                    src: freelance3PngXm3EngEhCrfg,
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                  invers={"unnamedVariant"}
                  titre={
                    "Construis ton produit tech, m\u00eame sans \u00e9quipe"
                  }
                />
              </PlasmicLink__>
              <div
                data-plasmic-name={"old"}
                data-plasmic-override={overrides.old}
                className={classNames(projectcss.all, sty.old)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__wnYPf)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ajg6J)}
                  >
                    <AntdPopover
                      data-plasmic-name={"popover5"}
                      data-plasmic-override={overrides.popover5}
                      arrow={true}
                      className={classNames("__wab_instance", sty.popover5)}
                      content={null}
                      contentText={
                        "Fais grandir ton activit\u00e9 sans perdre de temps"
                      }
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        styleTokensClassNames
                      )}
                      mouseEnterDelay={0.2}
                      mouseLeaveDelay={0}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "popover5",
                          "open"
                        ]).apply(null, eventArgs);
                      }}
                      open={generateStateValueProp($state, [
                        "popover5",
                        "open"
                      ])}
                      popoverScopeClassName={sty["popover5__popover"]}
                      title={null}
                      trigger={"hover"}
                    >
                      <FreelanceCartesFreelance
                        className={classNames(
                          "__wab_instance",
                          sty.freelanceCartesFreelance__kSyEr
                        )}
                        icon={{
                          src: headhunting17929492PngUTyjj2WD5Bmm,
                          fullWidth: 512,
                          fullHeight: 512,
                          aspectRatio: undefined
                        }}
                        point1={
                          "Mise en relation avec des clients s\u00e9rieux"
                        }
                        point2={
                          "Acc\u00e8s \u00e0 des apporteurs d\u2019affaires motiv\u00e9s"
                        }
                        point3={"Opportunit\u00e9s solides et cibl\u00e9es"}
                        titre={"Pas s\u00fbr de trouver tes premiers clients ?"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nldMi
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["goToLandingApporteurDaffaire"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: `/apporteur-affaires`
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __gatsbyNavigate(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToLandingApporteurDaffaire"] != null &&
                              typeof $steps["goToLandingApporteurDaffaire"] ===
                                "object" &&
                              typeof $steps["goToLandingApporteurDaffaire"]
                                .then === "function"
                            ) {
                              $steps["goToLandingApporteurDaffaire"] =
                                await $steps["goToLandingApporteurDaffaire"];
                            }
                          }}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Apporteur d'affaire"}
                            </span>
                          </React.Fragment>
                        </div>
                      </FreelanceCartesFreelance>
                    </AntdPopover>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nOkb)}
                  >
                    <AntdPopover
                      data-plasmic-name={"popover6"}
                      data-plasmic-override={overrides.popover6}
                      arrow={true}
                      className={classNames("__wab_instance", sty.popover6)}
                      color={"#F7F3FC"}
                      content={null}
                      contentText={"Gagne en confiance et en professionnalisme"}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        styleTokensClassNames
                      )}
                      mouseEnterDelay={0.2}
                      mouseLeaveDelay={0}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "popover6",
                          "open"
                        ]).apply(null, eventArgs);
                      }}
                      open={generateStateValueProp($state, [
                        "popover6",
                        "open"
                      ])}
                      popoverScopeClassName={sty["popover6__popover"]}
                      title={null}
                    >
                      <FreelanceCartesFreelance
                        className={classNames(
                          "__wab_instance",
                          sty.freelanceCartesFreelance__d2Dih
                        )}
                        icon={{
                          src: performance18218222PngZFTcrpQc3X,
                          fullWidth: 512,
                          fullHeight: 512,
                          aspectRatio: undefined
                        }}
                        point1={
                          "Coaching pour monter en comp\u00e9tences techniques"
                        }
                        point2={
                          "Conseils pour am\u00e9liorer ta communication client"
                        }
                        point3={"Aide \u00e0 structurer et valoriser ton offre"}
                        titre={
                          "Tu doute de ton niveau Monte en comp\u00e9tence avec Netir !"
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__p4Z2D
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["goToLandingMentor"] = true
                              ? (() => {
                                  const actionArgs = { destination: `/mentor` };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __gatsbyNavigate(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToLandingMentor"] != null &&
                              typeof $steps["goToLandingMentor"] === "object" &&
                              typeof $steps["goToLandingMentor"].then ===
                                "function"
                            ) {
                              $steps["goToLandingMentor"] =
                                await $steps["goToLandingMentor"];
                            }
                          }}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Mentor"}
                            </span>
                          </React.Fragment>
                        </div>
                      </FreelanceCartesFreelance>
                    </AntdPopover>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___2QzFz)}
                  >
                    <AntdPopover
                      data-plasmic-name={"popover7"}
                      data-plasmic-override={overrides.popover7}
                      arrow={true}
                      className={classNames("__wab_instance", sty.popover7)}
                      color={"#F7F3FC"}
                      content={null}
                      contentText={
                        "Concentre-toi sur ton m\u00e9tier, on s\u2019occupe du reste"
                      }
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        styleTokensClassNames
                      )}
                      mouseEnterDelay={0.2}
                      mouseLeaveDelay={0}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "popover7",
                          "open"
                        ]).apply(null, eventArgs);
                      }}
                      open={generateStateValueProp($state, [
                        "popover7",
                        "open"
                      ])}
                      popoverScopeClassName={sty["popover7__popover"]}
                      title={null}
                    >
                      <FreelanceCartesFreelance
                        className={classNames(
                          "__wab_instance",
                          sty.freelanceCartesFreelance__kFmh6
                        )}
                        icon={{
                          src: paper18856909PngG0081EOcWk4P,
                          fullWidth: 512,
                          fullHeight: 512,
                          aspectRatio: undefined
                        }}
                        point1={
                          "Devis & factures centralis\u00e9s dans une interface claire"
                        }
                        point2={
                          "Relances automatiques en cas de retard de paiement"
                        }
                        point3={
                          "Z\u00e9ro charge mentale : Netir g\u00e8re pour toi"
                        }
                        titre={
                          "L\u2019administratif te p\u00e8se. Avec Netir bye bye la paperasse ! "
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__y2Db
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["goToInscription"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: `/sign-up`
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __gatsbyNavigate(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToInscription"] != null &&
                              typeof $steps["goToInscription"] === "object" &&
                              typeof $steps["goToInscription"].then ===
                                "function"
                            ) {
                              $steps["goToInscription"] =
                                await $steps["goToInscription"];
                            }
                          }}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Inscription"}
                            </span>
                          </React.Fragment>
                        </div>
                      </FreelanceCartesFreelance>
                    </AntdPopover>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__n6OtA)}
                  >
                    <AntdPopover
                      data-plasmic-name={"popover8"}
                      data-plasmic-override={overrides.popover8}
                      arrow={true}
                      className={classNames("__wab_instance", sty.popover8)}
                      color={"#F7F3FC"}
                      content={null}
                      contentText={
                        "Construis ton produit tech, m\u00eame sans \u00e9quipe"
                      }
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        styleTokensClassNames
                      )}
                      mouseEnterDelay={0.2}
                      mouseLeaveDelay={0}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "popover8",
                          "open"
                        ]).apply(null, eventArgs);
                      }}
                      open={generateStateValueProp($state, [
                        "popover8",
                        "open"
                      ])}
                      popoverScopeClassName={sty["popover8__popover"]}
                      title={null}
                    >
                      <FreelanceCartesFreelance
                        className={classNames(
                          "__wab_instance",
                          sty.freelanceCartesFreelance__npphk
                        )}
                        icon={{
                          src: roi15101196PngSvQvFvAzOr,
                          fullWidth: 512,
                          fullHeight: 512,
                          aspectRatio: undefined
                        }}
                        point1={
                          "Programme intensif pour cr\u00e9er ton SaaS en 7 jours"
                        }
                        point2={"Accompagnement sur-mesure"}
                        point3={
                          "M\u00e9thodologie \u00e9prouv\u00e9e et retours d\u2019exp\u00e9rience"
                        }
                        titre={
                          "Lance ton SaaS avec Netir et passe au revenu r\u00e9current."
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__snxMu
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["goToHttpsWwwSaasCamp"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: "https://www.saas.camp/"
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __gatsbyNavigate(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToHttpsWwwSaasCamp"] != null &&
                              typeof $steps["goToHttpsWwwSaasCamp"] ===
                                "object" &&
                              typeof $steps["goToHttpsWwwSaasCamp"].then ===
                                "function"
                            ) {
                              $steps["goToHttpsWwwSaasCamp"] =
                                await $steps["goToHttpsWwwSaasCamp"];
                            }
                          }}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Saas Camp"}
                            </span>
                          </React.Fragment>
                        </div>
                      </FreelanceCartesFreelance>
                    </AntdPopover>
                  </div>
                </div>
              </div>
            </div>
            <section
              data-plasmic-name={"etapes"}
              data-plasmic-override={overrides.etapes}
              className={classNames(projectcss.all, sty.etapes)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__oyBh)}>
                <div
                  data-plasmic-name={"illu"}
                  data-plasmic-override={overrides.illu}
                  className={classNames(projectcss.all, sty.illu)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__btZqL)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "228px"
                        : "400px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"600px"}
                    loading={"lazy"}
                    src={{
                      src: freelance4PngJhwESfl1N7Yn,
                      fullWidth: 1024,
                      fullHeight: 1024,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__mIuN)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__xNskO
                    )}
                  >
                    {
                      "Derri\u00e8re chaque freelance tranquille, il y a un Netir qui veille."
                    }
                  </h2>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__or7Ze)}
                  >
                    <HomepageEtapes
                      className={classNames(
                        "__wab_instance",
                        sty.homepageEtapes__vyXjq
                      )}
                      description={
                        "Avec Netir, finis les gal\u00e8res administratives : devis, factures, relances\u2026 tout est centralis\u00e9 pour te faire gagner du temps."
                      }
                      pageFreelance={true}
                      titre={"On ne fait pas de magie. Juste mieux."}
                    />

                    <HomepageEtapes
                      className={classNames(
                        "__wab_instance",
                        sty.homepageEtapes__gpbHt
                      )}
                      description={
                        "Une interface claire et intuitive qui te permet de piloter ton activit\u00e9 facilement, sans te perdre dans des menus compliqu\u00e9s."
                      }
                      pageFreelance={true}
                      titre={"Moins de paperasse, plus de contr\u00f4le."}
                    />

                    <HomepageEtapes
                      _3={["unnamedVariant"]}
                      className={classNames(
                        "__wab_instance",
                        sty.homepageEtapes__oHvhq
                      )}
                      description={
                        "Pas de chatbot, pas de blabla inutile. Juste une \u00e9quipe de vrais humains qui g\u00e8rent les coulisses pendant que tu brilles."
                      }
                      pageFreelance={true}
                      titre={"Le secret ? On bosse pour toi dans l\u2019ombre."}
                    />
                  </div>
                </div>
              </div>
            </section>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  body: [
    "body",
    "wrapper",
    "hero",
    "siteHeader",
    "buttonButton7",
    "interactionEffect10",
    "value2",
    "titre3",
    "h1",
    "boutons4",
    "primary5",
    "primary6",
    "besoin",
    "homepageInteret",
    "problemes",
    "parcours",
    "solutions",
    "testimonials",
    "titre4",
    "testimonial",
    "wemind",
    "h3",
    "freelanceStarterPackImage",
    "primary",
    "callToAction1",
    "buttonButton5",
    "interactionEffect",
    "faq",
    "titre7",
    "services",
    "service1",
    "service2",
    "service3",
    "service4",
    "old",
    "popover5",
    "popover6",
    "popover7",
    "popover8",
    "etapes",
    "illu",
    "footer"
  ],
  wrapper: [
    "wrapper",
    "hero",
    "siteHeader",
    "buttonButton7",
    "interactionEffect10",
    "value2",
    "titre3",
    "h1",
    "boutons4",
    "primary5",
    "primary6",
    "besoin",
    "homepageInteret",
    "problemes",
    "parcours",
    "solutions",
    "testimonials",
    "titre4",
    "testimonial",
    "wemind",
    "h3",
    "freelanceStarterPackImage",
    "primary",
    "callToAction1",
    "buttonButton5",
    "interactionEffect",
    "faq",
    "titre7",
    "services",
    "service1",
    "service2",
    "service3",
    "service4",
    "old",
    "popover5",
    "popover6",
    "popover7",
    "popover8",
    "etapes",
    "illu",
    "footer"
  ],
  hero: [
    "hero",
    "siteHeader",
    "buttonButton7",
    "interactionEffect10",
    "value2",
    "titre3",
    "h1",
    "boutons4",
    "primary5",
    "primary6"
  ],
  siteHeader: ["siteHeader", "buttonButton7", "interactionEffect10"],
  buttonButton7: ["buttonButton7", "interactionEffect10"],
  interactionEffect10: ["interactionEffect10"],
  value2: ["value2", "titre3", "h1", "boutons4", "primary5", "primary6"],
  titre3: ["titre3", "h1", "boutons4", "primary5", "primary6"],
  h1: ["h1"],
  boutons4: ["boutons4", "primary5", "primary6"],
  primary5: ["primary5"],
  primary6: ["primary6"],
  besoin: ["besoin", "homepageInteret"],
  homepageInteret: ["homepageInteret"],
  problemes: ["problemes"],
  parcours: ["parcours"],
  solutions: ["solutions"],
  testimonials: ["testimonials", "titre4", "testimonial"],
  titre4: ["titre4"],
  testimonial: ["testimonial"],
  wemind: ["wemind", "h3", "freelanceStarterPackImage", "primary"],
  h3: ["h3"],
  freelanceStarterPackImage: ["freelanceStarterPackImage"],
  primary: ["primary"],
  callToAction1: ["callToAction1", "buttonButton5", "interactionEffect"],
  buttonButton5: ["buttonButton5", "interactionEffect"],
  interactionEffect: ["interactionEffect"],
  faq: ["faq", "titre7"],
  titre7: ["titre7"],
  services: [
    "services",
    "service1",
    "service2",
    "service3",
    "service4",
    "old",
    "popover5",
    "popover6",
    "popover7",
    "popover8"
  ],
  service1: ["service1"],
  service2: ["service2"],
  service3: ["service3"],
  service4: ["service4"],
  old: ["old", "popover5", "popover6", "popover7", "popover8"],
  popover5: ["popover5"],
  popover6: ["popover6"],
  popover7: ["popover7"],
  popover8: ["popover8"],
  etapes: ["etapes", "illu"],
  illu: ["illu"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  body: "div";
  wrapper: "div";
  hero: "div";
  siteHeader: typeof SiteHeader;
  buttonButton7: typeof ButtonPrimary;
  interactionEffect10: "div";
  value2: "div";
  titre3: "div";
  h1: "h1";
  boutons4: "div";
  primary5: typeof ButtonPrimary;
  primary6: typeof ButtonPrimary;
  besoin: "section";
  homepageInteret: typeof HomepageInteret;
  problemes: "section";
  parcours: "section";
  solutions: "section";
  testimonials: "div";
  titre4: "div";
  testimonial: "div";
  wemind: "section";
  h3: "h3";
  freelanceStarterPackImage: typeof FreelanceStarterPackImage;
  primary: typeof ButtonPrimary;
  callToAction1: "div";
  buttonButton5: typeof ButtonPrimary;
  interactionEffect: "div";
  faq: "div";
  titre7: "div";
  services: "div";
  service1: typeof Service;
  service2: typeof Service;
  service3: typeof Service;
  service4: typeof Service;
  old: "div";
  popover5: typeof AntdPopover;
  popover6: typeof AntdPopover;
  popover7: typeof AntdPopover;
  popover8: typeof AntdPopover;
  etapes: "section";
  illu: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLandingFreelances__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLandingFreelances__VariantsArgs;
    args?: PlasmicLandingFreelances__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicLandingFreelances__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicLandingFreelances__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLandingFreelances__ArgProps,
          internalVariantPropNames: PlasmicLandingFreelances__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLandingFreelances__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "body") {
    func.displayName = "PlasmicLandingFreelances";
  } else {
    func.displayName = `PlasmicLandingFreelances.${nodeName}`;
  }
  return func;
}

export const PlasmicLandingFreelances = Object.assign(
  // Top-level PlasmicLandingFreelances renders the root element
  makeNodeComponent("body"),
  {
    // Helper components rendering sub-elements
    wrapper: makeNodeComponent("wrapper"),
    hero: makeNodeComponent("hero"),
    siteHeader: makeNodeComponent("siteHeader"),
    buttonButton7: makeNodeComponent("buttonButton7"),
    interactionEffect10: makeNodeComponent("interactionEffect10"),
    value2: makeNodeComponent("value2"),
    titre3: makeNodeComponent("titre3"),
    h1: makeNodeComponent("h1"),
    boutons4: makeNodeComponent("boutons4"),
    primary5: makeNodeComponent("primary5"),
    primary6: makeNodeComponent("primary6"),
    besoin: makeNodeComponent("besoin"),
    homepageInteret: makeNodeComponent("homepageInteret"),
    problemes: makeNodeComponent("problemes"),
    parcours: makeNodeComponent("parcours"),
    solutions: makeNodeComponent("solutions"),
    testimonials: makeNodeComponent("testimonials"),
    titre4: makeNodeComponent("titre4"),
    testimonial: makeNodeComponent("testimonial"),
    wemind: makeNodeComponent("wemind"),
    h3: makeNodeComponent("h3"),
    freelanceStarterPackImage: makeNodeComponent("freelanceStarterPackImage"),
    primary: makeNodeComponent("primary"),
    callToAction1: makeNodeComponent("callToAction1"),
    buttonButton5: makeNodeComponent("buttonButton5"),
    interactionEffect: makeNodeComponent("interactionEffect"),
    faq: makeNodeComponent("faq"),
    titre7: makeNodeComponent("titre7"),
    services: makeNodeComponent("services"),
    service1: makeNodeComponent("service1"),
    service2: makeNodeComponent("service2"),
    service3: makeNodeComponent("service3"),
    service4: makeNodeComponent("service4"),
    old: makeNodeComponent("old"),
    popover5: makeNodeComponent("popover5"),
    popover6: makeNodeComponent("popover6"),
    popover7: makeNodeComponent("popover7"),
    popover8: makeNodeComponent("popover8"),
    etapes: makeNodeComponent("etapes"),
    illu: makeNodeComponent("illu"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicLandingFreelances
    internalVariantProps: PlasmicLandingFreelances__VariantProps,
    internalArgProps: PlasmicLandingFreelances__ArgProps,

    // Page metadata
    pageMetadata: {
      title:
        "Netir - Les meilleurs freelances et mentors pour votre entreprise",
      description:
        "Netir est la plateforme qui vous garantie la qualité des freelance grâce aux recommandations des mentors.",
      ogImageSrc:
        "https://site-assets.plasmic.app/9f3005b94278521a011c47609ecbb96a.png",
      canonical: "https://www.netir.fr/entreprise"
    }
  }
);

export default PlasmicLandingFreelances;
/* prettier-ignore-end */
