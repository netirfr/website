/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: -S60DYuHb-Pb

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicCheckboxesCheckboxNetir.module.css"; // plasmic-import: -S60DYuHb-Pb/css

import CheckIcon from "./icons/PlasmicIcon__Check"; // plasmic-import: L4RC0xhJ0uBL/icon

createPlasmicElementProxy;

export type PlasmicCheckboxesCheckboxNetir__VariantMembers = {
  isChecked: "isChecked";
};
export type PlasmicCheckboxesCheckboxNetir__VariantsArgs = {
  isChecked?: SingleBooleanChoiceArg<"isChecked">;
};
type VariantPropType = keyof PlasmicCheckboxesCheckboxNetir__VariantsArgs;
export const PlasmicCheckboxesCheckboxNetir__VariantProps =
  new Array<VariantPropType>("isChecked");

export type PlasmicCheckboxesCheckboxNetir__ArgsType = {};
type ArgPropType = keyof PlasmicCheckboxesCheckboxNetir__ArgsType;
export const PlasmicCheckboxesCheckboxNetir__ArgProps =
  new Array<ArgPropType>();

export type PlasmicCheckboxesCheckboxNetir__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultCheckboxesCheckboxNetirProps {
  isChecked?: SingleBooleanChoiceArg<"isChecked">;
  className?: string;
}

const $$ = {};

function PlasmicCheckboxesCheckboxNetir__RenderFunc(props: {
  variants: PlasmicCheckboxesCheckboxNetir__VariantsArgs;
  args: PlasmicCheckboxesCheckboxNetir__ArgsType;
  overrides: PlasmicCheckboxesCheckboxNetir__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isChecked",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isChecked
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        { [sty.rootisChecked]: hasVariant($state, "isChecked", "isChecked") }
      )}
      onClick={async event => {
        const $steps = {};

        $steps["updateIsChecked"] = true
          ? (() => {
              const actionArgs = {
                vgroup: "isChecked",
                operation: 2,
                value: "isChecked"
              };
              return (({ vgroup, value }) => {
                if (typeof value === "string") {
                  value = [value];
                }

                const oldValue = $stateGet($state, vgroup);
                $stateSet($state, vgroup, !oldValue);
                return !oldValue;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateIsChecked"] != null &&
          typeof $steps["updateIsChecked"] === "object" &&
          typeof $steps["updateIsChecked"].then === "function"
        ) {
          $steps["updateIsChecked"] = await $steps["updateIsChecked"];
        }
      }}
    >
      <CheckIcon
        className={classNames(projectcss.all, sty.svg__uhUOm, {
          [sty.svgisChecked__uhUOmensxW]: hasVariant(
            $state,
            "isChecked",
            "isChecked"
          )
        })}
        role={"img"}
      />

      <CheckIcon
        className={classNames(projectcss.all, sty.svg__dEal4)}
        role={"img"}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCheckboxesCheckboxNetir__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCheckboxesCheckboxNetir__VariantsArgs;
    args?: PlasmicCheckboxesCheckboxNetir__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicCheckboxesCheckboxNetir__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicCheckboxesCheckboxNetir__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCheckboxesCheckboxNetir__ArgProps,
          internalVariantPropNames: PlasmicCheckboxesCheckboxNetir__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCheckboxesCheckboxNetir__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCheckboxesCheckboxNetir";
  } else {
    func.displayName = `PlasmicCheckboxesCheckboxNetir.${nodeName}`;
  }
  return func;
}

export const PlasmicCheckboxesCheckboxNetir = Object.assign(
  // Top-level PlasmicCheckboxesCheckboxNetir renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicCheckboxesCheckboxNetir
    internalVariantProps: PlasmicCheckboxesCheckboxNetir__VariantProps,
    internalArgProps: PlasmicCheckboxesCheckboxNetir__ArgProps
  }
);

export default PlasmicCheckboxesCheckboxNetir;
/* prettier-ignore-end */
