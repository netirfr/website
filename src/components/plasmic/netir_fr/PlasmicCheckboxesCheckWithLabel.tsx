/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: pqDmGvKea0I3

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import CheckboxesCheckboxNetir from "../../CheckboxesCheckboxNetir"; // plasmic-import: -S60DYuHb-Pb/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicCheckboxesCheckWithLabel.module.css"; // plasmic-import: pqDmGvKea0I3/css

createPlasmicElementProxy;

export type PlasmicCheckboxesCheckWithLabel__VariantMembers = {};
export type PlasmicCheckboxesCheckWithLabel__VariantsArgs = {};
type VariantPropType = keyof PlasmicCheckboxesCheckWithLabel__VariantsArgs;
export const PlasmicCheckboxesCheckWithLabel__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCheckboxesCheckWithLabel__ArgsType = {
  labelCheckbox?: string;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicCheckboxesCheckWithLabel__ArgsType;
export const PlasmicCheckboxesCheckWithLabel__ArgProps = new Array<ArgPropType>(
  "labelCheckbox",
  "children"
);

export type PlasmicCheckboxesCheckWithLabel__OverridesType = {
  root?: Flex__<"div">;
  checkboxesCheckboxNetir?: Flex__<typeof CheckboxesCheckboxNetir>;
  link?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultCheckboxesCheckWithLabelProps {
  labelCheckbox?: string;
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicCheckboxesCheckWithLabel__RenderFunc(props: {
  variants: PlasmicCheckboxesCheckWithLabel__VariantsArgs;
  args: PlasmicCheckboxesCheckWithLabel__ArgsType;
  overrides: PlasmicCheckboxesCheckWithLabel__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          labelCheckbox: "J'accepte les termes et conditions"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <CheckboxesCheckboxNetir
        data-plasmic-name={"checkboxesCheckboxNetir"}
        data-plasmic-override={overrides.checkboxesCheckboxNetir}
        className={classNames("__wab_instance", sty.checkboxesCheckboxNetir)}
      />

      <PlasmicLink__
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(projectcss.all, projectcss.a, sty.link)}
        component={Link}
        onClick={async event => {
          const $steps = {};

          $steps["goToConditionUtilisation"] = true
            ? (() => {
                const actionArgs = { destination: `/legal` };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __gatsbyNavigate(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToConditionUtilisation"] != null &&
            typeof $steps["goToConditionUtilisation"] === "object" &&
            typeof $steps["goToConditionUtilisation"].then === "function"
          ) {
            $steps["goToConditionUtilisation"] =
              await $steps["goToConditionUtilisation"];
          }
        }}
        platform={"gatsby"}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__q4FPo
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{
                    color: "var(--token-lDLmFdvCjYex)",
                    fontWeight: 500
                  }}
                >
                  {"J'accepte"}
                </span>
                <React.Fragment>{""}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{
                    color: "var(--token-aAKoBM1ZnH0f)",
                    fontWeight: 500
                  }}
                >
                  {" les termes et conditions"}
                </span>
              </React.Fragment>
            </div>
          ),
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
      </PlasmicLink__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "checkboxesCheckboxNetir", "link"],
  checkboxesCheckboxNetir: ["checkboxesCheckboxNetir"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  checkboxesCheckboxNetir: typeof CheckboxesCheckboxNetir;
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCheckboxesCheckWithLabel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCheckboxesCheckWithLabel__VariantsArgs;
    args?: PlasmicCheckboxesCheckWithLabel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicCheckboxesCheckWithLabel__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicCheckboxesCheckWithLabel__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCheckboxesCheckWithLabel__ArgProps,
          internalVariantPropNames:
            PlasmicCheckboxesCheckWithLabel__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCheckboxesCheckWithLabel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCheckboxesCheckWithLabel";
  } else {
    func.displayName = `PlasmicCheckboxesCheckWithLabel.${nodeName}`;
  }
  return func;
}

export const PlasmicCheckboxesCheckWithLabel = Object.assign(
  // Top-level PlasmicCheckboxesCheckWithLabel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    checkboxesCheckboxNetir: makeNodeComponent("checkboxesCheckboxNetir"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicCheckboxesCheckWithLabel
    internalVariantProps: PlasmicCheckboxesCheckWithLabel__VariantProps,
    internalArgProps: PlasmicCheckboxesCheckWithLabel__ArgProps
  }
);

export default PlasmicCheckboxesCheckWithLabel;
/* prettier-ignore-end */
