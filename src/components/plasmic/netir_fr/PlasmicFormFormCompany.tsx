/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: YzcQfYGIWd1a

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdPassword } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdPassword_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdCheckbox } from "@plasmicpkgs/antd5/skinny/registerCheckbox";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicFormFormCompany.module.css"; // plasmic-import: YzcQfYGIWd1a/css

createPlasmicElementProxy;

export type PlasmicFormFormCompany__VariantMembers = {};
export type PlasmicFormFormCompany__VariantsArgs = {};
type VariantPropType = keyof PlasmicFormFormCompany__VariantsArgs;
export const PlasmicFormFormCompany__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFormFormCompany__ArgsType = { form2?: React.ReactNode };
type ArgPropType = keyof PlasmicFormFormCompany__ArgsType;
export const PlasmicFormFormCompany__ArgProps = new Array<ArgPropType>("form2");

export type PlasmicFormFormCompany__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultFormFormCompanyProps {
  form2?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicFormFormCompany__RenderFunc(props: {
  variants: PlasmicFormFormCompany__VariantsArgs;
  args: PlasmicFormFormCompany__ArgsType;
  overrides: PlasmicFormFormCompany__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      {(() => {
        try {
          return true;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })()
        ? renderPlasmicSlot({
            defaultContents: (() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.form__aYyRd),
                formItems: [
                  { label: "Name", name: "name", inputType: "Text" },
                  { label: "Message", name: "message", inputType: "Text Area" }
                ],
                labelCol: { span: 8, horizontalOnly: true },
                layout: "vertical",
                mode: "advanced",
                requiredMark: true,
                submitSlot: null,
                validateTrigger: [],
                wrapperCol: (() => {
                  const __composite = {
                    span: null,
                    horizontalOnly: null,
                    offset: null
                  };
                  __composite["span"] = 24;
                  __composite["horizontalOnly"] = true;
                  __composite["offset"] = 23;
                  return __composite;
                })()
              };

              return (
                <FormWrapper {...child$Props}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__feQ7O)}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__kmfjT
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oxjZc
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700, color: "#040000" }}
                            >
                              {"Prenom"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"prenom"}
                      valuePropName={"prenom"}
                    >
                      {(() => {
                        const child$Props = {
                          autoFocus: true,
                          className: classNames(
                            "__wab_instance",
                            sty.input__eBgln
                          ),
                          placeholder: "Pr\u00e9nom",
                          size: "large"
                        };

                        return <AntdInput {...child$Props} />;
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__wGd28
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1WJt
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#010000" }}
                            >
                              {"Nom"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"nom"}
                      valuePropName={"nom"}
                    >
                      {(() => {
                        const child$Props = {
                          autoFocus: true,
                          className: classNames(
                            "__wab_instance",
                            sty.input__mopS
                          ),
                          placeholder: "Nom",
                          size: "large"
                        };

                        return <AntdInput {...child$Props} />;
                      })()}
                    </FormItemWrapper>
                  </div>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__s8Dno
                    )}
                    hidden={false}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__c099
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700, color: "#000000" }}
                          >
                            {"Email"}
                          </span>
                        </React.Fragment>
                      </div>
                    }
                    name={"email"}
                    noLabel={false}
                    rules={[
                      { ruleType: "required", message: "Email obligatoire" }
                    ]}
                    valuePropName={"email"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.input__pPv0
                        ),
                        placeholder: "Email",
                        size: "large"
                      };

                      return <AntdInput {...child$Props} />;
                    })()}
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField___57Mr5
                    )}
                    hidden={false}
                    hideValidationMessage={false}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rFbtw
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#000000", fontWeight: 700 }}
                          >
                            {"Mot de passe"}
                          </span>
                        </React.Fragment>
                      </div>
                    }
                    name={"password"}
                    noLabel={false}
                    noStyle={false}
                    shouldUpdate={false}
                    valuePropName={"password"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__atoXd)}
                    >
                      {(() => {
                        const child$Props = {
                          bordered: true,
                          className: classNames(
                            "__wab_instance",
                            sty.passwordInput__mXlx6
                          ),
                          maxLength: 8,
                          placeholder: "Mot de passe"
                        };

                        return <AntdPassword {...child$Props} />;
                      })()}
                    </div>
                  </FormItemWrapper>
                  <AntdCheckbox
                    autoFocus={false}
                    className={classNames(
                      "__wab_instance",
                      sty.checkbox___1LcLa
                    )}
                    defaultChecked={false}
                    disabled={false}
                    indeterminate={false}
                    onChange={async checked => {
                      const $steps = {};

                      $steps["updateVariant"] = true
                        ? (() => {
                            const actionArgs = {};
                            return (({ vgroup, value }) => {
                              if (typeof value === "string") {
                                value = [value];
                              }
                              undefined;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateVariant"] != null &&
                        typeof $steps["updateVariant"] === "object" &&
                        typeof $steps["updateVariant"].then === "function"
                      ) {
                        $steps["updateVariant"] = await $steps["updateVariant"];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dxU11
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#000000" }}
                        >
                          {"J'accepte"}
                        </span>
                        <React.Fragment> </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#FB0101" }}
                        >
                          {"les termes et conditions"}
                        </span>
                      </React.Fragment>
                    </div>
                  </AntdCheckbox>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__rAot5)}
                    danger={true}
                    disabled={false}
                    ghost={false}
                    shape={"default"}
                    size={"large"}
                    submitsForm={true}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__knIhx
                      )}
                    >
                      {"Valider"}
                    </div>
                  </AntdButton>
                </FormWrapper>
              );
            })(),
            value: args.form2
          })
        : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFormFormCompany__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFormFormCompany__VariantsArgs;
    args?: PlasmicFormFormCompany__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicFormFormCompany__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicFormFormCompany__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFormFormCompany__ArgProps,
          internalVariantPropNames: PlasmicFormFormCompany__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFormFormCompany__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFormFormCompany";
  } else {
    func.displayName = `PlasmicFormFormCompany.${nodeName}`;
  }
  return func;
}

export const PlasmicFormFormCompany = Object.assign(
  // Top-level PlasmicFormFormCompany renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicFormFormCompany
    internalVariantProps: PlasmicFormFormCompany__VariantProps,
    internalArgProps: PlasmicFormFormCompany__ArgProps
  }
);

export default PlasmicFormFormCompany;
/* prettier-ignore-end */
