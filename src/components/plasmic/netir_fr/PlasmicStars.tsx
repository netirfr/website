/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: 2JaENPSGXAmn

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdRate } from "@plasmicpkgs/antd5/skinny/registerRate";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicStars.module.css"; // plasmic-import: 2JaENPSGXAmn/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: G42alJi5tLaq/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: ve2oeUzZomz5/icon

createPlasmicElementProxy;

export type PlasmicStars__VariantMembers = {};
export type PlasmicStars__VariantsArgs = {};
type VariantPropType = keyof PlasmicStars__VariantsArgs;
export const PlasmicStars__VariantProps = new Array<VariantPropType>();

export type PlasmicStars__ArgsType = { count?: number; color?: string };
type ArgPropType = keyof PlasmicStars__ArgsType;
export const PlasmicStars__ArgProps = new Array<ArgPropType>("count", "color");

export type PlasmicStars__OverridesType = {
  rate?: Flex__<typeof AntdRate>;
  svg?: Flex__<"svg">;
  starPurple?: Flex__<"svg">;
  starGreen?: Flex__<"svg">;
  starYellow?: Flex__<"svg">;
  starBlue?: Flex__<"svg">;
};

export interface DefaultStarsProps {
  count?: number;
  color?: string;
  className?: string;
}

const $$ = {};

function PlasmicStars__RenderFunc(props: {
  variants: PlasmicStars__VariantsArgs;
  args: PlasmicStars__ArgsType;
  overrides: PlasmicStars__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          count: 5,
          color: "yellow"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "rate.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.count;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <AntdRate
      data-plasmic-name={"rate"}
      data-plasmic-override={overrides.rate}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      allowHalf={true}
      character={
        <React.Fragment>
          {(() => {
            try {
              return $props.color === "purple";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <IconIcon
              data-plasmic-name={"starPurple"}
              data-plasmic-override={overrides.starPurple}
              className={classNames(projectcss.all, sty.starPurple)}
              role={"img"}
            />
          ) : null}
          {(() => {
            try {
              return $props.color === "green";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <IconIcon
              data-plasmic-name={"starGreen"}
              data-plasmic-override={overrides.starGreen}
              className={classNames(projectcss.all, sty.starGreen)}
              role={"img"}
            />
          ) : null}
          {(() => {
            try {
              return $props.color === "yellow";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <IconIcon
              data-plasmic-name={"starYellow"}
              data-plasmic-override={overrides.starYellow}
              className={classNames(projectcss.all, sty.starYellow)}
              role={"img"}
            />
          ) : null}
          {(() => {
            try {
              return $props.color === "blue";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <IconIcon
              data-plasmic-name={"starBlue"}
              data-plasmic-override={overrides.starBlue}
              className={classNames(projectcss.all, sty.starBlue)}
              role={"img"}
            />
          ) : null}
        </React.Fragment>
      }
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.rate
      )}
      count={(() => {
        try {
          return $props.count;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      defaultValue={(() => {
        try {
          return $props.count;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return 0;
          }
          throw e;
        }
      })()}
      disabled={false}
      multiCharacter={false}
      onChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["rate", "value"]).apply(
          null,
          eventArgs
        );
      }}
      symbols={
        <Icon3Icon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />
      }
      value={generateStateValueProp($state, ["rate", "value"])}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  rate: ["rate", "svg", "starPurple", "starGreen", "starYellow", "starBlue"],
  svg: ["svg"],
  starPurple: ["starPurple"],
  starGreen: ["starGreen"],
  starYellow: ["starYellow"],
  starBlue: ["starBlue"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  rate: typeof AntdRate;
  svg: "svg";
  starPurple: "svg";
  starGreen: "svg";
  starYellow: "svg";
  starBlue: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStars__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStars__VariantsArgs;
    args?: PlasmicStars__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicStars__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicStars__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStars__ArgProps,
          internalVariantPropNames: PlasmicStars__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStars__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "rate") {
    func.displayName = "PlasmicStars";
  } else {
    func.displayName = `PlasmicStars.${nodeName}`;
  }
  return func;
}

export const PlasmicStars = Object.assign(
  // Top-level PlasmicStars renders the root element
  makeNodeComponent("rate"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    starPurple: makeNodeComponent("starPurple"),
    starGreen: makeNodeComponent("starGreen"),
    starYellow: makeNodeComponent("starYellow"),
    starBlue: makeNodeComponent("starBlue"),

    // Metadata about props expected for PlasmicStars
    internalVariantProps: PlasmicStars__VariantProps,
    internalArgProps: PlasmicStars__ArgProps
  }
);

export default PlasmicStars;
/* prettier-ignore-end */
