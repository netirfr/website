/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: a_Ciy8bk7h3r

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import DashboardDashboardLayout from "../../DashboardDashboardLayout"; // plasmic-import: KS-1W6sGklIw/component
import NavNavItem from "../../NavNavItem"; // plasmic-import: emjpN_Inho3r/component
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import DashboardRightContent from "../../DashboardRightContent"; // plasmic-import: ThA2uZTqWkZI/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicOldFreelanceHome.module.css"; // plasmic-import: a_Ciy8bk7h3r/css

import BurgerMenuIcon from "./icons/PlasmicIcon__BurgerMenu"; // plasmic-import: uiLqCVdai7zb/icon
import MessageSquareDotsSvgrepoComSvgIcon from "./icons/PlasmicIcon__MessageSquareDotsSvgrepoComSvg"; // plasmic-import: lo8y0dFHgTSz/icon
import BusinessFinanceInvoiceSvgrepoComSvgIcon from "./icons/PlasmicIcon__BusinessFinanceInvoiceSvgrepoComSvg"; // plasmic-import: dSOi0A0BQDwy/icon
import EnterpriseSvgrepoComSvgIcon from "./icons/PlasmicIcon__EnterpriseSvgrepoComSvg"; // plasmic-import: HC2LKgzu4-0d/icon
import User2SvgrepoComSvgIcon from "./icons/PlasmicIcon__User2SvgrepoComSvg"; // plasmic-import: yXbiP_2IZqD3/icon
import CapEducationHatSvgrepoComSvgIcon from "./icons/PlasmicIcon__CapEducationHatSvgrepoComSvg"; // plasmic-import: km4JQm5jTwhK/icon

createPlasmicElementProxy;

export type PlasmicOldFreelanceHome__VariantMembers = {};
export type PlasmicOldFreelanceHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicOldFreelanceHome__VariantsArgs;
export const PlasmicOldFreelanceHome__VariantProps =
  new Array<VariantPropType>();

export type PlasmicOldFreelanceHome__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicOldFreelanceHome__ArgsType;
export const PlasmicOldFreelanceHome__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicOldFreelanceHome__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  dashboardLayout?: Flex__<typeof DashboardDashboardLayout>;
  dashboardRightContent?: Flex__<typeof DashboardRightContent>;
};

export interface DefaultOldFreelanceHomeProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

const $$ = {};

export function Head() {
  return <></>;
}

function PlasmicOldFreelanceHome__RenderFunc(props: {
  variants: PlasmicOldFreelanceHome__VariantsArgs;
  args: PlasmicOldFreelanceHome__ArgsType;
  overrides: PlasmicOldFreelanceHome__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dashboardLayout.isSidebarOpenn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "tabletOnly") ? false : false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <BurgerMenuIcon
              className={classNames(projectcss.all, sty.svg__oNHaK)}
              onClick={async event => {
                const $steps = {};

                $steps["updateDashboardLayoutIsSidebarOpenn"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dashboardLayout", "isSidebarOpenn"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDashboardLayoutIsSidebarOpenn"] != null &&
                  typeof $steps["updateDashboardLayoutIsSidebarOpenn"] ===
                    "object" &&
                  typeof $steps["updateDashboardLayoutIsSidebarOpenn"].then ===
                    "function"
                ) {
                  $steps["updateDashboardLayoutIsSidebarOpenn"] =
                    await $steps["updateDashboardLayoutIsSidebarOpenn"];
                }
              }}
              role={"img"}
            />
          </div>
          <DashboardDashboardLayout
            data-plasmic-name={"dashboardLayout"}
            data-plasmic-override={overrides.dashboardLayout}
            children2={
              <React.Fragment>
                <NavNavItem
                  className={classNames(
                    "__wab_instance",
                    sty.navNavItem__pCwTd
                  )}
                  slot={
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__yrL0X
                      )}
                      key={"menuItemKey1"}
                      onClick={async () => {
                        const $steps = {};

                        $steps["goToFreelanceCompany"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: `/freelance/company`
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __gatsbyNavigate(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToFreelanceCompany"] != null &&
                          typeof $steps["goToFreelanceCompany"] === "object" &&
                          typeof $steps["goToFreelanceCompany"].then ===
                            "function"
                        ) {
                          $steps["goToFreelanceCompany"] =
                            await $steps["goToFreelanceCompany"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xxx3D
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 400 }}
                          >
                            {"Entreprise"}
                          </span>
                        </React.Fragment>
                      </div>
                    </AntdMenuItem>
                  }
                >
                  <EnterpriseSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__ks6Xw)}
                    role={"img"}
                  />
                </NavNavItem>
                <NavNavItem
                  className={classNames("__wab_instance", sty.navNavItem__glVx)}
                  slot={
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__kPIw8
                      )}
                      key={"menuItemKey1"}
                      onClick={async () => {
                        const $steps = {};

                        $steps["goToFreelanceProfile"] = true
                          ? (() => {
                              const actionArgs = { destination: `/profile` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __gatsbyNavigate(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToFreelanceProfile"] != null &&
                          typeof $steps["goToFreelanceProfile"] === "object" &&
                          typeof $steps["goToFreelanceProfile"].then ===
                            "function"
                        ) {
                          $steps["goToFreelanceProfile"] =
                            await $steps["goToFreelanceProfile"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ho9E
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 400 }}
                          >
                            {"Profil"}
                          </span>
                        </React.Fragment>
                      </div>
                    </AntdMenuItem>
                  }
                >
                  <User2SvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg___2NaWu)}
                    role={"img"}
                  />
                </NavNavItem>
              </React.Fragment>
            }
            children3={
              <NavNavItem
                className={classNames("__wab_instance", sty.navNavItem__caFeg)}
                slot={
                  <AntdMenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.menuItem__mSxUz
                    )}
                    key={"menuItemKey1"}
                    onClick={async () => {
                      const $steps = {};

                      $steps["goToMentorHome"] = true
                        ? (() => {
                            const actionArgs = { destination: `/mentor/home` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __gatsbyNavigate(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToMentorHome"] != null &&
                        typeof $steps["goToMentorHome"] === "object" &&
                        typeof $steps["goToMentorHome"].then === "function"
                      ) {
                        $steps["goToMentorHome"] =
                          await $steps["goToMentorHome"];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__olEQ
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 400 }}
                        >
                          {"Devenir mentor"}
                        </span>
                      </React.Fragment>
                    </div>
                  </AntdMenuItem>
                }
              >
                <CapEducationHatSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__rak8R)}
                  role={"img"}
                />
              </NavNavItem>
            }
            className={classNames("__wab_instance", sty.dashboardLayout)}
            isSidebarOpenn={generateStateValueProp($state, [
              "dashboardLayout",
              "isSidebarOpenn"
            ])}
            onIsSidebarOpennChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dashboardLayout",
                "isSidebarOpenn"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            slot={
              <DashboardRightContent
                data-plasmic-name={"dashboardRightContent"}
                data-plasmic-override={overrides.dashboardRightContent}
                className={classNames(
                  "__wab_instance",
                  sty.dashboardRightContent
                )}
                slot={renderPlasmicSlot({
                  defaultContents: (
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__mVzrU
                      )}
                      danger={true}
                      disabled={false}
                      ghost={false}
                      href={`/sign-up/company-3`}
                      shape={"default"}
                      size={"large"}
                      submitsForm={true}
                      target={false}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bmoa0
                        )}
                      >
                        {"Renseigner mon entreprise"}
                      </div>
                    </AntdButton>
                  ),
                  value: args.slot
                })}
              />
            }
          >
            {renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <NavNavItem
                    className={classNames(
                      "__wab_instance",
                      sty.navNavItem__a7Ts9
                    )}
                    slot={
                      <AntdMenuItem
                        className={classNames(
                          "__wab_instance",
                          sty.menuItem__n2ZM5
                        )}
                        key={"menuItemKey1"}
                        onClick={async () => {
                          const $steps = {};

                          $steps["goToFreelanceMissions"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: `/freelance/missions`
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __gatsbyNavigate(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToFreelanceMissions"] != null &&
                            typeof $steps["goToFreelanceMissions"] ===
                              "object" &&
                            typeof $steps["goToFreelanceMissions"].then ===
                              "function"
                          ) {
                            $steps["goToFreelanceMissions"] =
                              await $steps["goToFreelanceMissions"];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sNjnP
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 400 }}
                            >
                              {"Missions"}
                            </span>
                          </React.Fragment>
                        </div>
                      </AntdMenuItem>
                    }
                  >
                    <MessageSquareDotsSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__kGabL)}
                      role={"img"}
                    />
                  </NavNavItem>
                  <NavNavItem
                    className={classNames(
                      "__wab_instance",
                      sty.navNavItem__im3FC
                    )}
                    slot={
                      <AntdMenuItem
                        className={classNames(
                          "__wab_instance",
                          sty.menuItem__skhG7
                        )}
                        key={"menuItemKey1"}
                        onClick={async () => {
                          const $steps = {};

                          $steps["goToFreelanceInvoices"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: `/freelance/invoices`
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __gatsbyNavigate(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToFreelanceInvoices"] != null &&
                            typeof $steps["goToFreelanceInvoices"] ===
                              "object" &&
                            typeof $steps["goToFreelanceInvoices"].then ===
                              "function"
                          ) {
                            $steps["goToFreelanceInvoices"] =
                              await $steps["goToFreelanceInvoices"];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pmGs
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 400 }}
                            >
                              {"Factures"}
                            </span>
                          </React.Fragment>
                        </div>
                      </AntdMenuItem>
                    }
                  />
                </React.Fragment>
              ),
              value: args.children
            })}
          </DashboardDashboardLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "dashboardLayout", "dashboardRightContent"],
  freeBox: ["freeBox"],
  dashboardLayout: ["dashboardLayout", "dashboardRightContent"],
  dashboardRightContent: ["dashboardRightContent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  dashboardLayout: typeof DashboardDashboardLayout;
  dashboardRightContent: typeof DashboardRightContent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOldFreelanceHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOldFreelanceHome__VariantsArgs;
    args?: PlasmicOldFreelanceHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicOldFreelanceHome__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicOldFreelanceHome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOldFreelanceHome__ArgProps,
          internalVariantPropNames: PlasmicOldFreelanceHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOldFreelanceHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOldFreelanceHome";
  } else {
    func.displayName = `PlasmicOldFreelanceHome.${nodeName}`;
  }
  return func;
}

export const PlasmicOldFreelanceHome = Object.assign(
  // Top-level PlasmicOldFreelanceHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    dashboardLayout: makeNodeComponent("dashboardLayout"),
    dashboardRightContent: makeNodeComponent("dashboardRightContent"),

    // Metadata about props expected for PlasmicOldFreelanceHome
    internalVariantProps: PlasmicOldFreelanceHome__VariantProps,
    internalArgProps: PlasmicOldFreelanceHome__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicOldFreelanceHome;
/* prettier-ignore-end */
