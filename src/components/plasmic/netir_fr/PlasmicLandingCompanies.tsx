/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: GSJJEjH5km94

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SiteHeader from "../../SiteHeader"; // plasmic-import: Vg4NgSIGKm96/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: byb1-I0x_v8X/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import Probleme from "../../Probleme"; // plasmic-import: UVDtGkgycWzF/component
import Parcours from "../../Parcours"; // plasmic-import: 4kw4zRyWcW3Y/component
import Testimonial from "../../Testimonial"; // plasmic-import: dCyluW4eRMLq/component
import ButtonOldHoverNetir from "../../ButtonOldHoverNetir"; // plasmic-import: oz0RlE6uDG5S/component
import HomepageEtapes from "../../HomepageEtapes"; // plasmic-import: 4L80KNrOoiaf/component
import Besoin from "../../Besoin"; // plasmic-import: CZV8F0NS4iKj/component
import Metiers from "../../Metiers"; // plasmic-import: a9-sw_kw8WM0/component
import Services from "../../Services"; // plasmic-import: fsGXiJvcNs55/component
import Faq from "../../Faq"; // plasmic-import: wBbJjw0EbsaX/component
import Footer from "../../Footer"; // plasmic-import: lPSQkcOmsQQw/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicLandingCompanies.module.css"; // plasmic-import: GSJJEjH5km94/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: 99U4uMxg1jkf/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: FEzuhm3U7mDW/icon
import QuestionAnswerHelpSvgrepoComSvgIcon from "./icons/PlasmicIcon__QuestionAnswerHelpSvgrepoComSvg"; // plasmic-import: aH_8qfii_S2S/icon
import LoupeSearchSvgrepoComSvgIcon from "./icons/PlasmicIcon__LoupeSearchSvgrepoComSvg"; // plasmic-import: _IIR2cfjiqrN/icon
import HourglassEndSvgrepoComSvgIcon from "./icons/PlasmicIcon__HourglassEndSvgrepoComSvg"; // plasmic-import: u1h2U1HTQkFC/icon
import MoneyBagSvgrepoComSvgIcon from "./icons/PlasmicIcon__MoneyBagSvgrepoComSvg"; // plasmic-import: M2CYC4qTbvmP/icon
import MedalRibbonsStarSvgrepoComSvgIcon from "./icons/PlasmicIcon__MedalRibbonsStarSvgrepoComSvg"; // plasmic-import: e0uY_aSC5LZD/icon
import TimerSvgrepoComSvgIcon from "./icons/PlasmicIcon__TimerSvgrepoComSvg"; // plasmic-import: O3lPJXcM3Guy/icon
import SettingSvgrepoComSvgIcon from "./icons/PlasmicIcon__SettingSvgrepoComSvg"; // plasmic-import: IRfbvCfKQdn8/icon
import CheckFileSvgrepoComSvgIcon from "./icons/PlasmicIcon__CheckFileSvgrepoComSvg"; // plasmic-import: gvT2nOM0SJsY/icon
import NIcons3Icon from "./icons/PlasmicIcon__NIcons3"; // plasmic-import: ZzsUrvDAoxUM/icon
import CupStarSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__CupStarSvgrepoCom1Svg"; // plasmic-import: GOQxfpR3bfoD/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: PULVk5w2WWx_/icon
import TaskSquareSvgrepoComSvgIcon from "./icons/PlasmicIcon__TaskSquareSvgrepoComSvg"; // plasmic-import: tQcjE_9ZghIR/icon
import InterfaceUiLayoutAppSvgrepoComSvgIcon from "./icons/PlasmicIcon__InterfaceUiLayoutAppSvgrepoComSvg"; // plasmic-import: buY3zkbVLflu/icon
import VideoSvgrepoComSvgIcon from "./icons/PlasmicIcon__VideoSvgrepoComSvg"; // plasmic-import: vxGpVCrtsese/icon
import FilmSvgrepoComSvgIcon from "./icons/PlasmicIcon__FilmSvgrepoComSvg"; // plasmic-import: 0Rv4Tkmpsmv3/icon
import PaletteSvgrepoComSvgIcon from "./icons/PlasmicIcon__PaletteSvgrepoComSvg"; // plasmic-import: 7pH85ZWivot3/icon
import WebLinkSvgrepoComSvgIcon from "./icons/PlasmicIcon__WebLinkSvgrepoComSvg"; // plasmic-import: pa41I_uKsfd9/icon
import MegaphoneLineSvgrepoComSvgIcon from "./icons/PlasmicIcon__MegaphoneLineSvgrepoComSvg"; // plasmic-import: 2I-cVTVI8VdH/icon
import PhotoCameraSvgrepoComSvgIcon from "./icons/PlasmicIcon__PhotoCameraSvgrepoComSvg"; // plasmic-import: VkB9qp5H1mXC/icon
import Chart2SvgrepoComSvgIcon from "./icons/PlasmicIcon__Chart2SvgrepoComSvg"; // plasmic-import: ZCnGrz9-6fus/icon
import MailSvgrepoComSvgIcon from "./icons/PlasmicIcon__MailSvgrepoComSvg"; // plasmic-import: 2d08NXAvIi5z/icon
import CodeTechDevSvgrepoComSvgIcon from "./icons/PlasmicIcon__CodeTechDevSvgrepoComSvg"; // plasmic-import: BIbYBiAZNtRR/icon
import SeoSvgrepoComSvgIcon from "./icons/PlasmicIcon__SeoSvgrepoComSvg"; // plasmic-import: EuaApGjewFAy/icon
import ShareSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__ShareSvgrepoCom1Svg"; // plasmic-import: dv_PMYQhsYzL/icon
import entreprise15PngQwvqs5FkPgmw from "./images/entreprise15Png.png"; // plasmic-import: qwvqs5fkPgmw/picture
import handipharmLogoWbKtOhWPwtiz from "./images/handipharmLogo.svg"; // plasmic-import: WbKtOhWPwtiz/picture
import logoBigXZpuT8Kgy8Eh from "./images/logoBig.png"; // plasmic-import: xZpuT8Kgy8eh/picture
import nobullshitXgwL6ARlI0DP from "./images/nobullshit.png"; // plasmic-import: xgwL6ARlI0dP/picture
import cosikaLogo2WE5FfyUbgaMx from "./images/cosikaLogo2.png"; // plasmic-import: wE5FFYUbgaMx/picture
import turaquand6Isdk8MaLFx9 from "./images/turaquand.png"; // plasmic-import: 6Isdk8maLFx9/picture
import smala2ZsSz5UizzlDx from "./images/smala2.png"; // plasmic-import: ZsSZ5uizzlDx/picture
import cloudIamPjUgCpGuMml0 from "./images/cloudIam.png"; // plasmic-import: PjUGCpGuMml0/picture
import phamaConfort0UPxsoChPv5Y from "./images/phamaConfort.png"; // plasmic-import: 0uPxsoCHPv5y/picture
import campingCar2SNlYfWn9VXr from "./images/campingCar.png"; // plasmic-import: 2SNlYFWn9vXr/picture
import abcmLogoNcQOw4GGoyu from "./images/abcmLogo.png"; // plasmic-import: ncQ_ow4gGoyu/picture
import franceNuageEytvfVu1LwPc from "./images/franceNuage.png"; // plasmic-import: eytvfVU1lwPc/picture
import image409UcZuXo8ATm from "./images/image40.svg"; // plasmic-import: 9-UCZuXo8aTm/picture
import captainVetToneLogoLightV2SvgKJm2YZnmWjUo from "./images/captainVetToneLogoLightV2Svg.svg"; // plasmic-import: kJM2YZnmWjUO/picture
import image36UQLoTnT5Lyj from "./images/image36.svg"; // plasmic-import: u_qLOTnT5Lyj/picture
import image37I0Wn0XzV1VA from "./images/image37.svg"; // plasmic-import: i0wn0xz_v1vA/picture
import image33PqlLrZxKaEo from "./images/image33.svg"; // plasmic-import: pqlLRZxKAEo-/picture
import image35Kg9Ug8HS7BH9 from "./images/image35.svg"; // plasmic-import: KG9ug8hS7bH9/picture
import image3020JMqtErSmj from "./images/image30.svg"; // plasmic-import: 2-0jMqtErSmj/picture
import image34U1EJgn6NsBp from "./images/image34.svg"; // plasmic-import: u1-eJGN6NSBp/picture
import image32ApPfhKzKTna3 from "./images/image32.svg"; // plasmic-import: APPfhKzKTna3/picture
import chevre2RemovebgPreviewPngO75IhK4K4VeR from "./images/chevre2RemovebgPreviewPng.png"; // plasmic-import: O75IhK4K4VeR/picture
import geminiGeneratedImage8Nmavg8Nmavg8Nma2PngSZh7MgXkZfh4 from "./images/geminiGeneratedImage8Nmavg8Nmavg8Nma2Png.png"; // plasmic-import: sZh7MGXkZfh4/picture
import geminiGeneratedImage8Nmavg8Nmavg8Nma1PngLn01WywmzPv3 from "./images/geminiGeneratedImage8Nmavg8Nmavg8Nma1Png.png"; // plasmic-import: Ln01WywmzPv3/picture
import geminiGeneratedImage8Nmavg8Nmavg8NmaPngFaQbk7IFwq from "./images/geminiGeneratedImage8Nmavg8Nmavg8NmaPng.png"; // plasmic-import: fa-qbk_7IFwq/picture
import entrepriseRemovebgPreviewPng0RJyLeW7L1L from "./images/entrepriseRemovebgPreviewPng.png"; // plasmic-import: 0rJYLeW-7l1l/picture
import image628Qzovu50GBgC from "./images/image62.svg"; // plasmic-import: 8qzovu50gBgC/picture
import entreprise2PngGdrpwiP3KOYn from "./images/entreprise2Png.png"; // plasmic-import: GdrpwiP3kOYn/picture
import image71YHd3MeBiHa from "./images/image71.svg"; // plasmic-import: _yHd3Me-BiHA/picture
import image72ZcFu6ZxR5GO from "./images/image72.svg"; // plasmic-import: ZcFu-6ZxR5gO/picture
import image73Bhe584Jy2H4S from "./images/image73.svg"; // plasmic-import: BHE584JY2h4s/picture
import image74FhLcVvIfKkoG from "./images/image74.svg"; // plasmic-import: FHLcVVIfKkoG/picture
import image75A1LJXftwluYq from "./images/image75.svg"; // plasmic-import: A1lJXftwluYq/picture
import image883LtAm7Zxsvkk from "./images/image88.svg"; // plasmic-import: 3LTAm7Zxsvkk/picture
import image77WPaLUkTfyml from "./images/image77.svg"; // plasmic-import: WPaLUkTfyml_/picture
import image780NNwx5FtKKa from "./images/image78.svg"; // plasmic-import: 0nNwx5ftK-ka/picture
import image799B9UKdYx8LOk from "./images/image79.svg"; // plasmic-import: 9B9UKdYx8LOk/picture
import image89Z7Sz6A2YHj4H from "./images/image89.svg"; // plasmic-import: Z7sz6a2yHJ4h/picture
import image90Jlb7I7EpS7Xi from "./images/image90.svg"; // plasmic-import: jlb7i7epS7xi/picture
import geminiGeneratedImage8R11Yk8R11Yk8R11RemovebgPreviewPngBZ8T737YaQxk from "./images/geminiGeneratedImage8R11Yk8R11Yk8R11RemovebgPreviewPng.png"; // plasmic-import: bZ8t737YaQXK/picture
import image41MvZbyZuDk41 from "./images/image41.svg"; // plasmic-import: MvZBY-ZuDK41/picture
import logoTextBlackColorBgWhite1500PngBSyZCbzPXsht from "./images/logoTextBlackColorBgWhite1500Png.png"; // plasmic-import: BSyZCbzPXsht/picture

createPlasmicElementProxy;

export type PlasmicLandingCompanies__VariantMembers = {};
export type PlasmicLandingCompanies__VariantsArgs = {};
type VariantPropType = keyof PlasmicLandingCompanies__VariantsArgs;
export const PlasmicLandingCompanies__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLandingCompanies__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicLandingCompanies__ArgsType;
export const PlasmicLandingCompanies__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicLandingCompanies__OverridesType = {
  body?: Flex__<"div">;
  wrapper?: Flex__<"div">;
  hero?: Flex__<"div">;
  siteHeader?: Flex__<typeof SiteHeader>;
  buttonButton7?: Flex__<typeof ButtonPrimary>;
  interactionEffect10?: Flex__<"div">;
  value2?: Flex__<"div">;
  titre3?: Flex__<"div">;
  h4?: Flex__<"h4">;
  boutons4?: Flex__<"div">;
  primary5?: Flex__<typeof ButtonPrimary>;
  primary6?: Flex__<typeof ButtonPrimary>;
  socialProof?: Flex__<"section">;
  sliderCarousel4?: Flex__<typeof SliderWrapper>;
  handipharm2?: Flex__<"div">;
  logoBig2?: Flex__<"div">;
  nobullshit2?: Flex__<"div">;
  cosikaLogo2?: Flex__<"div">;
  turquand3?: Flex__<"div">;
  turquand4?: Flex__<typeof PlasmicImg__>;
  smala2?: Flex__<"div">;
  cloudIam2?: Flex__<"div">;
  pharmaConfort2?: Flex__<"div">;
  campingCar2?: Flex__<"div">;
  abcm2?: Flex__<"div">;
  franceNuage2?: Flex__<"div">;
  logosrow?: Flex__<"div">;
  big?: Flex__<typeof PlasmicImg__>;
  campingCarPark?: Flex__<typeof PlasmicImg__>;
  captainvet?: Flex__<typeof PlasmicImg__>;
  nbte?: Flex__<typeof PlasmicImg__>;
  cloudiam?: Flex__<typeof PlasmicImg__>;
  abcm3?: Flex__<typeof PlasmicImg__>;
  francenuage?: Flex__<typeof PlasmicImg__>;
  handipharm3?: Flex__<typeof PlasmicImg__>;
  smala3?: Flex__<typeof PlasmicImg__>;
  pharmaconfort?: Flex__<typeof PlasmicImg__>;
  defis?: Flex__<"section">;
  parcours?: Flex__<"section">;
  benefices?: Flex__<"section">;
  testimonials?: Flex__<"div">;
  titre4?: Flex__<"div">;
  testimonial?: Flex__<"div">;
  callToAction1?: Flex__<"div">;
  primary7?: Flex__<typeof ButtonPrimary>;
  oldHero?: Flex__<"div">;
  valueProposition?: Flex__<"div">;
  buttons2?: Flex__<"div">;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  handipharm?: Flex__<"div">;
  logoBig?: Flex__<"div">;
  nobullshit?: Flex__<"div">;
  cosikaLogo?: Flex__<"div">;
  turquand2?: Flex__<"div">;
  turquand?: Flex__<typeof PlasmicImg__>;
  smala?: Flex__<"div">;
  cloudIam?: Flex__<"div">;
  pharmaConfort?: Flex__<"div">;
  campingCar?: Flex__<"div">;
  abcm?: Flex__<"div">;
  franceNuage?: Flex__<"div">;
  _3Etapes?: Flex__<"section">;
  photo2?: Flex__<"div">;
  texte?: Flex__<"div">;
  bouton?: Flex__<"a"> & Partial<LinkProps>;
  besoin?: Flex__<"section">;
  service?: Flex__<"section">;
  titre2?: Flex__<"div">;
  services?: Flex__<typeof Services>;
  services2?: Flex__<typeof Services>;
  services3?: Flex__<typeof Services>;
  services4?: Flex__<typeof Services>;
  services5?: Flex__<typeof Services>;
  services6?: Flex__<typeof Services>;
  services7?: Flex__<typeof Services>;
  services8?: Flex__<typeof Services>;
  services9?: Flex__<typeof Services>;
  services10?: Flex__<typeof Services>;
  services11?: Flex__<typeof Services>;
  services12?: Flex__<typeof Services>;
  faq?: Flex__<"div">;
  titre7?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultLandingCompaniesProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

const $$ = {};

export function Head() {
  return (
    <>
      <meta name="twitter:card" content="summary_large_image" />
      <title key="title">{PlasmicLandingCompanies.pageMetadata.title}</title>
      <meta
        key="og:title"
        property="og:title"
        content={PlasmicLandingCompanies.pageMetadata.title}
      />
      <meta
        key="twitter:title"
        name="twitter:title"
        content={PlasmicLandingCompanies.pageMetadata.title}
      />
      <meta
        key="description"
        name="description"
        content={PlasmicLandingCompanies.pageMetadata.description}
      />
      <meta
        key="og:description"
        property="og:description"
        content={PlasmicLandingCompanies.pageMetadata.description}
      />
      <meta
        key="twitter:description"
        name="twitter:description"
        content={PlasmicLandingCompanies.pageMetadata.description}
      />
      <meta
        key="og:image"
        property="og:image"
        content={PlasmicLandingCompanies.pageMetadata.ogImageSrc}
      />
      <meta
        key="twitter:image"
        name="twitter:image"
        content={PlasmicLandingCompanies.pageMetadata.ogImageSrc}
      />
      <link
        rel="canonical"
        href={PlasmicLandingCompanies.pageMetadata.canonical}
      />
    </>
  );
}

function PlasmicLandingCompanies__RenderFunc(props: {
  variants: PlasmicLandingCompanies__VariantsArgs;
  args: PlasmicLandingCompanies__ArgsType;
  overrides: PlasmicLandingCompanies__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "services.design",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services2.design",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services3.design",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services4.design",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services5.design",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services6.design",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => "design"
      },
      {
        path: "services7.design",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "services8.design",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "services9.design",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "services10.design",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "services11.design",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "services12.design",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "services.data",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services2.data",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services3.data",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services4.data",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services5.data",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services6.data",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services7.data",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services8.data",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services9.data",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services10.data",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => "data"
      },
      {
        path: "services11.data",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "services12.data",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "services.expRef",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services2.expRef",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services3.expRef",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services4.expRef",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services5.expRef",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services6.expRef",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services7.expRef",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services8.expRef",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services9.expRef",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services10.expRef",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services11.expRef",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => "expRef"
      },
      {
        path: "services12.expRef",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "services.montage",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services2.montage",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services3.montage",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "services4.montage",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => "montage"
      },
      {
        path: "services5.montage",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "services6.montage",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "services7.montage",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "services8.montage",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "services9.montage",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "services10.montage",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "services11.montage",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "services12.montage",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "sliderCarousel4.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel4",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "siteHeader.isNavopen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonButton7.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonButton7.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "primary5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "primary5.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "primary6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "primary6.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "soft"
      },
      {
        path: "primary7.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "primary7.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "soft"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"body"}
          data-plasmic-override={overrides.body}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.body
          )}
        >
          <div
            data-plasmic-name={"wrapper"}
            data-plasmic-override={overrides.wrapper}
            className={classNames(projectcss.all, sty.wrapper)}
          >
            <div
              data-plasmic-name={"hero"}
              data-plasmic-override={overrides.hero}
              className={classNames(projectcss.all, sty.hero)}
            >
              <SiteHeader
                data-plasmic-name={"siteHeader"}
                data-plasmic-override={overrides.siteHeader}
                className={classNames("__wab_instance", sty.siteHeader)}
                isNavopen={generateStateValueProp($state, [
                  "siteHeader",
                  "isNavopen"
                ])}
                onIsNavopenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "siteHeader",
                    "isNavopen"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <ButtonPrimary
                  data-plasmic-name={"buttonButton7"}
                  data-plasmic-override={overrides.buttonButton7}
                  className={classNames("__wab_instance", sty.buttonButton7)}
                  color={generateStateValueProp($state, [
                    "buttonButton7",
                    "color"
                  ])}
                  disabled={false}
                  interactionEffect2={
                    <div
                      data-plasmic-name={"interactionEffect10"}
                      data-plasmic-override={overrides.interactionEffect10}
                      className={classNames(
                        projectcss.all,
                        sty.interactionEffect10
                      )}
                    />
                  }
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__p2P1O
                      )}
                    >
                      {"Inscription"}
                    </div>
                  }
                  onColorChange2={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "buttonButton7",
                      "color"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onTypeChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "buttonButton7",
                      "type"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  type={generateStateValueProp($state, [
                    "buttonButton7",
                    "type"
                  ])}
                />
              </SiteHeader>
              <div className={classNames(projectcss.all, sty.freeBox__kx1Tj)}>
                <div
                  data-plasmic-name={"value2"}
                  data-plasmic-override={overrides.value2}
                  className={classNames(projectcss.all, sty.value2)}
                >
                  <div
                    data-plasmic-name={"titre3"}
                    data-plasmic-override={overrides.titre3}
                    className={classNames(projectcss.all, sty.titre3)}
                  >
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__uKrRf
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "var(--token-a7EGbo9QyMt7)" }}
                        >
                          {
                            "Entreprise : fini le recrutement au hasard. Trouvez le talent juste, coach\u00e9 pour l'excellence."
                          }
                        </span>
                      </React.Fragment>
                    </h1>
                    <h4
                      data-plasmic-name={"h4"}
                      data-plasmic-override={overrides.h4}
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "Faites confiance \u00e0 nos mentors, ils sauront vous proposer nos meilleurs freelances."
                        : "Acc\u00e9dez \u00e0 des freelances ultra-qualifi\u00e9s, accompagn\u00e9s par des mentors experts, pour des projets livr\u00e9s avec impact et sans prise de t\u00eate."}
                    </h4>
                    <div
                      data-plasmic-name={"boutons4"}
                      data-plasmic-override={overrides.boutons4}
                      className={classNames(projectcss.all, sty.boutons4)}
                    >
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__fMau7
                        )}
                        component={Link}
                        href={"netir.fr/sign-up"}
                        platform={"gatsby"}
                      >
                        <ButtonPrimary
                          data-plasmic-name={"primary5"}
                          data-plasmic-override={overrides.primary5}
                          className={classNames("__wab_instance", sty.primary5)}
                          color={generateStateValueProp($state, [
                            "primary5",
                            "color"
                          ])}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ryWhB
                              )}
                            >
                              {"Trouver mon talent coach\u00e9 !"}
                            </div>
                          }
                          onColorChange2={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "primary5",
                              "color"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onTypeChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "primary5",
                              "type"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          type={generateStateValueProp($state, [
                            "primary5",
                            "type"
                          ])}
                        />
                      </PlasmicLink__>
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__lnMke
                        )}
                        component={Link}
                        href={"#defis"}
                        platform={"gatsby"}
                      >
                        <ButtonPrimary
                          data-plasmic-name={"primary6"}
                          data-plasmic-override={overrides.primary6}
                          className={classNames("__wab_instance", sty.primary6)}
                          color={generateStateValueProp($state, [
                            "primary6",
                            "color"
                          ])}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__sjAMp
                              )}
                            >
                              {"D\u00e9couvrir notre solution"}
                            </div>
                          }
                          onColorChange2={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "primary6",
                              "color"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onTypeChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "primary6",
                              "type"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          type={generateStateValueProp($state, [
                            "primary6",
                            "type"
                          ])}
                        />
                      </PlasmicLink__>
                    </div>
                  </div>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__qbEom)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "auto"
                        : "600px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "100%"
                        : "none"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "auto"
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "40%"
                          : "37%"
                    }
                    loading={"lazy"}
                    src={{
                      src: entreprise15PngQwvqs5FkPgmw,
                      fullWidth: 1328,
                      fullHeight: 1590,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </div>
            <section
              data-plasmic-name={"socialProof"}
              data-plasmic-override={overrides.socialProof}
              className={classNames(projectcss.all, sty.socialProof)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__dzrBd)}>
                {(() => {
                  const child$Props = {
                    arrowColor: "#3C0E0E",
                    arrows: false,
                    autoplay: true,
                    autoplaySpeed: 0,
                    beforeChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "currentSlide",
                        ["sliderCarousel4", "currentSlide"],
                        SliderWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    centerMode: true,
                    className: classNames(
                      "__wab_instance",
                      sty.sliderCarousel4
                    ),
                    cssEase: "linear",
                    fade: false,
                    initialSlide: generateStateValueProp($state, [
                      "sliderCarousel4",
                      "currentSlide"
                    ]),
                    pauseOnHover: hasVariant(
                      globalVariants,
                      "screen",
                      "mobileOnly"
                    )
                      ? false
                      : false,
                    ref: ref => {
                      $refs["sliderCarousel4"] = ref;
                    },
                    sliderScopeClassName: sty["sliderCarousel4__slider"],
                    speed: hasVariant(globalVariants, "screen", "mobileOnly")
                      ? 2050
                      : 3000,
                    swipe: false,
                    variableWidth: true,
                    vertical: false
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "currentSlide",
                        plasmicStateName: "sliderCarousel4.currentSlide"
                      }
                    ],
                    [],
                    SliderWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <SliderWrapper
                      data-plasmic-name={"sliderCarousel4"}
                      data-plasmic-override={overrides.sliderCarousel4}
                      {...child$Props}
                    >
                      <div
                        data-plasmic-name={"handipharm2"}
                        data-plasmic-override={overrides.handipharm2}
                        className={classNames(projectcss.all, sty.handipharm2)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__p6Uvf)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "100px"
                              : "80px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "200px"
                              : "100%"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "100%"
                              : "100%"
                          }
                          src={{
                            src: handipharmLogoWbKtOhWPwtiz,
                            fullWidth: 335,
                            fullHeight: 135,
                            aspectRatio: 2.481481
                          }}
                        />
                      </div>
                      <div
                        data-plasmic-name={"logoBig2"}
                        data-plasmic-override={overrides.logoBig2}
                        className={classNames(projectcss.all, sty.logoBig2)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__m2XhT)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "100px"
                              : "85px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "100%"
                              : "none"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "120px"
                              : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletOnly"
                                  )
                                ? "100%"
                                : "auto"
                          }
                          src={{
                            src: logoBigXZpuT8Kgy8Eh,
                            fullWidth: 500,
                            fullHeight: 500,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        data-plasmic-name={"nobullshit2"}
                        data-plasmic-override={overrides.nobullshit2}
                        className={classNames(projectcss.all, sty.nobullshit2)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__mtZv7)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "106px"
                              : "80px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "100%"
                              : "100%"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "100%"
                              : "100%"
                          }
                          src={{
                            src: nobullshitXgwL6ARlI0DP,
                            fullWidth: 766,
                            fullHeight: 326,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        data-plasmic-name={"cosikaLogo2"}
                        data-plasmic-override={overrides.cosikaLogo2}
                        className={classNames(projectcss.all, sty.cosikaLogo2)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__dJkhL)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "80px"
                              : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletOnly"
                                  )
                                ? "60px"
                                : "90px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "100%"
                              : "100%"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "100%"
                              : "200px"
                          }
                          src={{
                            src: cosikaLogo2WE5FfyUbgaMx,
                            fullWidth: 1040,
                            fullHeight: 233,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        data-plasmic-name={"turquand3"}
                        data-plasmic-override={overrides.turquand3}
                        className={classNames(projectcss.all, sty.turquand3)}
                      >
                        <PlasmicImg__
                          data-plasmic-name={"turquand4"}
                          data-plasmic-override={overrides.turquand4}
                          alt={""}
                          className={classNames(sty.turquand4)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "106px"
                              : "80px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "100%"
                              : "100%"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "100%"
                              : "100%"
                          }
                          src={{
                            src: turaquand6Isdk8MaLFx9,
                            fullWidth: 400,
                            fullHeight: 400,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        data-plasmic-name={"smala2"}
                        data-plasmic-override={overrides.smala2}
                        className={classNames(projectcss.all, sty.smala2)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__jEZh)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "106px"
                              : "80px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "120px"
                              : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletOnly"
                                  )
                                ? "100%"
                                : "100%"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "100%"
                              : "100%"
                          }
                          src={{
                            src: smala2ZsSz5UizzlDx,
                            fullWidth: 368,
                            fullHeight: 163,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        data-plasmic-name={"cloudIam2"}
                        data-plasmic-override={overrides.cloudIam2}
                        className={classNames(projectcss.all, sty.cloudIam2)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__fhT0J)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "106px"
                              : "80px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "100%"
                              : "100%"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "100%"
                              : "100%"
                          }
                          src={{
                            src: cloudIamPjUgCpGuMml0,
                            fullWidth: 812,
                            fullHeight: 307,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        data-plasmic-name={"pharmaConfort2"}
                        data-plasmic-override={overrides.pharmaConfort2}
                        className={classNames(
                          projectcss.all,
                          sty.pharmaConfort2
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___0Ww0K)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "106px"
                              : "80px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "100%"
                              : "100%"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "100%"
                              : "100%"
                          }
                          src={{
                            src: phamaConfort0UPxsoChPv5Y,
                            fullWidth: 681,
                            fullHeight: 366,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        data-plasmic-name={"campingCar2"}
                        data-plasmic-override={overrides.campingCar2}
                        className={classNames(projectcss.all, sty.campingCar2)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__mt6Mf)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "106px"
                              : "80px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "100%"
                              : "100%"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "100%"
                              : "100%"
                          }
                          src={{
                            src: campingCar2SNlYfWn9VXr,
                            fullWidth: 502,
                            fullHeight: 145,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        data-plasmic-name={"abcm2"}
                        data-plasmic-override={overrides.abcm2}
                        className={classNames(projectcss.all, sty.abcm2)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__jQ)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "106px"
                              : "80px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "100%"
                              : "100%"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "100%"
                              : "100%"
                          }
                          src={{
                            src: abcmLogoNcQOw4GGoyu,
                            fullWidth: 427,
                            fullHeight: 162,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        data-plasmic-name={"franceNuage2"}
                        data-plasmic-override={overrides.franceNuage2}
                        className={classNames(projectcss.all, sty.franceNuage2)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__ncDqh)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "106px"
                              : "80px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "none"
                              : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "tabletOnly"
                                  )
                                ? "100%"
                                : "100%"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "100%"
                              : "100%"
                          }
                          src={{
                            src: franceNuageEytvfVu1LwPc,
                            fullWidth: 478,
                            fullHeight: 153,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    </SliderWrapper>
                  );
                })()}
              </div>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : hasVariant(globalVariants, "screen", "tabletOnly")
                    ? true
                    : false
              ) ? (
                <div
                  data-plasmic-name={"logosrow"}
                  data-plasmic-override={overrides.logosrow}
                  className={classNames(projectcss.all, sty.logosrow)}
                >
                  <PlasmicImg__
                    data-plasmic-name={"big"}
                    data-plasmic-override={overrides.big}
                    alt={""}
                    className={classNames(sty.big)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : "100%"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "auto"
                        : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: logoBigXZpuT8Kgy8Eh,
                      fullWidth: 500,
                      fullHeight: 500,
                      aspectRatio: undefined
                    }}
                  />

                  <PlasmicImg__
                    data-plasmic-name={"campingCarPark"}
                    data-plasmic-override={overrides.campingCarPark}
                    alt={""}
                    className={classNames(sty.campingCarPark)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : "100%"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "auto"
                        : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: image409UcZuXo8ATm,
                      fullWidth: 485,
                      fullHeight: 90,
                      aspectRatio: 5.388889
                    }}
                  />

                  <PlasmicImg__
                    data-plasmic-name={"captainvet"}
                    data-plasmic-override={overrides.captainvet}
                    alt={""}
                    className={classNames(sty.captainvet)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : "100%"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "auto"
                        : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: captainVetToneLogoLightV2SvgKJm2YZnmWjUo,
                      fullWidth: 180,
                      fullHeight: 34,
                      aspectRatio: 5.294118
                    }}
                  />

                  <PlasmicImg__
                    data-plasmic-name={"nbte"}
                    data-plasmic-override={overrides.nbte}
                    alt={""}
                    className={classNames(sty.nbte)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : "100%"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "auto"
                        : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: image36UQLoTnT5Lyj,
                      fullWidth: 339,
                      fullHeight: 91,
                      aspectRatio: 3.725275
                    }}
                  />

                  <PlasmicImg__
                    data-plasmic-name={"cloudiam"}
                    data-plasmic-override={overrides.cloudiam}
                    alt={""}
                    className={classNames(sty.cloudiam)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : "100%"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "auto"
                        : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: image37I0Wn0XzV1VA,
                      fullWidth: 401,
                      fullHeight: 149,
                      aspectRatio: 2.691275
                    }}
                  />

                  <PlasmicImg__
                    data-plasmic-name={"abcm3"}
                    data-plasmic-override={overrides.abcm3}
                    alt={""}
                    className={classNames(sty.abcm3)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : "100%"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "auto"
                        : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: image33PqlLrZxKaEo,
                      fullWidth: 379,
                      fullHeight: 106,
                      aspectRatio: 3.575472
                    }}
                  />

                  <PlasmicImg__
                    data-plasmic-name={"francenuage"}
                    data-plasmic-override={overrides.francenuage}
                    alt={""}
                    className={classNames(sty.francenuage)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : "100%"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "auto"
                        : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: image35Kg9Ug8HS7BH9,
                      fullWidth: 413,
                      fullHeight: 153,
                      aspectRatio: 2.699346
                    }}
                  />

                  <PlasmicImg__
                    data-plasmic-name={"handipharm3"}
                    data-plasmic-override={overrides.handipharm3}
                    alt={""}
                    className={classNames(sty.handipharm3)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : "100%"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "auto"
                        : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: image3020JMqtErSmj,
                      fullWidth: 383,
                      fullHeight: 154,
                      aspectRatio: 2.487013
                    }}
                  />

                  <PlasmicImg__
                    data-plasmic-name={"smala3"}
                    data-plasmic-override={overrides.smala3}
                    alt={""}
                    className={classNames(sty.smala3)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : "100%"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "auto"
                        : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: image34U1EJgn6NsBp,
                      fullWidth: 199,
                      fullHeight: 82,
                      aspectRatio: 2.426829
                    }}
                  />

                  <PlasmicImg__
                    data-plasmic-name={"pharmaconfort"}
                    data-plasmic-override={overrides.pharmaconfort}
                    alt={""}
                    className={classNames(sty.pharmaconfort)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : "100%"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "auto"
                        : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: image32ApPfhKzKTna3,
                      fullWidth: 284,
                      fullHeight: 174,
                      aspectRatio: 1.632184
                    }}
                  />
                </div>
              ) : null}
            </section>
            <section
              data-plasmic-name={"defis"}
              data-plasmic-override={overrides.defis}
              className={classNames(projectcss.all, sty.defis)}
              id={"defis"}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__plnI
                )}
              >
                {"Vos d\u00e9fis de recrutement ? Nous avons la r\u00e9ponse."}
              </h2>
              <div className={classNames(projectcss.all, sty.freeBox__iKp2R)}>
                <Probleme
                  citation={
                    '"Le freelance qui dispara\u00eet ? J\'ai d\u00e9j\u00e0 donn\u00e9."'
                  }
                  className={classNames("__wab_instance", sty.probleme__h6Xp7)}
                  description={
                    "Nos freelances sont fiables et suivis. Le risque d'abandon est minimis\u00e9 par notre processus de s\u00e9lection et le soutien du mentor."
                  }
                  titre={"La non-fiabilit\u00e9"}
                >
                  <QuestionAnswerHelpSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__woFRm)}
                    role={"img"}
                  />
                </Probleme>
                <Probleme
                  citation={
                    '"Les CV sont beaux, mais la r\u00e9alit\u00e9 est autre."'
                  }
                  className={classNames("__wab_instance", sty.probleme__iublZ)}
                  description={
                    "Finie la perte de temps. Chaque freelance Netir est qualifi\u00e9 par nos experts et b\u00e9n\u00e9ficie d'un mentorat continu. Des comp\u00e9tences prouv\u00e9es, pas juste promises."
                  }
                  titre={"Le manque de comp\u00e9tence r\u00e9elle"}
                >
                  <LoupeSearchSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__gNw2C)}
                    role={"img"}
                  />
                </Probleme>
                <Probleme
                  citation={
                    '"Trouver le bon profil me prend une \u00e9ternit\u00e9."'
                  }
                  className={classNames("__wab_instance", sty.probleme__pRNr)}
                  description={
                    "Nous acc\u00e9l\u00e9rons votre sourcing. Acc\u00e9dez rapidement \u00e0 un vivier de talents tri\u00e9s sur le volet, pr\u00eats \u00e0 d\u00e9marrer."
                  }
                  titre={"Le temps de recrutement"}
                >
                  <HourglassEndSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__ahfUk)}
                    role={"img"}
                  />
                </Probleme>
                <Probleme
                  citation={
                    '"Entre les agences et les plateformes, le budget explose." '
                  }
                  className={classNames("__wab_instance", sty.probleme__bmEj)}
                  description={
                    "Netir offre un mod\u00e8le transparent et comp\u00e9titif. Des tarifs clairs, des contrats simplifi\u00e9s, et un service 360 pour vos projets."
                  }
                  titre={"Le co\u00fbt cach\u00e9 et la complexit\u00e9"}
                >
                  <MoneyBagSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__gCzTx)}
                    role={"img"}
                  />
                </Probleme>
              </div>
            </section>
            <section
              data-plasmic-name={"parcours"}
              data-plasmic-override={overrides.parcours}
              className={classNames(projectcss.all, sty.parcours)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__tvJf)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__jreYd
                  )}
                >
                  {"Trouvez votre expert en 3 \u00e9tapes claires."}
                </h2>
                <div
                  className={classNames(projectcss.all, sty.freeBox___0Vcvw)}
                >
                  <Parcours
                    className={classNames("__wab_instance", sty.parcours__fjUt)}
                    description={
                      "D\u00e9crivez votre projet et les comp\u00e9tences requises. Notre \u00e9quipe vous aide \u00e0 affiner votre demande pour un matching parfait."
                    }
                    titre={"Exprimez votre besoin"}
                  />

                  <Parcours
                    className={classNames(
                      "__wab_instance",
                      sty.parcours__tEjfz
                    )}
                    description={
                      "Nous vous pr\u00e9sentons une s\u00e9lection de freelances Netir, d\u00e9j\u00e0 valid\u00e9s et potentiellement accompagn\u00e9s par un mentor adapt\u00e9 \u00e0 votre projet."
                    }
                    etape={"2"}
                    titre={"Recevez des profils qualifi\u00e9s"}
                  />

                  <Parcours
                    className={classNames(
                      "__wab_instance",
                      sty.parcours__jXjKj
                    )}
                    description={
                      "Choisissez votre freelance, signez le contrat simplifi\u00e9, et suivez l'avancement. Nous assurons le support et la facturation pour vous."
                    }
                    etape={"3"}
                    titre={"Lancez votre projet en confiance"}
                  />
                </div>
              </div>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__hJjz0)}
                displayHeight={"250px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"250px"}
                loading={"lazy"}
                src={{
                  src: chevre2RemovebgPreviewPngO75IhK4K4VeR,
                  fullWidth: 427,
                  fullHeight: 585,
                  aspectRatio: undefined
                }}
              />
            </section>
            <section
              data-plasmic-name={"benefices"}
              data-plasmic-override={overrides.benefices}
              className={classNames(projectcss.all, sty.benefices)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__eEbV
                )}
              >
                {"Netir : Votre Partenaire pour la Performance.\t"}
              </h2>
              <div className={classNames(projectcss.all, sty.freeBox__vsuvU)}>
                <Probleme
                  citation={``}
                  className={classNames("__wab_instance", sty.probleme__xGeAz)}
                  description={
                    "Des freelances tri\u00e9s sur le volet et coach\u00e9s en continu par des experts. Vos projets sont entre de bonnes mains."
                  }
                  titre={"Qualit\u00e9 Garantie"}
                >
                  <MedalRibbonsStarSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__gowTe)}
                    role={"img"}
                  />
                </Probleme>
                <Probleme
                  citation={``}
                  className={classNames("__wab_instance", sty.probleme__jyeT9)}
                  description={
                    "Fini le sourcing chronophage. Acc\u00e9dez rapidement \u00e0 des talents pr\u00eats \u00e0 l'emploi. Concentrez-vous sur votre c\u0153ur de m\u00e9tier."
                  }
                  titre={"Gain de Temps Massif"}
                >
                  <TimerSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg___17B69)}
                    role={"img"}
                  />
                </Probleme>
                <Probleme
                  citation={``}
                  className={classNames("__wab_instance", sty.probleme___2PkOn)}
                  description={
                    "Adaptez vos ressources \u00e0 vos besoins r\u00e9els. Acc\u00e9dez \u00e0 des comp\u00e9tences sp\u00e9cifiques pour des dur\u00e9es d\u00e9finies, sans les contraintes de l'embauche classique."
                  }
                  titre={"Flexibilit\u00e9 Optimale"}
                >
                  <SettingSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__ppI74)}
                    role={"img"}
                  />
                </Probleme>
                <Probleme
                  citation={" "}
                  className={classNames("__wab_instance", sty.probleme__jtCoS)}
                  description={
                    "Devis, facturation, contrats... Netir g\u00e8re les aspects complexes pour vous. Moins de paperasse, plus d'efficacit\u00e9."
                  }
                  titre={"Simplicit\u00e9 Administrative"}
                >
                  <CheckFileSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__g838)}
                    role={"img"}
                  />
                </Probleme>
              </div>
            </section>
            <div
              data-plasmic-name={"testimonials"}
              data-plasmic-override={overrides.testimonials}
              className={classNames(projectcss.all, sty.testimonials)}
            >
              <div
                data-plasmic-name={"titre4"}
                data-plasmic-override={overrides.titre4}
                className={classNames(projectcss.all, sty.titre4)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__rsEzU
                  )}
                >
                  {
                    "Ils ont d\u00e9j\u00e0 boost\u00e9 leur activit\u00e9 avec Netir."
                  }
                </h2>
              </div>
              <div
                data-plasmic-name={"testimonial"}
                data-plasmic-override={overrides.testimonial}
                className={classNames(projectcss.all, sty.testimonial)}
              >
                <Testimonial
                  className={classNames(
                    "__wab_instance",
                    sty.testimonial__ymUlq
                  )}
                  img={{
                    src: geminiGeneratedImage8Nmavg8Nmavg8Nma2PngSZh7MgXkZfh4,
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["unnamedVariant"]
                      : undefined
                  }
                  name={"Marc V."}
                  review={
                    "Nous avons gagn\u00e9 un temps fou sur nos recrutements et la qualit\u00e9 des profils est incomparable. Les freelances Netir sont de v\u00e9ritables atouts pour nos projets."
                  }
                  starColor={"green"}
                  starCount={5}
                />

                <Testimonial
                  className={classNames(
                    "__wab_instance",
                    sty.testimonial__nxMbW
                  )}
                  img={{
                    src: geminiGeneratedImage8Nmavg8Nmavg8Nma1PngLn01WywmzPv3,
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["unnamedVariant"]
                      : undefined
                  }
                  name={"Omar B."}
                  review={
                    "La s\u00e9r\u00e9nit\u00e9 d'avoir un freelance non seulement comp\u00e9tent mais aussi accompagn\u00e9 par un mentor, c'est ce qui fait toute la diff\u00e9rence. Plus de stress, juste des r\u00e9sultats."
                  }
                  starCount={5}
                />

                <Testimonial
                  className={classNames(
                    "__wab_instance",
                    sty.testimonial__n0ULb
                  )}
                  img={{
                    src: geminiGeneratedImage8Nmavg8Nmavg8NmaPngFaQbk7IFwq,
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["unnamedVariant"]
                      : undefined
                  }
                  name={"Sarah D."}
                  review={
                    "Netir a r\u00e9volutionn\u00e9 notre recrutement de freelances. Plus de paperasse, des talents ultra-qualifi\u00e9s et coach\u00e9s, tout est d'une simplicit\u00e9 bluffante. C'est devenu notre solution privil\u00e9gi\u00e9e pour chaque projet important."
                  }
                  starColor={"blue"}
                  starCount={5}
                />
              </div>
            </div>
            <div
              data-plasmic-name={"callToAction1"}
              data-plasmic-override={overrides.callToAction1}
              className={classNames(projectcss.all, sty.callToAction1)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__mk9Pi)}>
                <div className={classNames(projectcss.all, sty.freeBox__vnyuQ)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__ecO0T
                    )}
                  >
                    {"Pr\u00eat \u00e0 recruter l'excellence sans les tracas ?"}
                  </h2>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__eNsvQ)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "150px"
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "250px"
                          : "340px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "150px"
                        : "250px"
                    }
                    loading={"lazy"}
                    src={{
                      src: entrepriseRemovebgPreviewPng0RJyLeW7L1L,
                      fullWidth: 500,
                      fullHeight: 500,
                      aspectRatio: undefined
                    }}
                  />

                  <ButtonPrimary
                    data-plasmic-name={"primary7"}
                    data-plasmic-override={overrides.primary7}
                    className={classNames("__wab_instance", sty.primary7)}
                    color={generateStateValueProp($state, [
                      "primary7",
                      "color"
                    ])}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pPs2Z
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Trouvez votre talent coach\u00e9 !"
                          : "Trouvez votre talent coach\u00e9 d\u00e8s maintenant !"}
                      </div>
                    }
                    linkTo={"netir.fr/sign-up"}
                    onColorChange2={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "primary7",
                        "color"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onTypeChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "primary7",
                        "type"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    type={generateStateValueProp($state, ["primary7", "type"])}
                  />
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"oldHero"}
              data-plasmic-override={overrides.oldHero}
              className={classNames(projectcss.all, sty.oldHero)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__gddjW)}>
                <div className={classNames(projectcss.all, sty.freeBox__t1Gzf)}>
                  <div
                    data-plasmic-name={"valueProposition"}
                    data-plasmic-override={overrides.valueProposition}
                    className={classNames(projectcss.all, sty.valueProposition)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fOfVv
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "tabletOnly") ? (
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <h1
                              className={classNames(
                                projectcss.all,
                                projectcss.h1,
                                projectcss.__wab_text,
                                sty.h1__s3Var
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "tabletOnly"
                              ) ? (
                                <React.Fragment>
                                  <React.Fragment>{"Des "}</React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{
                                      color: "var(--token-9HNAvI0pqHnB)"
                                    }}
                                  >
                                    {"freelances"}
                                  </span>
                                  <React.Fragment>
                                    {" mentor\u00e9s pour des "}
                                  </React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{
                                      color: "var(--token-9HNAvI0pqHnB)"
                                    }}
                                  >
                                    {"r\u00e9sultats"}
                                  </span>
                                  <React.Fragment>
                                    {" au sommet"}
                                  </React.Fragment>
                                </React.Fragment>
                              ) : (
                                "Votre projet m\u00e9rite les meilleurs freelances."
                              )}
                            </h1>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <h1
                              className={classNames(
                                projectcss.all,
                                projectcss.h1,
                                projectcss.__wab_text,
                                sty.h1__s3Var
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "tabletOnly"
                              ) ? (
                                <React.Fragment>
                                  <React.Fragment>{"Des "}</React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{
                                      color: "var(--token-9HNAvI0pqHnB)"
                                    }}
                                  >
                                    {"freelances"}
                                  </span>
                                  <React.Fragment>
                                    {" mentor\u00e9s pour des "}
                                  </React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{
                                      color: "var(--token-9HNAvI0pqHnB)"
                                    }}
                                  >
                                    {"r\u00e9sultats"}
                                  </span>
                                  <React.Fragment>
                                    {" au sommet"}
                                  </React.Fragment>
                                </React.Fragment>
                              ) : (
                                "Votre projet m\u00e9rite les meilleurs freelances."
                              )}
                            </h1>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      )}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nLuyb
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Faites confiance \u00e0 nos mentors, ils sauront vous proposer nos meilleurs freelances."
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "Faites confiance \u00e0 nos mentors, ils sauront vous proposer nos meilleurs freelances."
                          : "Chez Netir, acc\u00e9dez \u00e0 des freelances coach\u00e9s par des \nmentors, pour un impact direct dans vos r\u00e9sultats."}
                    </div>
                    <div
                      data-plasmic-name={"buttons2"}
                      data-plasmic-override={overrides.buttons2}
                      className={classNames(projectcss.all, sty.buttons2)}
                    >
                      {renderPlasmicSlot({
                        defaultContents: (
                          <ButtonOldHoverNetir
                            className={classNames(
                              "__wab_instance",
                              sty.buttonOldHoverNetir__lloCh
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__nRqtx
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___9GNm9
                                )}
                              >
                                {"Je rejoins Netir"}
                              </div>
                              <NIcons3Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ljTph
                                )}
                                role={"img"}
                              />
                            </div>
                          </ButtonOldHoverNetir>
                        ),
                        value: args.children
                      })}
                    </div>
                  </div>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ie1Qq)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "110px"
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "auto"
                          : "auto"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "30em"
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "30em"
                          : "30%"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100px"
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "100%"
                          : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: image628Qzovu50GBgC,
                      fullWidth: 684,
                      fullHeight: 771,
                      aspectRatio: 0.88716
                    }}
                  />
                </div>
              </div>
              {(() => {
                const child$Props = {
                  arrowColor: "#3C0E0E",
                  arrows: false,
                  autoplay: true,
                  autoplaySpeed: 0,
                  beforeChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "currentSlide",
                      ["sliderCarousel", "currentSlide"],
                      SliderWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  centerMode: true,
                  className: classNames("__wab_instance", sty.sliderCarousel),
                  cssEase: "linear",
                  fade: false,
                  initialSlide: generateStateValueProp($state, [
                    "sliderCarousel",
                    "currentSlide"
                  ]),
                  pauseOnHover: hasVariant(
                    globalVariants,
                    "screen",
                    "mobileOnly"
                  )
                    ? false
                    : false,
                  ref: ref => {
                    $refs["sliderCarousel"] = ref;
                  },
                  sliderScopeClassName: sty["sliderCarousel__slider"],
                  speed: hasVariant(globalVariants, "screen", "mobileOnly")
                    ? 2050
                    : 3000,
                  swipe: false,
                  variableWidth: true,
                  vertical: false
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "currentSlide",
                      plasmicStateName: "sliderCarousel.currentSlide"
                    }
                  ],
                  [],
                  SliderWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <SliderWrapper
                    data-plasmic-name={"sliderCarousel"}
                    data-plasmic-override={overrides.sliderCarousel}
                    {...child$Props}
                  >
                    <div
                      data-plasmic-name={"handipharm"}
                      data-plasmic-override={overrides.handipharm}
                      className={classNames(projectcss.all, sty.handipharm)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___3Iwqh)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "100px"
                            : "80px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "200px"
                            : "100%"
                        }
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "100%"
                            : "100%"
                        }
                        src={{
                          src: handipharmLogoWbKtOhWPwtiz,
                          fullWidth: 335,
                          fullHeight: 135,
                          aspectRatio: 2.481481
                        }}
                      />
                    </div>
                    <div
                      data-plasmic-name={"logoBig"}
                      data-plasmic-override={overrides.logoBig}
                      className={classNames(projectcss.all, sty.logoBig)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__s90OI)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "100px"
                            : "85px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "100%"
                            : "none"
                        }
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "120px"
                            : hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "100%"
                              : "auto"
                        }
                        src={{
                          src: logoBigXZpuT8Kgy8Eh,
                          fullWidth: 500,
                          fullHeight: 500,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      data-plasmic-name={"nobullshit"}
                      data-plasmic-override={overrides.nobullshit}
                      className={classNames(projectcss.all, sty.nobullshit)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__k8D3Y)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "106px"
                            : "80px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "100%"
                            : "100%"
                        }
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "100%"
                            : "100%"
                        }
                        src={{
                          src: nobullshitXgwL6ARlI0DP,
                          fullWidth: 766,
                          fullHeight: 326,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      data-plasmic-name={"cosikaLogo"}
                      data-plasmic-override={overrides.cosikaLogo}
                      className={classNames(projectcss.all, sty.cosikaLogo)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__xYh1Y)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "80px"
                            : hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "60px"
                              : "90px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "100%"
                            : "100%"
                        }
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "100%"
                            : "200px"
                        }
                        src={{
                          src: cosikaLogo2WE5FfyUbgaMx,
                          fullWidth: 1040,
                          fullHeight: 233,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      data-plasmic-name={"turquand2"}
                      data-plasmic-override={overrides.turquand2}
                      className={classNames(projectcss.all, sty.turquand2)}
                    >
                      <PlasmicImg__
                        data-plasmic-name={"turquand"}
                        data-plasmic-override={overrides.turquand}
                        alt={""}
                        className={classNames(sty.turquand)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "106px"
                            : "80px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "100%"
                            : "100%"
                        }
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "100%"
                            : "100%"
                        }
                        src={{
                          src: turaquand6Isdk8MaLFx9,
                          fullWidth: 400,
                          fullHeight: 400,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      data-plasmic-name={"smala"}
                      data-plasmic-override={overrides.smala}
                      className={classNames(projectcss.all, sty.smala)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__olkuX)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "106px"
                            : "80px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "120px"
                            : hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "100%"
                              : "100%"
                        }
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "100%"
                            : "100%"
                        }
                        src={{
                          src: smala2ZsSz5UizzlDx,
                          fullWidth: 368,
                          fullHeight: 163,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      data-plasmic-name={"cloudIam"}
                      data-plasmic-override={overrides.cloudIam}
                      className={classNames(projectcss.all, sty.cloudIam)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__t5Cwd)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "106px"
                            : "80px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "100%"
                            : "100%"
                        }
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "100%"
                            : "100%"
                        }
                        src={{
                          src: cloudIamPjUgCpGuMml0,
                          fullWidth: 812,
                          fullHeight: 307,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      data-plasmic-name={"pharmaConfort"}
                      data-plasmic-override={overrides.pharmaConfort}
                      className={classNames(projectcss.all, sty.pharmaConfort)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__d2WCj)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "106px"
                            : "80px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "100%"
                            : "100%"
                        }
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "100%"
                            : "100%"
                        }
                        src={{
                          src: phamaConfort0UPxsoChPv5Y,
                          fullWidth: 681,
                          fullHeight: 366,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      data-plasmic-name={"campingCar"}
                      data-plasmic-override={overrides.campingCar}
                      className={classNames(projectcss.all, sty.campingCar)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__tWsmd)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "106px"
                            : "80px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "100%"
                            : "100%"
                        }
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "100%"
                            : "100%"
                        }
                        src={{
                          src: campingCar2SNlYfWn9VXr,
                          fullWidth: 502,
                          fullHeight: 145,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      data-plasmic-name={"abcm"}
                      data-plasmic-override={overrides.abcm}
                      className={classNames(projectcss.all, sty.abcm)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___89Of4)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "106px"
                            : "80px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "100%"
                            : "100%"
                        }
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "100%"
                            : "100%"
                        }
                        src={{
                          src: abcmLogoNcQOw4GGoyu,
                          fullWidth: 427,
                          fullHeight: 162,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      data-plasmic-name={"franceNuage"}
                      data-plasmic-override={overrides.franceNuage}
                      className={classNames(projectcss.all, sty.franceNuage)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__xRwTn)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "106px"
                            : "80px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "none"
                            : hasVariant(globalVariants, "screen", "tabletOnly")
                              ? "100%"
                              : "100%"
                        }
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "100%"
                            : "100%"
                        }
                        src={{
                          src: franceNuageEytvfVu1LwPc,
                          fullWidth: 478,
                          fullHeight: 153,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                  </SliderWrapper>
                );
              })()}
            </div>
            <section
              data-plasmic-name={"_3Etapes"}
              data-plasmic-override={overrides._3Etapes}
              className={classNames(projectcss.all, sty._3Etapes)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__csHf)}>
                <div
                  data-plasmic-name={"photo2"}
                  data-plasmic-override={overrides.photo2}
                  className={classNames(projectcss.all, sty.photo2)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__tlAzg)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "228px"
                        : "450px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: entreprise2PngGdrpwiP3KOYn,
                      fullWidth: 1024,
                      fullHeight: 1024,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div
                  data-plasmic-name={"texte"}
                  data-plasmic-override={overrides.texte}
                  className={classNames(projectcss.all, sty.texte)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iB
                    )}
                  >
                    {
                      "Plus que 3 \u00e9tapes pour trouver le freelance id\u00e9al pour votre projet"
                    }
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tVbI)}
                  >
                    <HomepageEtapes
                      className={classNames(
                        "__wab_instance",
                        sty.homepageEtapes__e3E5I
                      )}
                    />

                    <HomepageEtapes
                      className={classNames(
                        "__wab_instance",
                        sty.homepageEtapes__xJvQw
                      )}
                      description={
                        "Nous vous aidons \u00e0 trouver les talents les plus adapt\u00e9s \u00e0 votre projet gr\u00e2ce \u00e0 nos crit\u00e8res de s\u00e9lection avanc\u00e9s."
                      }
                      titre={"S\u00e9lectionnez un freelance"}
                    />

                    <HomepageEtapes
                      _3={["unnamedVariant"]}
                      className={classNames(
                        "__wab_instance",
                        sty.homepageEtapes___3CMpb
                      )}
                      description={
                        "Obtenez des r\u00e9sultats d\u2019exception gr\u00e2ce \u00e0 des freelances accompagn\u00e9s par des mentors de haut niveau."
                      }
                      titre={"Livraison des r\u00e9sultats"}
                    />
                  </div>
                </div>
              </div>
              <PlasmicLink__
                data-plasmic-name={"bouton"}
                data-plasmic-override={overrides.bouton}
                className={classNames(projectcss.all, projectcss.a, sty.bouton)}
                component={Link}
                platform={"gatsby"}
              >
                {renderPlasmicSlot({
                  defaultContents: (
                    <ButtonOldHoverNetir
                      className={classNames(
                        "__wab_instance",
                        sty.buttonOldHoverNetir__vehh
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__keaea
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iqXi8
                          )}
                        >
                          {"Je rejoins Netir"}
                        </div>
                        <NIcons3Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___8LK54
                          )}
                          role={"img"}
                        />
                      </div>
                    </ButtonOldHoverNetir>
                  ),
                  value: args.slot
                })}
              </PlasmicLink__>
            </section>
            <section
              data-plasmic-name={"besoin"}
              data-plasmic-override={overrides.besoin}
              className={classNames(projectcss.all, sty.besoin)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pEvV
                )}
              >
                {"Tout ce dont votre entreprise a besoin."}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___0YSw)}>
                <Besoin
                  className={classNames("__wab_instance", sty.besoin__axFtv)}
                >
                  <CupStarSvgrepoCom1SvgIcon
                    className={classNames(projectcss.all, sty.svg__raAmv)}
                    role={"img"}
                  />
                </Besoin>
                <Besoin
                  className={classNames("__wab_instance", sty.besoin__pnHy8)}
                  description={
                    "Collaborez avec des freelances coach\u00e9s par des mentors, pour des projets r\u00e9ussis \u00e0 coup s\u00fbr. "
                  }
                  titre={"Des r\u00e9sultats d\u2019exception"}
                >
                  <Icon6Icon
                    className={classNames(projectcss.all, sty.svg__xBuTj)}
                    role={"img"}
                  />
                </Besoin>
                <Besoin
                  className={classNames("__wab_instance", sty.besoin___9KiJc)}
                  description={
                    "Devis, factures, paiements s\u00e9curis\u00e9s : tout est int\u00e9gr\u00e9, simple et avec 0% de commission."
                  }
                  titre={"Simplification administrative"}
                >
                  <TaskSquareSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__xf43D)}
                    role={"img"}
                  />
                </Besoin>
              </div>
            </section>
            <section
              data-plasmic-name={"service"}
              data-plasmic-override={overrides.service}
              className={classNames(projectcss.all, sty.service)}
            >
              <div
                data-plasmic-name={"titre2"}
                data-plasmic-override={overrides.titre2}
                className={classNames(projectcss.all, sty.titre2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__f5Pyk
                  )}
                >
                  {"Les services propos\u00e9s par les freelances Netir"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__j0ZCl)}>
                <Metiers
                  className={classNames("__wab_instance", sty.metiers__tB4Pp)}
                >
                  <InterfaceUiLayoutAppSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__fwSZg)}
                    role={"img"}
                  />
                </Metiers>
                <Metiers
                  className={classNames("__wab_instance", sty.metiers__kRsxz)}
                  nom={"Vid\u00e9os UGC"}
                >
                  <VideoSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__rMqsg)}
                    role={"img"}
                  />
                </Metiers>
                <Metiers
                  className={classNames("__wab_instance", sty.metiers__ra94G)}
                  nom={"Montage"}
                >
                  <FilmSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__lhdF)}
                    role={"img"}
                  />
                </Metiers>
                <Metiers
                  className={classNames("__wab_instance", sty.metiers__jspGl)}
                  nom={"Design"}
                >
                  <PaletteSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__mpsAg)}
                    role={"img"}
                  />
                </Metiers>
                <Metiers
                  className={classNames("__wab_instance", sty.metiers__bLb6I)}
                  nom={"Web 3"}
                >
                  <WebLinkSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__jvbtN)}
                    role={"img"}
                  />
                </Metiers>
                <Metiers
                  className={classNames("__wab_instance", sty.metiers___6A4Dt)}
                  nom={"Marketing digital"}
                >
                  <MegaphoneLineSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__zpyqW)}
                    role={"img"}
                  />
                </Metiers>
                <Metiers
                  className={classNames("__wab_instance", sty.metiers__rXiEv)}
                  nom={"Photographe"}
                >
                  <PhotoCameraSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__jGbQi)}
                    role={"img"}
                  />
                </Metiers>
                <Metiers
                  className={classNames("__wab_instance", sty.metiers__mskmJ)}
                  nom={"Data analyst"}
                >
                  <Chart2SvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg___7BPT)}
                    role={"img"}
                  />
                </Metiers>
                <Metiers
                  className={classNames("__wab_instance", sty.metiers__wjBgy)}
                  nom={"Strat\u00e9gie d'emailing"}
                >
                  <MailSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__f1UiF)}
                    role={"img"}
                  />
                </Metiers>
                <Metiers
                  className={classNames("__wab_instance", sty.metiers__pQwQb)}
                  nom={"Developpement web"}
                >
                  <CodeTechDevSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__hk3Ol)}
                    role={"img"}
                  />
                </Metiers>
                <Metiers
                  className={classNames("__wab_instance", sty.metiers__cPl7T)}
                  nom={"Expert en r\u00e9f\u00e9rencement"}
                >
                  <SeoSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__jgrS)}
                    role={"img"}
                  />
                </Metiers>
                <Metiers
                  className={classNames("__wab_instance", sty.metiers__tom6)}
                  nom={"Community Management"}
                >
                  <ShareSvgrepoCom1SvgIcon
                    className={classNames(projectcss.all, sty.svg__sSjoO)}
                    role={"img"}
                  />
                </Metiers>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__ctcCv)}>
                <Services
                  data-plasmic-name={"services"}
                  data-plasmic-override={overrides.services}
                  className={classNames("__wab_instance", sty.services)}
                  data={generateStateValueProp($state, ["services", "data"])}
                  design={generateStateValueProp($state, [
                    "services",
                    "design"
                  ])}
                  expRef={generateStateValueProp($state, [
                    "services",
                    "expRef"
                  ])}
                  montage={generateStateValueProp($state, [
                    "services",
                    "montage"
                  ])}
                  onDataChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services",
                      "data"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onDesignChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services",
                      "design"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onExpRefChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services",
                      "expRef"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onMontageChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services",
                      "montage"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                />

                <Services
                  data-plasmic-name={"services2"}
                  data-plasmic-override={overrides.services2}
                  className={classNames("__wab_instance", sty.services2)}
                  data={generateStateValueProp($state, ["services2", "data"])}
                  design={generateStateValueProp($state, [
                    "services2",
                    "design"
                  ])}
                  expRef={generateStateValueProp($state, [
                    "services2",
                    "expRef"
                  ])}
                  img={{
                    src: image71YHd3MeBiHa,
                    fullWidth: 242,
                    fullHeight: 188,
                    aspectRatio: 1.287234
                  }}
                  montage={generateStateValueProp($state, [
                    "services2",
                    "montage"
                  ])}
                  onDataChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services2",
                      "data"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onDesignChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services2",
                      "design"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onExpRefChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services2",
                      "expRef"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onMontageChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services2",
                      "montage"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  texte={"Vid\u00e9os UGC"}
                  ugc={["ugcWebDsign"]}
                />

                <Services
                  data-plasmic-name={"services3"}
                  data-plasmic-override={overrides.services3}
                  className={classNames("__wab_instance", sty.services3)}
                  data={generateStateValueProp($state, ["services3", "data"])}
                  design={generateStateValueProp($state, [
                    "services3",
                    "design"
                  ])}
                  expRef={generateStateValueProp($state, [
                    "services3",
                    "expRef"
                  ])}
                  img={{
                    src: image72ZcFu6ZxR5GO,
                    fullWidth: 242,
                    fullHeight: 188,
                    aspectRatio: 1.287234
                  }}
                  managmt={["management"]}
                  montage={generateStateValueProp($state, [
                    "services3",
                    "montage"
                  ])}
                  onDataChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services3",
                      "data"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onDesignChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services3",
                      "design"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onExpRefChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services3",
                      "expRef"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onMontageChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services3",
                      "montage"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  texte={"Community management"}
                  ugc={[]}
                />

                <Services
                  data-plasmic-name={"services4"}
                  data-plasmic-override={overrides.services4}
                  className={classNames("__wab_instance", sty.services4)}
                  data={generateStateValueProp($state, ["services4", "data"])}
                  design={generateStateValueProp($state, [
                    "services4",
                    "design"
                  ])}
                  expRef={generateStateValueProp($state, [
                    "services4",
                    "expRef"
                  ])}
                  img={{
                    src: image73Bhe584Jy2H4S,
                    fullWidth: 242,
                    fullHeight: 188,
                    aspectRatio: 1.287234
                  }}
                  montage={generateStateValueProp($state, [
                    "services4",
                    "montage"
                  ])}
                  onDataChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services4",
                      "data"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onDesignChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services4",
                      "design"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onExpRefChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services4",
                      "expRef"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onMontageChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services4",
                      "montage"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  texte={"Montage"}
                  ugc={[]}
                />

                <Services
                  data-plasmic-name={"services5"}
                  data-plasmic-override={overrides.services5}
                  className={classNames("__wab_instance", sty.services5)}
                  data={generateStateValueProp($state, ["services5", "data"])}
                  design={generateStateValueProp($state, [
                    "services5",
                    "design"
                  ])}
                  devweb={["developpmentWeb"]}
                  expRef={generateStateValueProp($state, [
                    "services5",
                    "expRef"
                  ])}
                  img={{
                    src: image74FhLcVvIfKkoG,
                    fullWidth: 242,
                    fullHeight: 188,
                    aspectRatio: 1.287234
                  }}
                  montage={generateStateValueProp($state, [
                    "services5",
                    "montage"
                  ])}
                  onDataChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services5",
                      "data"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onDesignChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services5",
                      "design"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onExpRefChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services5",
                      "expRef"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onMontageChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services5",
                      "montage"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  texte={"D\u00e9veloppement web"}
                  ugc={[]}
                />

                <Services
                  data-plasmic-name={"services6"}
                  data-plasmic-override={overrides.services6}
                  className={classNames("__wab_instance", sty.services6)}
                  data={generateStateValueProp($state, ["services6", "data"])}
                  design={generateStateValueProp($state, [
                    "services6",
                    "design"
                  ])}
                  devweb={[]}
                  expRef={generateStateValueProp($state, [
                    "services6",
                    "expRef"
                  ])}
                  img={{
                    src: image75A1LJXftwluYq,
                    fullWidth: 242,
                    fullHeight: 188,
                    aspectRatio: 1.287234
                  }}
                  montage={generateStateValueProp($state, [
                    "services6",
                    "montage"
                  ])}
                  onDataChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services6",
                      "data"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onDesignChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services6",
                      "design"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onExpRefChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services6",
                      "expRef"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onMontageChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services6",
                      "montage"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  texte={"Design"}
                  ugc={[]}
                />

                <Services
                  data-plasmic-name={"services7"}
                  data-plasmic-override={overrides.services7}
                  className={classNames("__wab_instance", sty.services7)}
                  data={generateStateValueProp($state, ["services7", "data"])}
                  design={generateStateValueProp($state, [
                    "services7",
                    "design"
                  ])}
                  devweb={[]}
                  emailing={["emailling"]}
                  expRef={generateStateValueProp($state, [
                    "services7",
                    "expRef"
                  ])}
                  img={{
                    src: image883LtAm7Zxsvkk,
                    fullWidth: 242,
                    fullHeight: 188,
                    aspectRatio: 1.287234
                  }}
                  montage={generateStateValueProp($state, [
                    "services7",
                    "montage"
                  ])}
                  onDataChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services7",
                      "data"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onDesignChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services7",
                      "design"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onExpRefChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services7",
                      "expRef"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onMontageChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services7",
                      "montage"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  texte={"Strat\u00e9gie d'emailing;"}
                  ugc={[]}
                />

                <Services
                  data-plasmic-name={"services8"}
                  data-plasmic-override={overrides.services8}
                  className={classNames("__wab_instance", sty.services8)}
                  data={generateStateValueProp($state, ["services8", "data"])}
                  design={generateStateValueProp($state, [
                    "services8",
                    "design"
                  ])}
                  devweb={[]}
                  emailing={[]}
                  expRef={generateStateValueProp($state, [
                    "services8",
                    "expRef"
                  ])}
                  img={{
                    src: image77WPaLUkTfyml,
                    fullWidth: 242,
                    fullHeight: 188,
                    aspectRatio: 1.287234
                  }}
                  marketing={["marketing"]}
                  montage={generateStateValueProp($state, [
                    "services8",
                    "montage"
                  ])}
                  onDataChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services8",
                      "data"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onDesignChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services8",
                      "design"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onExpRefChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services8",
                      "expRef"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onMontageChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services8",
                      "montage"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  texte={"Marketing digital"}
                  ugc={[]}
                />

                <Services
                  data-plasmic-name={"services9"}
                  data-plasmic-override={overrides.services9}
                  className={classNames("__wab_instance", sty.services9)}
                  data={generateStateValueProp($state, ["services9", "data"])}
                  design={generateStateValueProp($state, [
                    "services9",
                    "design"
                  ])}
                  devweb={[]}
                  emailing={[]}
                  expRef={generateStateValueProp($state, [
                    "services9",
                    "expRef"
                  ])}
                  img={{
                    src: image780NNwx5FtKKa,
                    fullWidth: 242,
                    fullHeight: 188,
                    aspectRatio: 1.287234
                  }}
                  marketing={[]}
                  montage={generateStateValueProp($state, [
                    "services9",
                    "montage"
                  ])}
                  onDataChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services9",
                      "data"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onDesignChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services9",
                      "design"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onExpRefChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services9",
                      "expRef"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onMontageChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services9",
                      "montage"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  photo={["photo"]}
                  texte={"Photographie"}
                  ugc={[]}
                />

                <Services
                  data-plasmic-name={"services10"}
                  data-plasmic-override={overrides.services10}
                  className={classNames("__wab_instance", sty.services10)}
                  data={generateStateValueProp($state, ["services10", "data"])}
                  design={generateStateValueProp($state, [
                    "services10",
                    "design"
                  ])}
                  devweb={[]}
                  emailing={[]}
                  expRef={generateStateValueProp($state, [
                    "services10",
                    "expRef"
                  ])}
                  img={{
                    src: image799B9UKdYx8LOk,
                    fullWidth: 242,
                    fullHeight: 188,
                    aspectRatio: 1.287234
                  }}
                  marketing={[]}
                  montage={generateStateValueProp($state, [
                    "services10",
                    "montage"
                  ])}
                  onDataChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services10",
                      "data"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onDesignChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services10",
                      "design"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onExpRefChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services10",
                      "expRef"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onMontageChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services10",
                      "montage"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  photo={[]}
                  texte={"Data analyst"}
                  ugc={[]}
                />

                <Services
                  data-plasmic-name={"services11"}
                  data-plasmic-override={overrides.services11}
                  className={classNames("__wab_instance", sty.services11)}
                  data={generateStateValueProp($state, ["services11", "data"])}
                  design={generateStateValueProp($state, [
                    "services11",
                    "design"
                  ])}
                  devweb={[]}
                  emailing={[]}
                  expRef={generateStateValueProp($state, [
                    "services11",
                    "expRef"
                  ])}
                  img={{
                    src: image89Z7Sz6A2YHj4H,
                    fullWidth: 242,
                    fullHeight: 188,
                    aspectRatio: 1.287234
                  }}
                  marketing={[]}
                  montage={generateStateValueProp($state, [
                    "services11",
                    "montage"
                  ])}
                  onDataChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services11",
                      "data"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onDesignChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services11",
                      "design"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onExpRefChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services11",
                      "expRef"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onMontageChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services11",
                      "montage"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  photo={[]}
                  texte={"Expert en r\u00e9f\u00e9rencement"}
                  ugc={[]}
                />

                <Services
                  data-plasmic-name={"services12"}
                  data-plasmic-override={overrides.services12}
                  className={classNames("__wab_instance", sty.services12)}
                  data={generateStateValueProp($state, ["services12", "data"])}
                  design={generateStateValueProp($state, [
                    "services12",
                    "design"
                  ])}
                  devweb={[]}
                  emailing={[]}
                  expRef={generateStateValueProp($state, [
                    "services12",
                    "expRef"
                  ])}
                  img={{
                    src: image90Jlb7I7EpS7Xi,
                    fullWidth: 242,
                    fullHeight: 188,
                    aspectRatio: 1.287234
                  }}
                  marketing={[]}
                  montage={generateStateValueProp($state, [
                    "services12",
                    "montage"
                  ])}
                  onDataChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services12",
                      "data"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onDesignChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services12",
                      "design"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onExpRefChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services12",
                      "expRef"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onMontageChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "services12",
                      "montage"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  photo={[]}
                  texte={"Web 3"}
                  ugc={[]}
                  web3={["web"]}
                />
              </div>
            </section>
            <div
              data-plasmic-name={"faq"}
              data-plasmic-override={overrides.faq}
              className={classNames(projectcss.all, sty.faq)}
            >
              <div
                data-plasmic-name={"titre7"}
                data-plasmic-override={overrides.titre7}
                className={classNames(projectcss.all, sty.titre7)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__z8U20
                  )}
                >
                  {"Vos projets, nos talents : Ce qu'il faut savoir sur Netir."}
                </h2>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__sevnk)}>
                <div className={classNames(projectcss.all, sty.freeBox___5UpM)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___7Lv5W)}
                  >
                    <Faq
                      answer={
                        "Tous nos freelances sont rigoureusement qualifi\u00e9s par notre \u00e9quipe d'experts avant d'int\u00e9grer la plateforme. De plus, chaque freelance est accompagn\u00e9 par un mentor senior qui assure un suivi continu, garantissant ainsi l'excellence des livrables et la fiabilit\u00e9 de l'engagement."
                      }
                      className={classNames("__wab_instance", sty.faq___7DTOv)}
                      question={
                        "Comment Netir assure-t-il la qualit\u00e9 et la fiabilit\u00e9 des freelances ? "
                      }
                    />

                    <Faq
                      answer={
                        "Netir applique une commission de 3% sur le montant des missions c\u00f4t\u00e9 entreprise. Ce co\u00fbt est transparent et vous donne acc\u00e8s \u00e0 des profils d'\u00e9lite, coach\u00e9s et suivis, sans les frais cach\u00e9s ou les lourdeurs des agences traditionnelles."
                      }
                      className={classNames("__wab_instance", sty.faq__lsTKl)}
                      question={
                        "Quel est le co\u00fbt pour une entreprise sur Netir ?"
                      }
                    />

                    <Faq
                      answer={
                        "Nous savons que votre temps est pr\u00e9cieux. Gr\u00e2ce \u00e0 notre processus de qualification et de matching optimis\u00e9, nous vous pr\u00e9sentons une s\u00e9lection de profils pertinents en un temps record, souvent sous 48 \u00e0 72 heures, pour vous permettre de d\u00e9marrer vos projets sans d\u00e9lai."
                      }
                      className={classNames("__wab_instance", sty.faq___1FoN)}
                      question={
                        "Combien de temps faut-il pour trouver un freelance sur Netir ?"
                      }
                    />

                    <Faq
                      answer={
                        "Oui, nous simplifions tout. Netir s'occupe de la contractualisation avec le freelance, de la gestion des devis et de la facturation. Vous recevez une seule facture simplifi\u00e9e, ce qui vous lib\u00e8re des contraintes administratives et juridiques."
                      }
                      className={classNames("__wab_instance", sty.faq___9Ccie)}
                      question={
                        "Netir g\u00e8re-t-il la partie administrative et contractuelle ? "
                      }
                    />

                    <Faq
                      answer={
                        "La satisfaction est notre priorit\u00e9. En cas de difficult\u00e9, notre \u00e9quipe est l\u00e0 pour vous accompagner. Gr\u00e2ce au suivi du mentor, les probl\u00e8mes sont souvent anticip\u00e9s. Si un conflit persiste, nous intervenons en m\u00e9diation et proposons des solutions, y compris le remplacement du freelance si n\u00e9cessaire."
                      }
                      className={classNames("__wab_instance", sty.faq___0GihH)}
                      question={
                        "Que se passe-t-il en cas de probl\u00e8me ou d'insatisfaction avec un freelance ?  "
                      }
                    />

                    <Faq
                      answer={
                        "Absolument. Au-del\u00e0 des points r\u00e9guliers que vous aurez directement avec le freelance, vous avez l'assurance qu'un mentor expert accompagne votre projet en coulisses, veillant \u00e0 la mont\u00e9e en comp\u00e9tence du freelance et \u00e0 la qualit\u00e9 des livrables."
                      }
                      className={classNames("__wab_instance", sty.faq__nidck)}
                      question={
                        "Puis-je suivre la progression du freelance sur mon projet ?   "
                      }
                    />
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__mn1Ps)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__vipXt)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "100%"
                        : "auto"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "100%"
                        : "80%"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "20px"
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "100%"
                          : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: geminiGeneratedImage8R11Yk8R11Yk8R11RemovebgPreviewPngBZ8T737YaQxk,
                      fullWidth: 427,
                      fullHeight: 585,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__bzra3)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"285px"}
                loading={"lazy"}
                src={{
                  src: image41MvZbyZuDk41,
                  fullWidth: 720,
                  fullHeight: 997,
                  aspectRatio: 0.722166
                }}
              />
            </div>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  body: [
    "body",
    "wrapper",
    "hero",
    "siteHeader",
    "buttonButton7",
    "interactionEffect10",
    "value2",
    "titre3",
    "h4",
    "boutons4",
    "primary5",
    "primary6",
    "socialProof",
    "sliderCarousel4",
    "handipharm2",
    "logoBig2",
    "nobullshit2",
    "cosikaLogo2",
    "turquand3",
    "turquand4",
    "smala2",
    "cloudIam2",
    "pharmaConfort2",
    "campingCar2",
    "abcm2",
    "franceNuage2",
    "logosrow",
    "big",
    "campingCarPark",
    "captainvet",
    "nbte",
    "cloudiam",
    "abcm3",
    "francenuage",
    "handipharm3",
    "smala3",
    "pharmaconfort",
    "defis",
    "parcours",
    "benefices",
    "testimonials",
    "titre4",
    "testimonial",
    "callToAction1",
    "primary7",
    "oldHero",
    "valueProposition",
    "buttons2",
    "sliderCarousel",
    "handipharm",
    "logoBig",
    "nobullshit",
    "cosikaLogo",
    "turquand2",
    "turquand",
    "smala",
    "cloudIam",
    "pharmaConfort",
    "campingCar",
    "abcm",
    "franceNuage",
    "_3Etapes",
    "photo2",
    "texte",
    "bouton",
    "besoin",
    "service",
    "titre2",
    "services",
    "services2",
    "services3",
    "services4",
    "services5",
    "services6",
    "services7",
    "services8",
    "services9",
    "services10",
    "services11",
    "services12",
    "faq",
    "titre7",
    "footer"
  ],
  wrapper: [
    "wrapper",
    "hero",
    "siteHeader",
    "buttonButton7",
    "interactionEffect10",
    "value2",
    "titre3",
    "h4",
    "boutons4",
    "primary5",
    "primary6",
    "socialProof",
    "sliderCarousel4",
    "handipharm2",
    "logoBig2",
    "nobullshit2",
    "cosikaLogo2",
    "turquand3",
    "turquand4",
    "smala2",
    "cloudIam2",
    "pharmaConfort2",
    "campingCar2",
    "abcm2",
    "franceNuage2",
    "logosrow",
    "big",
    "campingCarPark",
    "captainvet",
    "nbte",
    "cloudiam",
    "abcm3",
    "francenuage",
    "handipharm3",
    "smala3",
    "pharmaconfort",
    "defis",
    "parcours",
    "benefices",
    "testimonials",
    "titre4",
    "testimonial",
    "callToAction1",
    "primary7",
    "oldHero",
    "valueProposition",
    "buttons2",
    "sliderCarousel",
    "handipharm",
    "logoBig",
    "nobullshit",
    "cosikaLogo",
    "turquand2",
    "turquand",
    "smala",
    "cloudIam",
    "pharmaConfort",
    "campingCar",
    "abcm",
    "franceNuage",
    "_3Etapes",
    "photo2",
    "texte",
    "bouton",
    "besoin",
    "service",
    "titre2",
    "services",
    "services2",
    "services3",
    "services4",
    "services5",
    "services6",
    "services7",
    "services8",
    "services9",
    "services10",
    "services11",
    "services12",
    "faq",
    "titre7",
    "footer"
  ],
  hero: [
    "hero",
    "siteHeader",
    "buttonButton7",
    "interactionEffect10",
    "value2",
    "titre3",
    "h4",
    "boutons4",
    "primary5",
    "primary6"
  ],
  siteHeader: ["siteHeader", "buttonButton7", "interactionEffect10"],
  buttonButton7: ["buttonButton7", "interactionEffect10"],
  interactionEffect10: ["interactionEffect10"],
  value2: ["value2", "titre3", "h4", "boutons4", "primary5", "primary6"],
  titre3: ["titre3", "h4", "boutons4", "primary5", "primary6"],
  h4: ["h4"],
  boutons4: ["boutons4", "primary5", "primary6"],
  primary5: ["primary5"],
  primary6: ["primary6"],
  socialProof: [
    "socialProof",
    "sliderCarousel4",
    "handipharm2",
    "logoBig2",
    "nobullshit2",
    "cosikaLogo2",
    "turquand3",
    "turquand4",
    "smala2",
    "cloudIam2",
    "pharmaConfort2",
    "campingCar2",
    "abcm2",
    "franceNuage2",
    "logosrow",
    "big",
    "campingCarPark",
    "captainvet",
    "nbte",
    "cloudiam",
    "abcm3",
    "francenuage",
    "handipharm3",
    "smala3",
    "pharmaconfort"
  ],
  sliderCarousel4: [
    "sliderCarousel4",
    "handipharm2",
    "logoBig2",
    "nobullshit2",
    "cosikaLogo2",
    "turquand3",
    "turquand4",
    "smala2",
    "cloudIam2",
    "pharmaConfort2",
    "campingCar2",
    "abcm2",
    "franceNuage2"
  ],
  handipharm2: ["handipharm2"],
  logoBig2: ["logoBig2"],
  nobullshit2: ["nobullshit2"],
  cosikaLogo2: ["cosikaLogo2"],
  turquand3: ["turquand3", "turquand4"],
  turquand4: ["turquand4"],
  smala2: ["smala2"],
  cloudIam2: ["cloudIam2"],
  pharmaConfort2: ["pharmaConfort2"],
  campingCar2: ["campingCar2"],
  abcm2: ["abcm2"],
  franceNuage2: ["franceNuage2"],
  logosrow: [
    "logosrow",
    "big",
    "campingCarPark",
    "captainvet",
    "nbte",
    "cloudiam",
    "abcm3",
    "francenuage",
    "handipharm3",
    "smala3",
    "pharmaconfort"
  ],
  big: ["big"],
  campingCarPark: ["campingCarPark"],
  captainvet: ["captainvet"],
  nbte: ["nbte"],
  cloudiam: ["cloudiam"],
  abcm3: ["abcm3"],
  francenuage: ["francenuage"],
  handipharm3: ["handipharm3"],
  smala3: ["smala3"],
  pharmaconfort: ["pharmaconfort"],
  defis: ["defis"],
  parcours: ["parcours"],
  benefices: ["benefices"],
  testimonials: ["testimonials", "titre4", "testimonial"],
  titre4: ["titre4"],
  testimonial: ["testimonial"],
  callToAction1: ["callToAction1", "primary7"],
  primary7: ["primary7"],
  oldHero: [
    "oldHero",
    "valueProposition",
    "buttons2",
    "sliderCarousel",
    "handipharm",
    "logoBig",
    "nobullshit",
    "cosikaLogo",
    "turquand2",
    "turquand",
    "smala",
    "cloudIam",
    "pharmaConfort",
    "campingCar",
    "abcm",
    "franceNuage"
  ],
  valueProposition: ["valueProposition", "buttons2"],
  buttons2: ["buttons2"],
  sliderCarousel: [
    "sliderCarousel",
    "handipharm",
    "logoBig",
    "nobullshit",
    "cosikaLogo",
    "turquand2",
    "turquand",
    "smala",
    "cloudIam",
    "pharmaConfort",
    "campingCar",
    "abcm",
    "franceNuage"
  ],
  handipharm: ["handipharm"],
  logoBig: ["logoBig"],
  nobullshit: ["nobullshit"],
  cosikaLogo: ["cosikaLogo"],
  turquand2: ["turquand2", "turquand"],
  turquand: ["turquand"],
  smala: ["smala"],
  cloudIam: ["cloudIam"],
  pharmaConfort: ["pharmaConfort"],
  campingCar: ["campingCar"],
  abcm: ["abcm"],
  franceNuage: ["franceNuage"],
  _3Etapes: ["_3Etapes", "photo2", "texte", "bouton"],
  photo2: ["photo2"],
  texte: ["texte"],
  bouton: ["bouton"],
  besoin: ["besoin"],
  service: [
    "service",
    "titre2",
    "services",
    "services2",
    "services3",
    "services4",
    "services5",
    "services6",
    "services7",
    "services8",
    "services9",
    "services10",
    "services11",
    "services12"
  ],
  titre2: ["titre2"],
  services: ["services"],
  services2: ["services2"],
  services3: ["services3"],
  services4: ["services4"],
  services5: ["services5"],
  services6: ["services6"],
  services7: ["services7"],
  services8: ["services8"],
  services9: ["services9"],
  services10: ["services10"],
  services11: ["services11"],
  services12: ["services12"],
  faq: ["faq", "titre7"],
  titre7: ["titre7"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  body: "div";
  wrapper: "div";
  hero: "div";
  siteHeader: typeof SiteHeader;
  buttonButton7: typeof ButtonPrimary;
  interactionEffect10: "div";
  value2: "div";
  titre3: "div";
  h4: "h4";
  boutons4: "div";
  primary5: typeof ButtonPrimary;
  primary6: typeof ButtonPrimary;
  socialProof: "section";
  sliderCarousel4: typeof SliderWrapper;
  handipharm2: "div";
  logoBig2: "div";
  nobullshit2: "div";
  cosikaLogo2: "div";
  turquand3: "div";
  turquand4: typeof PlasmicImg__;
  smala2: "div";
  cloudIam2: "div";
  pharmaConfort2: "div";
  campingCar2: "div";
  abcm2: "div";
  franceNuage2: "div";
  logosrow: "div";
  big: typeof PlasmicImg__;
  campingCarPark: typeof PlasmicImg__;
  captainvet: typeof PlasmicImg__;
  nbte: typeof PlasmicImg__;
  cloudiam: typeof PlasmicImg__;
  abcm3: typeof PlasmicImg__;
  francenuage: typeof PlasmicImg__;
  handipharm3: typeof PlasmicImg__;
  smala3: typeof PlasmicImg__;
  pharmaconfort: typeof PlasmicImg__;
  defis: "section";
  parcours: "section";
  benefices: "section";
  testimonials: "div";
  titre4: "div";
  testimonial: "div";
  callToAction1: "div";
  primary7: typeof ButtonPrimary;
  oldHero: "div";
  valueProposition: "div";
  buttons2: "div";
  sliderCarousel: typeof SliderWrapper;
  handipharm: "div";
  logoBig: "div";
  nobullshit: "div";
  cosikaLogo: "div";
  turquand2: "div";
  turquand: typeof PlasmicImg__;
  smala: "div";
  cloudIam: "div";
  pharmaConfort: "div";
  campingCar: "div";
  abcm: "div";
  franceNuage: "div";
  _3Etapes: "section";
  photo2: "div";
  texte: "div";
  bouton: "a";
  besoin: "section";
  service: "section";
  titre2: "div";
  services: typeof Services;
  services2: typeof Services;
  services3: typeof Services;
  services4: typeof Services;
  services5: typeof Services;
  services6: typeof Services;
  services7: typeof Services;
  services8: typeof Services;
  services9: typeof Services;
  services10: typeof Services;
  services11: typeof Services;
  services12: typeof Services;
  faq: "div";
  titre7: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLandingCompanies__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLandingCompanies__VariantsArgs;
    args?: PlasmicLandingCompanies__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicLandingCompanies__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicLandingCompanies__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLandingCompanies__ArgProps,
          internalVariantPropNames: PlasmicLandingCompanies__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLandingCompanies__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "body") {
    func.displayName = "PlasmicLandingCompanies";
  } else {
    func.displayName = `PlasmicLandingCompanies.${nodeName}`;
  }
  return func;
}

export const PlasmicLandingCompanies = Object.assign(
  // Top-level PlasmicLandingCompanies renders the root element
  makeNodeComponent("body"),
  {
    // Helper components rendering sub-elements
    wrapper: makeNodeComponent("wrapper"),
    hero: makeNodeComponent("hero"),
    siteHeader: makeNodeComponent("siteHeader"),
    buttonButton7: makeNodeComponent("buttonButton7"),
    interactionEffect10: makeNodeComponent("interactionEffect10"),
    value2: makeNodeComponent("value2"),
    titre3: makeNodeComponent("titre3"),
    h4: makeNodeComponent("h4"),
    boutons4: makeNodeComponent("boutons4"),
    primary5: makeNodeComponent("primary5"),
    primary6: makeNodeComponent("primary6"),
    socialProof: makeNodeComponent("socialProof"),
    sliderCarousel4: makeNodeComponent("sliderCarousel4"),
    handipharm2: makeNodeComponent("handipharm2"),
    logoBig2: makeNodeComponent("logoBig2"),
    nobullshit2: makeNodeComponent("nobullshit2"),
    cosikaLogo2: makeNodeComponent("cosikaLogo2"),
    turquand3: makeNodeComponent("turquand3"),
    turquand4: makeNodeComponent("turquand4"),
    smala2: makeNodeComponent("smala2"),
    cloudIam2: makeNodeComponent("cloudIam2"),
    pharmaConfort2: makeNodeComponent("pharmaConfort2"),
    campingCar2: makeNodeComponent("campingCar2"),
    abcm2: makeNodeComponent("abcm2"),
    franceNuage2: makeNodeComponent("franceNuage2"),
    logosrow: makeNodeComponent("logosrow"),
    big: makeNodeComponent("big"),
    campingCarPark: makeNodeComponent("campingCarPark"),
    captainvet: makeNodeComponent("captainvet"),
    nbte: makeNodeComponent("nbte"),
    cloudiam: makeNodeComponent("cloudiam"),
    abcm3: makeNodeComponent("abcm3"),
    francenuage: makeNodeComponent("francenuage"),
    handipharm3: makeNodeComponent("handipharm3"),
    smala3: makeNodeComponent("smala3"),
    pharmaconfort: makeNodeComponent("pharmaconfort"),
    defis: makeNodeComponent("defis"),
    parcours: makeNodeComponent("parcours"),
    benefices: makeNodeComponent("benefices"),
    testimonials: makeNodeComponent("testimonials"),
    titre4: makeNodeComponent("titre4"),
    testimonial: makeNodeComponent("testimonial"),
    callToAction1: makeNodeComponent("callToAction1"),
    primary7: makeNodeComponent("primary7"),
    oldHero: makeNodeComponent("oldHero"),
    valueProposition: makeNodeComponent("valueProposition"),
    buttons2: makeNodeComponent("buttons2"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    handipharm: makeNodeComponent("handipharm"),
    logoBig: makeNodeComponent("logoBig"),
    nobullshit: makeNodeComponent("nobullshit"),
    cosikaLogo: makeNodeComponent("cosikaLogo"),
    turquand2: makeNodeComponent("turquand2"),
    turquand: makeNodeComponent("turquand"),
    smala: makeNodeComponent("smala"),
    cloudIam: makeNodeComponent("cloudIam"),
    pharmaConfort: makeNodeComponent("pharmaConfort"),
    campingCar: makeNodeComponent("campingCar"),
    abcm: makeNodeComponent("abcm"),
    franceNuage: makeNodeComponent("franceNuage"),
    _3Etapes: makeNodeComponent("_3Etapes"),
    photo2: makeNodeComponent("photo2"),
    texte: makeNodeComponent("texte"),
    bouton: makeNodeComponent("bouton"),
    besoin: makeNodeComponent("besoin"),
    service: makeNodeComponent("service"),
    titre2: makeNodeComponent("titre2"),
    services: makeNodeComponent("services"),
    services2: makeNodeComponent("services2"),
    services3: makeNodeComponent("services3"),
    services4: makeNodeComponent("services4"),
    services5: makeNodeComponent("services5"),
    services6: makeNodeComponent("services6"),
    services7: makeNodeComponent("services7"),
    services8: makeNodeComponent("services8"),
    services9: makeNodeComponent("services9"),
    services10: makeNodeComponent("services10"),
    services11: makeNodeComponent("services11"),
    services12: makeNodeComponent("services12"),
    faq: makeNodeComponent("faq"),
    titre7: makeNodeComponent("titre7"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicLandingCompanies
    internalVariantProps: PlasmicLandingCompanies__VariantProps,
    internalArgProps: PlasmicLandingCompanies__ArgProps,

    // Page metadata
    pageMetadata: {
      title:
        "Netir - Les meilleurs freelances et mentors pour votre entreprise",
      description:
        "Netir est la plateforme qui vous garantie la qualité des freelance grâce aux recommandations des mentors.",
      ogImageSrc:
        "https://site-assets.plasmic.app/9f3005b94278521a011c47609ecbb96a.png",
      canonical: "https://www.netir.fr/entreprise"
    }
  }
);

export default PlasmicLandingCompanies;
/* prettier-ignore-end */
