/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: emjpN_Inho3r

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdMenu } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicNavNavItem.module.css"; // plasmic-import: emjpN_Inho3r/css

import BusinessFinanceInvoiceSvgrepoComSvgIcon from "./icons/PlasmicIcon__BusinessFinanceInvoiceSvgrepoComSvg"; // plasmic-import: dSOi0A0BQDwy/icon

createPlasmicElementProxy;

export type PlasmicNavNavItem__VariantMembers = {
  selectedItem: "selectedItem";
};
export type PlasmicNavNavItem__VariantsArgs = {
  selectedItem?: SingleBooleanChoiceArg<"selectedItem">;
};
type VariantPropType = keyof PlasmicNavNavItem__VariantsArgs;
export const PlasmicNavNavItem__VariantProps = new Array<VariantPropType>(
  "selectedItem"
);

export type PlasmicNavNavItem__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicNavNavItem__ArgsType;
export const PlasmicNavNavItem__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicNavNavItem__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  menu?: Flex__<typeof AntdMenu>;
};

export interface DefaultNavNavItemProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  selectedItem?: SingleBooleanChoiceArg<"selectedItem">;
  className?: string;
}

const $$ = {};

function PlasmicNavNavItem__RenderFunc(props: {
  variants: PlasmicNavNavItem__VariantsArgs;
  args: PlasmicNavNavItem__ArgsType;
  overrides: PlasmicNavNavItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectedItem",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.selectedItem
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootselectedItem]: hasVariant(
            $state,
            "selectedItem",
            "selectedItem"
          )
        }
      )}
      onClick={async event => {
        const $steps = {};

        $steps["updateSelectedItem"] = true
          ? (() => {
              const actionArgs = {
                vgroup: "selectedItem",
                operation: 2,
                value: "selectedItem"
              };
              return (({ vgroup, value }) => {
                if (typeof value === "string") {
                  value = [value];
                }

                const oldValue = $stateGet($state, vgroup);
                $stateSet($state, vgroup, !oldValue);
                return !oldValue;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateSelectedItem"] != null &&
          typeof $steps["updateSelectedItem"] === "object" &&
          typeof $steps["updateSelectedItem"].then === "function"
        ) {
          $steps["updateSelectedItem"] = await $steps["updateSelectedItem"];
        }
      }}
    >
      <div
        className={classNames(projectcss.all, sty.column__q8EuA, {
          [sty.columnselectedItem__q8EuA8J8MJ]: hasVariant(
            $state,
            "selectedItem",
            "selectedItem"
          )
        })}
      >
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <BusinessFinanceInvoiceSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg___1CaSc)}
                role={"img"}
              />
            ),

            value: args.children
          })}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.column___5Fxyf)}>
        <AntdMenu
          data-plasmic-name={"menu"}
          data-plasmic-override={overrides.menu}
          className={classNames("__wab_instance", sty.menu)}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <AntdMenuItem
                className={classNames("__wab_instance", sty.menuItem___94Fo2)}
                key={"menuItemKey1"}
                onClick={async () => {
                  const $steps = {};

                  $steps["goToFreelanceMissions"] = true
                    ? (() => {
                        const actionArgs = {};
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __gatsbyNavigate(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToFreelanceMissions"] != null &&
                    typeof $steps["goToFreelanceMissions"] === "object" &&
                    typeof $steps["goToFreelanceMissions"].then === "function"
                  ) {
                    $steps["goToFreelanceMissions"] =
                      await $steps["goToFreelanceMissions"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ianun
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 400 }}
                    >
                      {"Missions"}
                    </span>
                  </React.Fragment>
                </div>
              </AntdMenuItem>
            ),
            value: args.slot
          })}
        </AntdMenu>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "menu"],
  freeBox: ["freeBox"],
  menu: ["menu"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  menu: typeof AntdMenu;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavNavItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavNavItem__VariantsArgs;
    args?: PlasmicNavNavItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicNavNavItem__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicNavNavItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavNavItem__ArgProps,
          internalVariantPropNames: PlasmicNavNavItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavNavItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavNavItem";
  } else {
    func.displayName = `PlasmicNavNavItem.${nodeName}`;
  }
  return func;
}

export const PlasmicNavNavItem = Object.assign(
  // Top-level PlasmicNavNavItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    menu: makeNodeComponent("menu"),

    // Metadata about props expected for PlasmicNavNavItem
    internalVariantProps: PlasmicNavNavItem__VariantProps,
    internalArgProps: PlasmicNavNavItem__ArgProps
  }
);

export default PlasmicNavNavItem;
/* prettier-ignore-end */
