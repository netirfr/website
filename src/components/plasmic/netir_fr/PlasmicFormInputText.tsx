/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: J2UHUqLjRbeJ

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicFormInputText.module.css"; // plasmic-import: J2UHUqLjRbeJ/css

createPlasmicElementProxy;

export type PlasmicFormInputText__VariantMembers = {};
export type PlasmicFormInputText__VariantsArgs = {};
type VariantPropType = keyof PlasmicFormInputText__VariantsArgs;
export const PlasmicFormInputText__VariantProps = new Array<VariantPropType>();

export type PlasmicFormInputText__ArgsType = {
  placeholder?: string;
  content?: string;
};
type ArgPropType = keyof PlasmicFormInputText__ArgsType;
export const PlasmicFormInputText__ArgProps = new Array<ArgPropType>(
  "placeholder",
  "content"
);

export type PlasmicFormInputText__OverridesType = {
  input?: Flex__<typeof AntdInput>;
};

export interface DefaultFormInputTextProps {
  placeholder?: string;
  content?: string;
  className?: string;
}

const $$ = {};

function PlasmicFormInputText__RenderFunc(props: {
  variants: PlasmicFormInputText__VariantsArgs;
  args: PlasmicFormInputText__ArgsType;
  overrides: PlasmicFormInputText__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props["content"],

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (() => {
    const child$Props = {
      className: classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.input
      ),
      onChange: async (...eventArgs: any) => {
        generateStateOnChangePropForCodeComponents(
          $state,
          "value",
          ["input", "value"],
          AntdInput_Helpers
        ).apply(null, eventArgs);
      },
      placeholder: ``,
      value: generateStateValueProp($state, ["input", "value"])
    };
    initializeCodeComponentStates(
      $state,
      [
        {
          name: "value",
          plasmicStateName: "input.value"
        }
      ],
      [],
      AntdInput_Helpers ?? {},
      child$Props
    );

    return (
      <AntdInput
        data-plasmic-name={"input"}
        data-plasmic-override={overrides.input}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        {...child$Props}
      />
    );
  })() as React.ReactElement | null;
}

const PlasmicDescendants = {
  input: ["input"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  input: typeof AntdInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFormInputText__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFormInputText__VariantsArgs;
    args?: PlasmicFormInputText__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicFormInputText__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicFormInputText__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFormInputText__ArgProps,
          internalVariantPropNames: PlasmicFormInputText__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFormInputText__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "input") {
    func.displayName = "PlasmicFormInputText";
  } else {
    func.displayName = `PlasmicFormInputText.${nodeName}`;
  }
  return func;
}

export const PlasmicFormInputText = Object.assign(
  // Top-level PlasmicFormInputText renders the root element
  makeNodeComponent("input"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicFormInputText
    internalVariantProps: PlasmicFormInputText__VariantProps,
    internalArgProps: PlasmicFormInputText__ArgProps
  }
);

export default PlasmicFormInputText;
/* prettier-ignore-end */
