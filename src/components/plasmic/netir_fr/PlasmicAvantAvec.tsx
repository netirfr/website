/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: FHocaI7UELd6

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicAvantAvec.module.css"; // plasmic-import: FHocaI7UELd6/css

import image82Od8SmSclO9H7 from "./images/image82.svg"; // plasmic-import: OD8SMSclO9h7/picture
import image84Qmkfl6NAg8L8 from "./images/image84.svg"; // plasmic-import: Qmkfl6NAg8l8/picture
import image83GdE6ZY0XS20 from "./images/image83.svg"; // plasmic-import: gd-e6zY0xS20/picture
import image85O5UxanaE60Ba from "./images/image85.svg"; // plasmic-import: o5UxanaE60ba/picture
import image86KunSbvDoLw19 from "./images/image86.svg"; // plasmic-import: KUNSbvDOLw19/picture
import image87FbygyqhtC4Ac from "./images/image87.svg"; // plasmic-import: FbygyqhtC4ac/picture

createPlasmicElementProxy;

export type PlasmicAvantAvec__VariantMembers = {
  onoff: "onoff";
};
export type PlasmicAvantAvec__VariantsArgs = {
  onoff?: SingleBooleanChoiceArg<"onoff">;
};
type VariantPropType = keyof PlasmicAvantAvec__VariantsArgs;
export const PlasmicAvantAvec__VariantProps = new Array<VariantPropType>(
  "onoff"
);

export type PlasmicAvantAvec__ArgsType = {};
type ArgPropType = keyof PlasmicAvantAvec__ArgsType;
export const PlasmicAvantAvec__ArgProps = new Array<ArgPropType>();

export type PlasmicAvantAvec__OverridesType = {
  avant?: Flex__<"div">;
  avec2?: Flex__<"div">;
};

export interface DefaultAvantAvecProps {
  onoff?: SingleBooleanChoiceArg<"onoff">;
  className?: string;
}

const $$ = {};

function PlasmicAvantAvec__RenderFunc(props: {
  variants: PlasmicAvantAvec__VariantsArgs;
  args: PlasmicAvantAvec__ArgsType;
  overrides: PlasmicAvantAvec__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "onoff",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.onoff
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"avant"}
      data-plasmic-override={overrides.avant}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.avant,
        { [sty.avantonoff]: hasVariant($state, "onoff", "onoff") }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__zcyb2, {
          [sty.freeBoxonoff__zcyb2Zz27S]: hasVariant($state, "onoff", "onoff")
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__evTds
          )}
        >
          {"Avant Netir"}
        </div>
        <PlasmicLink__
          className={classNames(
            projectcss.all,
            projectcss.a,
            projectcss.__wab_text,
            sty.link__kDdRv
          )}
          component={Link}
          onClick={async event => {
            const $steps = {};

            $steps["updateOnoff"] = true
              ? (() => {
                  const actionArgs = {
                    vgroup: "onoff",
                    operation: 4,
                    value: "onoff"
                  };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    $stateSet($state, vgroup, true);
                    return true;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateOnoff"] != null &&
              typeof $steps["updateOnoff"] === "object" &&
              typeof $steps["updateOnoff"].then === "function"
            ) {
              $steps["updateOnoff"] = await $steps["updateOnoff"];
            }
          }}
          platform={"gatsby"}
        >
          {"Avec Netir"}
        </PlasmicLink__>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__pBozy, {
          [sty.freeBoxonoff__pBozyzz27S]: hasVariant($state, "onoff", "onoff")
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__lk55)}>
          <div className={classNames(projectcss.all, sty.freeBox__ywqVm)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__do00L
              )}
            >
              {"76% des entreprises"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sY4Vz
              )}
            >
              {
                "ne trouvent pas de freelances \u00e0 la hauteur de leurs attentes."
              }
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__d9Zzc)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__qQdvk)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "auto"
                  : "100%"
              }
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={
                hasVariant(globalVariants, "screen", "tabletOnly")
                  ? {
                      src: image84Qmkfl6NAg8L8,
                      fullWidth: 667,
                      fullHeight: 449,
                      aspectRatio: 1.485523
                    }
                  : {
                      src: image82Od8SmSclO9H7,
                      fullWidth: 667,
                      fullHeight: 449,
                      aspectRatio: 1.485523
                    }
              }
            />

            <div className={classNames(projectcss.all, sty.freeBox__pvkD4)} />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__g2Hzh
              )}
            >
              {hasVariant(globalVariants, "screen", "tabletOnly")
                ? "\u201cPour avoir travaill\u00e9 avec plusieurs freelances, je faisais beaucoup d\u2019aller-retours et je n\u2019\u00e9tais pas 100% satisfaite des r\u00e9sultats.\u201d"
                : "\u201cChaque semaine, on passe des heures sur la gestion des freelances alors qu\u2019on pourrait avancer sur nos projets.\u201d"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__hHhRv)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mUgz
              )}
            >
              {"7 entreprises sur 10 "}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__okbcy
              )}
            >
              {
                "d\u00e9clarent trouver le processus de s\u00e9lection d\u2019un freelance trop long et fastidieux."
              }
            </div>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___5W2Vc)}>
          <div className={classNames(projectcss.all, sty.freeBox__mZxEx)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__gXc1W)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "auto"
                  : "100%"
              }
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={
                hasVariant(globalVariants, "screen", "tabletOnly")
                  ? {
                      src: image82Od8SmSclO9H7,
                      fullWidth: 667,
                      fullHeight: 449,
                      aspectRatio: 1.485523
                    }
                  : {
                      src: image84Qmkfl6NAg8L8,
                      fullWidth: 667,
                      fullHeight: 449,
                      aspectRatio: 1.485523
                    }
              }
            />

            <div className={classNames(projectcss.all, sty.freeBox__jllDu)} />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__amIqI
              )}
            >
              {hasVariant(globalVariants, "screen", "tabletOnly")
                ? "\u201cChaque semaine, on passe des heures sur la gestion des freelances alors qu\u2019on pourrait avancer sur nos projets.\u201d"
                : "\u201cPour avoir travaill\u00e9 avec plusieurs freelances, je faisais beaucoup d\u2019aller-retours et je n\u2019\u00e9tais pas 100% satisfaite des r\u00e9sultats.\u201d"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__v4TYa)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sY4Bb
              )}
            >
              {"40% des entreprises"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___42Fzo
              )}
            >
              {
                "d\u00e9clarent perdre jusqu'\u00e0 5h/semaine sur la gestion administrative des freelances."
              }
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__hvEsd)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__z1ZtY)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: image83GdE6ZY0XS20,
                fullWidth: 544,
                fullHeight: 442,
                aspectRatio: 1.230769
              }}
            />

            <div className={classNames(projectcss.all, sty.freeBox__wqsv7)} />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nwuEi
              )}
            >
              {
                "\u201cEntre les recherches, les \u00e9changes et les validations, trouver un freelance prend toujours plus de temps que pr\u00e9vu.\u201d"
              }
            </div>
          </div>
        </div>
        {(hasVariant(globalVariants, "screen", "tabletOnly") ? true : false) ? (
          <div className={classNames(projectcss.all, sty.freeBox___7NNc1)}>
            <div className={classNames(projectcss.all, sty.freeBox__ejUgh)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___3Lgmk)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "auto"
                    : "100%"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                loading={"lazy"}
                src={{
                  src: image83GdE6ZY0XS20,
                  fullWidth: 544,
                  fullHeight: 442,
                  aspectRatio: 1.230769
                }}
              />

              <div className={classNames(projectcss.all, sty.freeBox__eGlh2)} />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qkNbl
                )}
              >
                {hasVariant(globalVariants, "screen", "tabletOnly")
                  ? "\u201cEntre les recherches, les \u00e9changes et les validations, trouver un freelance prend toujours plus de temps que pr\u00e9vu.\u201d"
                  : "\u201cPour avoir travaill\u00e9 avec plusieurs freelances, je faisais beaucoup d\u2019aller-retours et je n\u2019\u00e9tais pas 100% satisfaite des r\u00e9sultats.\u201d"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___9B33T)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lkRi7
                )}
              >
                {"7 entreprises sur 10 "}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__g13Bj
                )}
              >
                {
                  "d\u00e9clarent trouver le processus de s\u00e9lection d\u2019un freelance trop long et fastidieux."
                }
              </div>
            </div>
          </div>
        ) : null}
      </div>
      <div
        data-plasmic-name={"avec2"}
        data-plasmic-override={overrides.avec2}
        className={classNames(projectcss.all, sty.avec2, {
          [sty.avec2onoff]: hasVariant($state, "onoff", "onoff")
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__agT3)}>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link___2HHjp,
              {
                [sty.linkonoff___2HHjpZz27S]: hasVariant(
                  $state,
                  "onoff",
                  "onoff"
                )
              }
            )}
            component={Link}
            onClick={async event => {
              const $steps = {};

              $steps["updateOnoff"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "onoff",
                      operation: 6,
                      value: "onoff"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      $stateSet($state, vgroup, false);
                      return false;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateOnoff"] != null &&
                typeof $steps["updateOnoff"] === "object" &&
                typeof $steps["updateOnoff"].then === "function"
              ) {
                $steps["updateOnoff"] = await $steps["updateOnoff"];
              }
            }}
            platform={"gatsby"}
          >
            {"Avant Netir"}
          </PlasmicLink__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___2HdWr,
              {
                [sty.textonoff___2HdWrzz27S]: hasVariant(
                  $state,
                  "onoff",
                  "onoff"
                )
              }
            )}
          >
            {"Avec Netir"}
          </div>
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__cpiDf, {
            [sty.freeBoxonoff__cpiDfzz27S]: hasVariant($state, "onoff", "onoff")
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__aVm, {
              [sty.freeBoxonoff__aVmzz27S]: hasVariant($state, "onoff", "onoff")
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xglGu,
                {
                  [sty.textonoff__xglGuZz27S]: hasVariant(
                    $state,
                    "onoff",
                    "onoff"
                  )
                }
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 500 }}
                  >
                    {"9 entreprises sur 10"}
                  </span>
                </React.Fragment>
              ) : hasVariant(globalVariants, "screen", "tabletOnly") ? (
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 500 }}
                  >
                    {"9 entreprises sur 10"}
                  </span>
                </React.Fragment>
              ) : (
                "9 entreprises sur 10"
              )}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6FwcP,
                {
                  [sty.textonoff___6FwcPzz27S]: hasVariant(
                    $state,
                    "onoff",
                    "onoff"
                  )
                }
              )}
            >
              {
                "remarquent une r\u00e9elle am\u00e9lioration de leurs r\u00e9sultats avec Netir."
              }
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__hMFhR, {
              [sty.freeBoxonoff__hMFhRzz27S]: hasVariant(
                $state,
                "onoff",
                "onoff"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__y5Qto,
                {
                  [sty.textonoff__y5QtoZz27S]: hasVariant(
                    $state,
                    "onoff",
                    "onoff"
                  )
                }
              )}
            >
              {
                "\u201c100% de nos projets ont \u00e9t\u00e9 livr\u00e9s \u00e0 temps et avec une qualit\u00e9 exceptionnelle.\u201d"
              }
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__i2Lcm, {
                [sty.freeBoxonoff__i2LcmZz27S]: hasVariant(
                  $state,
                  "onoff",
                  "onoff"
                )
              })}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__olqb1, {
                [sty.imgonoff__olqb1Zz27S]: hasVariant($state, "onoff", "onoff")
              })}
              displayHeight={
                hasVariant($state, "onoff", "onoff") &&
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "auto"
                  : hasVariant($state, "onoff", "onoff") &&
                      hasVariant(globalVariants, "screen", "tabletOnly")
                    ? "100%"
                    : hasVariant(globalVariants, "screen", "tabletOnly")
                      ? "100%"
                      : "auto"
              }
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={
                hasVariant($state, "onoff", "onoff") &&
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? {
                      src: image85O5UxanaE60Ba,
                      fullWidth: 667,
                      fullHeight: 449,
                      aspectRatio: 1.485523
                    }
                  : {
                      src: image85O5UxanaE60Ba,
                      fullWidth: 667,
                      fullHeight: 449,
                      aspectRatio: 1.485523
                    }
              }
            />
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox___4Ol6P, {
              [sty.freeBoxonoff___4Ol6Pzz27S]: hasVariant(
                $state,
                "onoff",
                "onoff"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fkQqm
              )}
            >
              {"95% des entreprises"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vUTA
              )}
            >
              {
                "trouvent le freelance id\u00e9al pour leur mission dans les 48h."
              }
            </div>
          </div>
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__rDDht, {
            [sty.freeBoxonoff__rDDhtZz27S]: hasVariant($state, "onoff", "onoff")
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__wwQAz, {
              [sty.freeBoxonoff__wwQAzZz27S]: hasVariant(
                $state,
                "onoff",
                "onoff"
              )
            })}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__raLMl, {
                [sty.imgonoff__raLMlZz27S]: hasVariant($state, "onoff", "onoff")
              })}
              displayHeight={
                hasVariant($state, "onoff", "onoff") &&
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "100%"
                  : "100%"
              }
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: image86KunSbvDoLw19,
                fullWidth: 667,
                fullHeight: 449,
                aspectRatio: 1.485523
              }}
            />

            <div
              className={classNames(projectcss.all, sty.freeBox__u48Fw, {
                [sty.freeBoxonoff__u48Fwzz27S]: hasVariant(
                  $state,
                  "onoff",
                  "onoff"
                )
              })}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mJvWj,
                {
                  [sty.textonoff__mJvWjzz27S]: hasVariant(
                    $state,
                    "onoff",
                    "onoff"
                  )
                }
              )}
            >
              {
                "\u201cAvec l\u2019outil de facturation automatique de Netir, tout est simple et rapide. Ce temps gagn\u00e9 me permet de me concentrer sur d\u2019autres missions.\u201d"
              }
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__mfazE)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__d0XZh,
                {
                  [sty.textonoff__d0XZhzz27S]: hasVariant(
                    $state,
                    "onoff",
                    "onoff"
                  )
                }
              )}
            >
              {hasVariant(globalVariants, "screen", "tabletOnly")
                ? "95% des entreprises"
                : "15 heures par mois"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nrtS4,
                {
                  [sty.textonoff__nrtS4Zz27S]: hasVariant(
                    $state,
                    "onoff",
                    "onoff"
                  )
                }
              )}
            >
              {hasVariant(globalVariants, "screen", "tabletOnly")
                ? "trouvent le freelance id\u00e9al pour leur mission dans les 48h."
                : "de gagn\u00e9es en moyenne gr\u00e2ce au support administratif de Netir."}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__bwxZb)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__kO64E, {
                [sty.imgonoff__kO64EZz27S]: hasVariant($state, "onoff", "onoff")
              })}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"auto"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: image87FbygyqhtC4Ac,
                fullWidth: 544,
                fullHeight: 442,
                aspectRatio: 1.230769
              }}
            />

            <div className={classNames(projectcss.all, sty.freeBox___4Vaxj)} />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1ZNsT
              )}
            >
              {
                "\u201cGr\u00e2ce \u00e0 la plateforme Netir, j\u2019ai pu trouv\u00e9 un freelance, le freelance qui correspondait le mieux \u00e0 tous mes crit\u00e8res.\u201d"
              }
            </div>
          </div>
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__ufmSu, {
            [sty.freeBoxonoff__ufmSuZz27S]: hasVariant($state, "onoff", "onoff")
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__wBvjD, {
              [sty.freeBoxonoff__wBvjDzz27S]: hasVariant(
                $state,
                "onoff",
                "onoff"
              )
            })}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__n3LI, {
                [sty.imgonoff__n3LIZz27S]: hasVariant($state, "onoff", "onoff")
              })}
              displayHeight={
                hasVariant($state, "onoff", "onoff") &&
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "auto"
                  : "100%"
              }
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={
                hasVariant(globalVariants, "screen", "tabletOnly")
                  ? {
                      src: image87FbygyqhtC4Ac,
                      fullWidth: 544,
                      fullHeight: 442,
                      aspectRatio: 1.230769
                    }
                  : {
                      src: image85O5UxanaE60Ba,
                      fullWidth: 667,
                      fullHeight: 449,
                      aspectRatio: 1.485523
                    }
              }
            />

            <div
              className={classNames(projectcss.all, sty.freeBox__zTHcQ, {
                [sty.freeBoxonoff__zTHcQzz27S]: hasVariant(
                  $state,
                  "onoff",
                  "onoff"
                )
              })}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1PKo9,
                {
                  [sty.textonoff___1PKo9Zz27S]: hasVariant(
                    $state,
                    "onoff",
                    "onoff"
                  )
                }
              )}
            >
              {
                "\u201c100% de nos projets ont \u00e9t\u00e9 livr\u00e9s \u00e0 temps et avec une qualit\u00e9 exceptionnelle.\u201d"
              }
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__oyU9W)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1LWws
              )}
            >
              {hasVariant(globalVariants, "screen", "tabletOnly")
                ? "15 heures par mois"
                : "9 entreprises sur 10"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dc7Sc
              )}
            >
              {hasVariant(globalVariants, "screen", "tabletOnly")
                ? "de gagn\u00e9es en moyenne gr\u00e2ce au support administratif de Netir."
                : "remarquent une r\u00e9elle am\u00e9lioration de leurs r\u00e9sultats avec Netir."}
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__l5Ctt, {
              [sty.freeBoxonoff__l5Cttzz27S]: hasVariant(
                $state,
                "onoff",
                "onoff"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fcXz
              )}
            >
              {"95% des entreprises"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zurJp
              )}
            >
              {
                "trouvent le freelance id\u00e9al pour leur mission dans les 48h."
              }
            </div>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  avant: ["avant", "avec2"],
  avec2: ["avec2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  avant: "div";
  avec2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAvantAvec__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAvantAvec__VariantsArgs;
    args?: PlasmicAvantAvec__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicAvantAvec__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicAvantAvec__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAvantAvec__ArgProps,
          internalVariantPropNames: PlasmicAvantAvec__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAvantAvec__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "avant") {
    func.displayName = "PlasmicAvantAvec";
  } else {
    func.displayName = `PlasmicAvantAvec.${nodeName}`;
  }
  return func;
}

export const PlasmicAvantAvec = Object.assign(
  // Top-level PlasmicAvantAvec renders the root element
  makeNodeComponent("avant"),
  {
    // Helper components rendering sub-elements
    avec2: makeNodeComponent("avec2"),

    // Metadata about props expected for PlasmicAvantAvec
    internalVariantProps: PlasmicAvantAvec__VariantProps,
    internalArgProps: PlasmicAvantAvec__ArgProps
  }
);

export default PlasmicAvantAvec;
/* prettier-ignore-end */
