/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: zZCk6RKHLwKs

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicButtonOldMission.module.css"; // plasmic-import: zZCk6RKHLwKs/css

import NIcons3Icon from "./icons/PlasmicIcon__NIcons3"; // plasmic-import: ZzsUrvDAoxUM/icon
import _4476914ForwardInterfaceMobileNextUiIconSvgRcrLcg7SHsu9 from "./images/_4476914ForwardInterfaceMobileNextUiIconSvg.svg"; // plasmic-import: RcrLCG7sHSU9/picture

createPlasmicElementProxy;

export type PlasmicButtonOldMission__VariantMembers = {
  secondary: "second";
};
export type PlasmicButtonOldMission__VariantsArgs = {
  secondary?: SingleChoiceArg<"second">;
};
type VariantPropType = keyof PlasmicButtonOldMission__VariantsArgs;
export const PlasmicButtonOldMission__VariantProps = new Array<VariantPropType>(
  "secondary"
);

export type PlasmicButtonOldMission__ArgsType = {
  content?: string;
  fleche?: React.ComponentProps<typeof PlasmicImg__>["src"];
  target?: string;
  trackingId?: string;
  labelMentor?: string;
  onClick?: (event: any) => void;
};
type ArgPropType = keyof PlasmicButtonOldMission__ArgsType;
export const PlasmicButtonOldMission__ArgProps = new Array<ArgPropType>(
  "content",
  "fleche",
  "target",
  "trackingId",
  "labelMentor",
  "onClick"
);

export type PlasmicButtonOldMission__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  text?: Flex__<"div">;
  svg?: Flex__<"svg">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultButtonOldMissionProps {
  content?: string;
  fleche?: React.ComponentProps<typeof PlasmicImg__>["src"];
  target?: string;
  trackingId?: string;
  labelMentor?: string;
  onClick?: (event: any) => void;
  secondary?: SingleChoiceArg<"second">;
  className?: string;
}

const $$ = {};

function PlasmicButtonOldMission__RenderFunc(props: {
  variants: PlasmicButtonOldMission__VariantsArgs;
  args: PlasmicButtonOldMission__ArgsType;
  overrides: PlasmicButtonOldMission__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          content: "Creer une mission",
          fleche: {
            src: _4476914ForwardInterfaceMobileNextUiIconSvgRcrLcg7SHsu9,
            fullWidth: 32,
            fullHeight: 32,
            aspectRatio: 1
          },
          labelMentor: "Creer un plan"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "secondary",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.secondary
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootsecondary_second]: hasVariant($state, "secondary", "second")
        }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
        onClick={async event => {
          const $steps = {};
        }}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.textsecondary_second]: hasVariant(
                $state,
                "secondary",
                "second"
              )
            }
          )}
          onClick={args.onClick}
        >
          {hasVariant(globalVariants, "screen", "mobileOnly") ? (
            <React.Fragment>
              {(() => {
                try {
                  return $props.content;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Button";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          ) : (
            <React.Fragment>
              {(() => {
                try {
                  return $props.content;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Button";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          )}
        </div>
        <NIcons3Icon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />
      </div>
      <PlasmicImg__
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img, {
          [sty.imgsecondary_second]: hasVariant($state, "secondary", "second")
        })}
        displayHeight={"auto"}
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"20px"}
        loading={"lazy"}
        src={args.fleche}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "text", "svg", "img"],
  freeBox: ["freeBox", "text", "svg"],
  text: ["text"],
  svg: ["svg"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  text: "div";
  svg: "svg";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButtonOldMission__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButtonOldMission__VariantsArgs;
    args?: PlasmicButtonOldMission__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicButtonOldMission__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicButtonOldMission__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicButtonOldMission__ArgProps,
          internalVariantPropNames: PlasmicButtonOldMission__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicButtonOldMission__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButtonOldMission";
  } else {
    func.displayName = `PlasmicButtonOldMission.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonOldMission = Object.assign(
  // Top-level PlasmicButtonOldMission renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),
    svg: makeNodeComponent("svg"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicButtonOldMission
    internalVariantProps: PlasmicButtonOldMission__VariantProps,
    internalArgProps: PlasmicButtonOldMission__ArgProps
  }
);

export default PlasmicButtonOldMission;
/* prettier-ignore-end */
