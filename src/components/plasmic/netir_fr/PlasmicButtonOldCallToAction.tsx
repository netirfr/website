/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: 4e7_zL0mnGu-

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ButtonOldMission from "../../ButtonOldMission"; // plasmic-import: zZCk6RKHLwKs/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicButtonOldCallToAction.module.css"; // plasmic-import: 4e7_zL0mnGu-/css

createPlasmicElementProxy;

export type PlasmicButtonOldCallToAction__VariantMembers = {};
export type PlasmicButtonOldCallToAction__VariantsArgs = {};
type VariantPropType = keyof PlasmicButtonOldCallToAction__VariantsArgs;
export const PlasmicButtonOldCallToAction__VariantProps =
  new Array<VariantPropType>();

export type PlasmicButtonOldCallToAction__ArgsType = {};
type ArgPropType = keyof PlasmicButtonOldCallToAction__ArgsType;
export const PlasmicButtonOldCallToAction__ArgProps = new Array<ArgPropType>();

export type PlasmicButtonOldCallToAction__OverridesType = {
  root?: Flex__<"section">;
  freeBox?: Flex__<"div">;
  h2?: Flex__<"h2">;
  text?: Flex__<"div">;
  buttonOldMission?: Flex__<typeof ButtonOldMission>;
};

export interface DefaultButtonOldCallToActionProps {
  className?: string;
}

const $$ = {};

function PlasmicButtonOldCallToAction__RenderFunc(props: {
  variants: PlasmicButtonOldCallToAction__VariantsArgs;
  args: PlasmicButtonOldCallToAction__ArgsType;
  overrides: PlasmicButtonOldCallToAction__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <h2
          data-plasmic-name={"h2"}
          data-plasmic-override={overrides.h2}
          className={classNames(
            projectcss.all,
            projectcss.h2,
            projectcss.__wab_text,
            sty.h2
          )}
        >
          {"Besoin de nous joindre ?"}
        </h2>
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"Cliquez sur le bouton ci-dessous pour nous contacter."}
        </div>
        <ButtonOldMission
          data-plasmic-name={"buttonOldMission"}
          data-plasmic-override={overrides.buttonOldMission}
          className={classNames("__wab_instance", sty.buttonOldMission)}
          content={"Contactez-nous"}
          onClick={async event => {
            const $steps = {};

            $steps["goToHomepage"] = true
              ? (() => {
                  const actionArgs = { destination: `/` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __gatsbyNavigate(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToHomepage"] != null &&
              typeof $steps["goToHomepage"] === "object" &&
              typeof $steps["goToHomepage"].then === "function"
            ) {
              $steps["goToHomepage"] = await $steps["goToHomepage"];
            }
          }}
        />
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "h2", "text", "buttonOldMission"],
  freeBox: ["freeBox", "h2", "text", "buttonOldMission"],
  h2: ["h2"],
  text: ["text"],
  buttonOldMission: ["buttonOldMission"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "section";
  freeBox: "div";
  h2: "h2";
  text: "div";
  buttonOldMission: typeof ButtonOldMission;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButtonOldCallToAction__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButtonOldCallToAction__VariantsArgs;
    args?: PlasmicButtonOldCallToAction__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicButtonOldCallToAction__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicButtonOldCallToAction__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicButtonOldCallToAction__ArgProps,
          internalVariantPropNames: PlasmicButtonOldCallToAction__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicButtonOldCallToAction__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButtonOldCallToAction";
  } else {
    func.displayName = `PlasmicButtonOldCallToAction.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonOldCallToAction = Object.assign(
  // Top-level PlasmicButtonOldCallToAction renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    h2: makeNodeComponent("h2"),
    text: makeNodeComponent("text"),
    buttonOldMission: makeNodeComponent("buttonOldMission"),

    // Metadata about props expected for PlasmicButtonOldCallToAction
    internalVariantProps: PlasmicButtonOldCallToAction__VariantProps,
    internalArgProps: PlasmicButtonOldCallToAction__ArgProps
  }
);

export default PlasmicButtonOldCallToAction;
/* prettier-ignore-end */
