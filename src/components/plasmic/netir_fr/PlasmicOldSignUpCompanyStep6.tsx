/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: sc90iJSgzZFx

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import StepperStpeerForm from "../../StepperStpeerForm"; // plasmic-import: gdnfT_wfy0B6/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import InputLabelHelpStepper4 from "../../InputLabelHelpStepper4"; // plasmic-import: SzgCO1KR_MVp/component
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import ButtonOldPrecedent from "../../ButtonOldPrecedent"; // plasmic-import: t7J0gbQy9s_q/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicOldSignUpCompanyStep6.module.css"; // plasmic-import: sc90iJSgzZFx/css

import CheckIcon from "./icons/PlasmicIcon__Check"; // plasmic-import: L4RC0xhJ0uBL/icon
import BarSvgrepoComSvgIcon from "./icons/PlasmicIcon__BarSvgrepoComSvg"; // plasmic-import: L_A-j4tKSVFr/icon
import OkSvgrepoComSvgIcon from "./icons/PlasmicIcon__OkSvgrepoComSvg"; // plasmic-import: Enq2bSkp02OQ/icon
import UserSvgrepoCom4SvgIcon from "./icons/PlasmicIcon__UserSvgrepoCom4Svg"; // plasmic-import: QydiZu8DMym3/icon
import FlagForFlagFranceSvgrepoComSvgIcon from "./icons/PlasmicIcon__FlagForFlagFranceSvgrepoComSvg"; // plasmic-import: xy2wPFC-01XR/icon
import nLogo4X7VwM2YjHhq from "./images/nLogo.svg"; // plasmic-import: 4X7vwM2yjHHQ/picture

createPlasmicElementProxy;

export type PlasmicOldSignUpCompanyStep6__VariantMembers = {};
export type PlasmicOldSignUpCompanyStep6__VariantsArgs = {};
type VariantPropType = keyof PlasmicOldSignUpCompanyStep6__VariantsArgs;
export const PlasmicOldSignUpCompanyStep6__VariantProps =
  new Array<VariantPropType>();

export type PlasmicOldSignUpCompanyStep6__ArgsType = {
  iconsSteps?: boolean;
  icon?: boolean;
  children?: React.ReactNode;
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  children4?: React.ReactNode;
  form2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicOldSignUpCompanyStep6__ArgsType;
export const PlasmicOldSignUpCompanyStep6__ArgProps = new Array<ArgPropType>(
  "iconsSteps",
  "icon",
  "children",
  "children2",
  "children3",
  "children4",
  "form2"
);

export type PlasmicOldSignUpCompanyStep6__OverridesType = {
  companyPage?: Flex__<"div">;
  stepperStpeerForm?: Flex__<typeof StepperStpeerForm>;
  freeBox?: Flex__<"div">;
};

export interface DefaultOldSignUpCompanyStep6Props {
  iconsSteps?: boolean;
  icon?: boolean;
  children?: React.ReactNode;
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  children4?: React.ReactNode;
  form2?: React.ReactNode;
  className?: string;
}

const $$ = {};

export function Head() {
  return (
    <>
      <meta name="twitter:card" content="summary" />
      <title key="title">
        {PlasmicOldSignUpCompanyStep6.pageMetadata.title}
      </title>
      <meta
        key="og:title"
        property="og:title"
        content={PlasmicOldSignUpCompanyStep6.pageMetadata.title}
      />
      <meta
        key="twitter:title"
        name="twitter:title"
        content={PlasmicOldSignUpCompanyStep6.pageMetadata.title}
      />
    </>
  );
}

function PlasmicOldSignUpCompanyStep6__RenderFunc(props: {
  variants: PlasmicOldSignUpCompanyStep6__VariantsArgs;
  args: PlasmicOldSignUpCompanyStep6__ArgsType;
  overrides: PlasmicOldSignUpCompanyStep6__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          iconsSteps: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"companyPage"}
          data-plasmic-override={overrides.companyPage}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.companyPage
          )}
        >
          <StepperStpeerForm
            data-plasmic-name={"stepperStpeerForm"}
            data-plasmic-override={overrides.stepperStpeerForm}
            children2={renderPlasmicSlot({
              defaultContents: (
                <div className={classNames(projectcss.all, sty.columns__zyuBm)}>
                  <div
                    className={classNames(projectcss.all, sty.column___78P6P)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5KXnt
                      )}
                    >
                      <CheckIcon
                        className={classNames(projectcss.all, sty.svg___6W3Ww)}
                        role={"img"}
                      />
                    </div>
                    <BarSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg___9CEy6)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__arlY4)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vxExm)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__byIg0
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1WBwK
                          )}
                        >
                          {"\u00c9tape 2"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xSvcI
                        )}
                      >
                        {"Votre entreprise"}
                      </div>
                    </div>
                  </div>
                </div>
              ),
              value: args.children2
            })}
            children3={renderPlasmicSlot({
              defaultContents: (
                <div className={classNames(projectcss.all, sty.columns__yXyJc)}>
                  <div
                    className={classNames(projectcss.all, sty.column__w21Se)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__gClBc)}
                    >
                      <OkSvgrepoComSvgIcon
                        className={classNames(projectcss.all, sty.svg__ggBnV)}
                        role={"img"}
                      />
                    </div>
                    <BarSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__uOtoM)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__ho4Fz)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__wi7Mt)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wBtq
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9MfpZ
                          )}
                        >
                          {"\u00c9tape 3"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dkCpT
                        )}
                      >
                        {"Facturation"}
                      </div>
                    </div>
                  </div>
                </div>
              ),
              value: args.children3
            })}
            children4={renderPlasmicSlot({
              defaultContents: (
                <div className={classNames(projectcss.all, sty.columns__omMz)}>
                  <div
                    className={classNames(projectcss.all, sty.column__g2KS6)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__aeyxa)}
                    >
                      <UserSvgrepoCom4SvgIcon
                        className={classNames(projectcss.all, sty.svg__hVl5S)}
                        role={"img"}
                      />
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__xkzxy)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vwDq)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gUMz
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qEtU8
                          )}
                        >
                          {"\u00c9tape 4"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__q22FJ
                        )}
                      >
                        {"Responsable du compte"}
                      </div>
                    </div>
                  </div>
                </div>
              ),
              value: args.children4
            })}
            className={classNames("__wab_instance", sty.stepperStpeerForm)}
            form2={renderPlasmicSlot({
              defaultContents: (() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form__t4Of1),
                  formItems: [
                    { label: "Name", name: "name", inputType: "Text" },
                    {
                      label: "Message",
                      name: "message",
                      inputType: "Text Area"
                    }
                  ],
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: "advanced",
                  requiredMark: true,
                  submitSlot: null,
                  validateTrigger: [],
                  wrapperCol: (() => {
                    const __composite = {
                      span: null,
                      horizontalOnly: null,
                      offset: null
                    };
                    __composite["span"] = 24;
                    __composite["horizontalOnly"] = true;
                    __composite["offset"] = 23;
                    return __composite;
                  })()
                };

                return (
                  <FormWrapper {...child$Props}>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__jWfxt)}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___6Rf63
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bbzVo
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "#0A043C" }}
                              >
                                {"Pr\u00e9nom"}
                              </span>
                            </React.Fragment>
                          </div>
                        }
                        name={"prenom"}
                        valuePropName={"prenom"}
                      >
                        {(() => {
                          const child$Props = {
                            autoFocus: true,
                            className: classNames(
                              "__wab_instance",
                              sty.input__nEc2U
                            ),
                            placeholder: "Pr\u00e9nom",
                            size: "large"
                          };

                          return <AntdInput {...child$Props} />;
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___7Gufr
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gZ6Bt
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "#0A043C" }}
                              >
                                {"Nom"}
                              </span>
                            </React.Fragment>
                          </div>
                        }
                        name={"prenom"}
                        valuePropName={"prenom"}
                      >
                        {(() => {
                          const child$Props = {
                            autoFocus: true,
                            className: classNames(
                              "__wab_instance",
                              sty.input__nRB
                            ),
                            placeholder: "Nom",
                            size: "large"
                          };

                          return <AntdInput {...child$Props} />;
                        })()}
                      </FormItemWrapper>
                    </div>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__nw3V9
                      )}
                      hidden={false}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hLdBv
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#0A043C" }}
                            >
                              {"Email"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"email"}
                      noLabel={false}
                      valuePropName={"localisation"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.input__vX2Qf
                          ),
                          placeholder: "Votre email",
                          size: "large",
                          type: "email"
                        };

                        return <AntdInput {...child$Props} />;
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__uoYl5
                      )}
                      hidden={false}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__i2Cdw
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mRe0T
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "#0A043C" }}
                              >
                                {"Num\u00e9ro de t\u00e9l\u00e9phone"}
                              </span>
                            </React.Fragment>
                          </div>
                          <InputLabelHelpStepper4
                            className={classNames(
                              "__wab_instance",
                              sty.inputLabelHelpStepper4__oqCSz
                            )}
                          />
                        </div>
                      }
                      name={"localisation"}
                      noLabel={false}
                      rules={[]}
                      valuePropName={"localisation"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns__iLpns
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__vDMgj
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xi8M
                            )}
                          >
                            <FlagForFlagFranceSvgrepoComSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__b0Rv
                              )}
                              role={"img"}
                            />

                            <AntdInputNumber
                              bordered={false}
                              className={classNames(
                                "__wab_instance",
                                sty.numberInput__xfR4
                              )}
                              placeholder={"+33 xx xx xx xx xx"}
                              type={"text"}
                            />
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__wed4X
                          )}
                        />
                      </div>
                    </FormItemWrapper>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__q1HU)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns__m9Rc9
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__vbRmZ
                          )}
                        >
                          <ButtonOldPrecedent
                            className={classNames(
                              "__wab_instance",
                              sty.buttonOldPrecedent__rrVcX
                            )}
                            lienDestiantion={`/sign-up/company-3`}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column___8EBRd
                          )}
                        >
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__eOqNa
                            )}
                            danger={true}
                            href={`/home-page`}
                            onClick={async () => {
                              const $steps = {};

                              $steps["goToFreelanceHome"] = true
                                ? (() => {
                                    const actionArgs = {
                                      destination: `/home-page`
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __gatsbyNavigate(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["goToFreelanceHome"] != null &&
                                typeof $steps["goToFreelanceHome"] ===
                                  "object" &&
                                typeof $steps["goToFreelanceHome"].then ===
                                  "function"
                              ) {
                                $steps["goToFreelanceHome"] =
                                  await $steps["goToFreelanceHome"];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__w9AF3
                              )}
                            >
                              {"Finaliser"}
                            </div>
                          </AntdButton>
                        </div>
                      </div>
                    </div>
                  </FormWrapper>
                );
              })(),
              value: args.form2
            })}
            slot={
              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bhl2B
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"Responsable du compte entreprise\r"}
                    </span>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zmiqX
                  )}
                >
                  {
                    "Ces d\u00e9tails aident les freelances \u00e0 savoir avec qui ils collaborent.\r\n\r"
                  }
                </div>
              </div>
            }
            slot2={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0Zp7
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700, color: "#F43F5E" }}
                  >
                    {"Derni\u00e8re \u00e9tape"}
                  </span>
                  <React.Fragment> </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#000000" }}
                  >
                    {
                      "avant de trouver LE freelance id\u00e9al pour votre projet !"
                    }
                  </span>
                  <React.Fragment>{"\r\n\r"}</React.Fragment>
                </React.Fragment>
              </div>
            }
          >
            {renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(projectcss.all, sty.columns___9G1Pu)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__jsnLl)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xbyuQ)}
                    >
                      <CheckIcon
                        className={classNames(projectcss.all, sty.svg__bTazT)}
                        role={"img"}
                      />
                    </div>
                    <BarSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__j4UTy)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__fcdWh)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__crSe)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___7QN0P
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fs54K
                          )}
                        >
                          {"\u00c9tape 1"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yqcJl
                        )}
                      >
                        {"Inscription"}
                      </div>
                    </div>
                  </div>
                </div>
              ),
              value: args.children
            })}
          </StepperStpeerForm>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  companyPage: ["companyPage", "stepperStpeerForm", "freeBox"],
  stepperStpeerForm: ["stepperStpeerForm", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  companyPage: "div";
  stepperStpeerForm: typeof StepperStpeerForm;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOldSignUpCompanyStep6__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOldSignUpCompanyStep6__VariantsArgs;
    args?: PlasmicOldSignUpCompanyStep6__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicOldSignUpCompanyStep6__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicOldSignUpCompanyStep6__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOldSignUpCompanyStep6__ArgProps,
          internalVariantPropNames: PlasmicOldSignUpCompanyStep6__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOldSignUpCompanyStep6__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "companyPage") {
    func.displayName = "PlasmicOldSignUpCompanyStep6";
  } else {
    func.displayName = `PlasmicOldSignUpCompanyStep6.${nodeName}`;
  }
  return func;
}

export const PlasmicOldSignUpCompanyStep6 = Object.assign(
  // Top-level PlasmicOldSignUpCompanyStep6 renders the root element
  makeNodeComponent("companyPage"),
  {
    // Helper components rendering sub-elements
    stepperStpeerForm: makeNodeComponent("stepperStpeerForm"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicOldSignUpCompanyStep6
    internalVariantProps: PlasmicOldSignUpCompanyStep6__VariantProps,
    internalArgProps: PlasmicOldSignUpCompanyStep6__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Netir – Inscription : Confirmation\t",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicOldSignUpCompanyStep6;
/* prettier-ignore-end */
