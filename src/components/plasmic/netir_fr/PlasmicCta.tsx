/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: FtcUsaQ-hIvC

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicCta.module.css"; // plasmic-import: FtcUsaQ-hIvC/css

import RocketSvgrepoComSvgIcon from "./icons/PlasmicIcon__RocketSvgrepoComSvg"; // plasmic-import: DJFiCD-k17DC/icon

createPlasmicElementProxy;

export type PlasmicCta__VariantMembers = {
  ets: "ets";
  mentor: "mentor";
  appAff: "appAff";
};
export type PlasmicCta__VariantsArgs = {
  ets?: MultiChoiceArg<"ets">;
  mentor?: MultiChoiceArg<"mentor">;
  appAff?: MultiChoiceArg<"appAff">;
};
type VariantPropType = keyof PlasmicCta__VariantsArgs;
export const PlasmicCta__VariantProps = new Array<VariantPropType>(
  "ets",
  "mentor",
  "appAff"
);

export type PlasmicCta__ArgsType = {
  nom?: string;
  boutton?: string;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicCta__ArgsType;
export const PlasmicCta__ArgProps = new Array<ArgPropType>(
  "nom",
  "boutton",
  "children"
);

export type PlasmicCta__OverridesType = {
  root?: Flex__<"div">;
  h4?: Flex__<"h4">;
  freeBox?: Flex__<"div">;
  text?: Flex__<"div">;
};

export interface DefaultCtaProps {
  nom?: string;
  boutton?: string;
  children?: React.ReactNode;
  ets?: MultiChoiceArg<"ets">;
  mentor?: MultiChoiceArg<"mentor">;
  appAff?: MultiChoiceArg<"appAff">;
  className?: string;
}

const $$ = {};

function PlasmicCta__RenderFunc(props: {
  variants: PlasmicCta__VariantsArgs;
  args: PlasmicCta__ArgsType;
  overrides: PlasmicCta__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          nom: "Arr\u00eate de te faire plumer",
          boutton: "Acc\u00e9der \u00e0 l'Espace Freelance"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "ets",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.ets
      },
      {
        path: "mentor",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.mentor
      },
      {
        path: "appAff",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.appAff
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootappAff]: hasVariant($state, "appAff", "appAff"),
          [sty.rootets]: hasVariant($state, "ets", "ets"),
          [sty.rootmentor]: hasVariant($state, "mentor", "mentor")
        }
      )}
    >
      {renderPlasmicSlot({
        defaultContents: (
          <RocketSvgrepoComSvgIcon
            className={classNames(projectcss.all, sty.svg__likG8)}
            role={"img"}
          />
        ),

        value: args.children
      })}
      <h4
        data-plasmic-name={"h4"}
        data-plasmic-override={overrides.h4}
        className={classNames(
          projectcss.all,
          projectcss.h4,
          projectcss.__wab_text,
          sty.h4,
          { [sty.h4mentor]: hasVariant($state, "mentor", "mentor") }
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.nom;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "Arr\u00eate de te faire plumer";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </h4>
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxmentor]: hasVariant($state, "mentor", "mentor")
        })}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.textappAff]: hasVariant($state, "appAff", "appAff"),
              [sty.textets]: hasVariant($state, "ets", "ets"),
              [sty.textmentor]: hasVariant($state, "mentor", "mentor")
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.boutton;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Acc\u00e9der \u00e0 l'Espace Freelance";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h4", "freeBox", "text"],
  h4: ["h4"],
  freeBox: ["freeBox", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h4: "h4";
  freeBox: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCta__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCta__VariantsArgs;
    args?: PlasmicCta__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicCta__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicCta__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCta__ArgProps,
          internalVariantPropNames: PlasmicCta__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCta__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCta";
  } else {
    func.displayName = `PlasmicCta.${nodeName}`;
  }
  return func;
}

export const PlasmicCta = Object.assign(
  // Top-level PlasmicCta renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h4: makeNodeComponent("h4"),
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicCta
    internalVariantProps: PlasmicCta__VariantProps,
    internalArgProps: PlasmicCta__ArgProps
  }
);

export default PlasmicCta;
/* prettier-ignore-end */
