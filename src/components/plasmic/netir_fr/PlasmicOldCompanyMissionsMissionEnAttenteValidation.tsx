/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: e1C5qrEsdwKe

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import DashboardDashboardLayout from "../../DashboardDashboardLayout"; // plasmic-import: KS-1W6sGklIw/component
import NavNavItem from "../../NavNavItem"; // plasmic-import: emjpN_Inho3r/component
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import ButtonOldNoirModifier from "../../ButtonOldNoirModifier"; // plasmic-import: 5xK5VFnQQQwm/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicOldCompanyMissionsMissionEnAttenteValidation.module.css"; // plasmic-import: e1C5qrEsdwKe/css

import SettingsSvgrepoComSvgIcon from "./icons/PlasmicIcon__SettingsSvgrepoComSvg"; // plasmic-import: Zs9dSHGCwlTd/icon
import BurgerMenuIcon from "./icons/PlasmicIcon__BurgerMenu"; // plasmic-import: uiLqCVdai7zb/icon

createPlasmicElementProxy;

export type PlasmicOldCompanyMissionsMissionEnAttenteValidation__VariantMembers =
  {};
export type PlasmicOldCompanyMissionsMissionEnAttenteValidation__VariantsArgs =
  {};
type VariantPropType =
  keyof PlasmicOldCompanyMissionsMissionEnAttenteValidation__VariantsArgs;
export const PlasmicOldCompanyMissionsMissionEnAttenteValidation__VariantProps =
  new Array<VariantPropType>();

export type PlasmicOldCompanyMissionsMissionEnAttenteValidation__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType =
  keyof PlasmicOldCompanyMissionsMissionEnAttenteValidation__ArgsType;
export const PlasmicOldCompanyMissionsMissionEnAttenteValidation__ArgProps =
  new Array<ArgPropType>("children", "slot");

export type PlasmicOldCompanyMissionsMissionEnAttenteValidation__OverridesType =
  {
    root?: Flex__<"div">;
    dashboardLayout?: Flex__<typeof DashboardDashboardLayout>;
    freeBox?: Flex__<"div">;
    svg?: Flex__<"svg">;
  };

export interface DefaultOldCompanyMissionsMissionEnAttenteValidationProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

const $$ = {};

export function Head() {
  return <></>;
}

function PlasmicOldCompanyMissionsMissionEnAttenteValidation__RenderFunc(props: {
  variants: PlasmicOldCompanyMissionsMissionEnAttenteValidation__VariantsArgs;
  args: PlasmicOldCompanyMissionsMissionEnAttenteValidation__ArgsType;
  overrides: PlasmicOldCompanyMissionsMissionEnAttenteValidation__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dashboardLayout.isSidebarOpenn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <DashboardDashboardLayout
            data-plasmic-name={"dashboardLayout"}
            data-plasmic-override={overrides.dashboardLayout}
            className={classNames("__wab_instance", sty.dashboardLayout)}
            isSidebarOpenn={generateStateValueProp($state, [
              "dashboardLayout",
              "isSidebarOpenn"
            ])}
            onIsSidebarOpennChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dashboardLayout",
                "isSidebarOpenn"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            slot={renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__y893A)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___36X6X
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eNfNv
                        )}
                      >
                        {"Nom de la mission"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__z1Sdd
                        )}
                      >
                        {
                          "En attente de validation de la terminaison par le freelance"
                        }
                      </div>
                    </div>
                    <ButtonOldNoirModifier
                      className={classNames(
                        "__wab_instance",
                        sty.buttonOldNoirModifier___9KBys
                      )}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cHyQi)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cjF7
                      )}
                    >
                      {"Description"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rra2B
                      )}
                    >
                      {"Description de la mission"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cTYb)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0Q1ZL
                      )}
                    >
                      {"Devis"}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ko9G8)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ehKtr
                        )}
                      >
                        {"Date"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vwHh7
                        )}
                      >
                        {"Montant"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6TmF
                        )}
                      >
                        {"Statut"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ixMxM
                        )}
                      >
                        {"Actions"}
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___6M9DP)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__g4Dfd
                      )}
                    >
                      {"Factures"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___8Lp23)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__gEXQ)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns__ppxqc
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__c87Jy
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__fsBom
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fnteE
                              )}
                            >
                              {"Date"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ktma
                              )}
                            >
                              {"Num\u00e9ro"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___9SPab
                              )}
                            >
                              {"Nom du client"}
                            </div>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__woKOt
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__nfcf8
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__um5Iq
                              )}
                            >
                              {"Montant"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__sIheL
                              )}
                            >
                              {"Statut"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pq0Vr
                              )}
                            >
                              {"Actions"}
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </React.Fragment>
              ),
              value: args.slot
            })}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <NavNavItem
                    className={classNames(
                      "__wab_instance",
                      sty.navNavItem__s65KE
                    )}
                    slot={
                      <AntdMenuItem
                        className={classNames(
                          "__wab_instance",
                          sty.menuItem__lPvyP
                        )}
                        key={"menuItemKey1"}
                        onClick={async () => {
                          const $steps = {};

                          $steps["goToFreelanceMissions"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: `/freelance/missions`
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __gatsbyNavigate(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToFreelanceMissions"] != null &&
                            typeof $steps["goToFreelanceMissions"] ===
                              "object" &&
                            typeof $steps["goToFreelanceMissions"].then ===
                              "function"
                          ) {
                            $steps["goToFreelanceMissions"] =
                              await $steps["goToFreelanceMissions"];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5KVzd
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 400 }}
                            >
                              {"Documents"}
                            </span>
                          </React.Fragment>
                        </div>
                      </AntdMenuItem>
                    }
                  >
                    <SettingsSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__oQfVm)}
                      role={"img"}
                    />
                  </NavNavItem>
                  <NavNavItem
                    className={classNames(
                      "__wab_instance",
                      sty.navNavItem___2RkWc
                    )}
                    slot={
                      <AntdMenuItem
                        className={classNames(
                          "__wab_instance",
                          sty.menuItem__z5MS9
                        )}
                        key={"menuItemKey1"}
                        onClick={async () => {
                          const $steps = {};

                          $steps["goToFreelanceInvoices"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: `/freelance/invoices`
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __gatsbyNavigate(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToFreelanceInvoices"] != null &&
                            typeof $steps["goToFreelanceInvoices"] ===
                              "object" &&
                            typeof $steps["goToFreelanceInvoices"].then ===
                              "function"
                          ) {
                            $steps["goToFreelanceInvoices"] =
                              await $steps["goToFreelanceInvoices"];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fteKk
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 400 }}
                            >
                              {"Utilisateurs"}
                            </span>
                          </React.Fragment>
                        </div>
                      </AntdMenuItem>
                    }
                  >
                    <SettingsSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__kpmHa)}
                      role={"img"}
                    />
                  </NavNavItem>
                </React.Fragment>
              ),
              value: args.children
            })}
          </DashboardDashboardLayout>
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <BurgerMenuIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              onClick={async event => {
                const $steps = {};

                $steps["updateDashboardLayoutIsSidebarOpenn"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dashboardLayout", "isSidebarOpenn"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDashboardLayoutIsSidebarOpenn"] != null &&
                  typeof $steps["updateDashboardLayoutIsSidebarOpenn"] ===
                    "object" &&
                  typeof $steps["updateDashboardLayoutIsSidebarOpenn"].then ===
                    "function"
                ) {
                  $steps["updateDashboardLayoutIsSidebarOpenn"] =
                    await $steps["updateDashboardLayoutIsSidebarOpenn"];
                }
              }}
              role={"img"}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "dashboardLayout", "freeBox", "svg"],
  dashboardLayout: ["dashboardLayout"],
  freeBox: ["freeBox", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dashboardLayout: typeof DashboardDashboardLayout;
  freeBox: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOldCompanyMissionsMissionEnAttenteValidation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOldCompanyMissionsMissionEnAttenteValidation__VariantsArgs;
    args?: PlasmicOldCompanyMissionsMissionEnAttenteValidation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<
      PlasmicOldCompanyMissionsMissionEnAttenteValidation__VariantsArgs,
      ReservedPropsType
    > &
    // Specify args directly as props
    Omit<
      PlasmicOldCompanyMissionsMissionEnAttenteValidation__ArgsType,
      ReservedPropsType
    > &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames:
            PlasmicOldCompanyMissionsMissionEnAttenteValidation__ArgProps,
          internalVariantPropNames:
            PlasmicOldCompanyMissionsMissionEnAttenteValidation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOldCompanyMissionsMissionEnAttenteValidation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOldCompanyMissionsMissionEnAttenteValidation";
  } else {
    func.displayName = `PlasmicOldCompanyMissionsMissionEnAttenteValidation.${nodeName}`;
  }
  return func;
}

export const PlasmicOldCompanyMissionsMissionEnAttenteValidation =
  Object.assign(
    // Top-level PlasmicOldCompanyMissionsMissionEnAttenteValidation renders the root element
    makeNodeComponent("root"),
    {
      // Helper components rendering sub-elements
      dashboardLayout: makeNodeComponent("dashboardLayout"),
      freeBox: makeNodeComponent("freeBox"),
      svg: makeNodeComponent("svg"),

      // Metadata about props expected for PlasmicOldCompanyMissionsMissionEnAttenteValidation
      internalVariantProps:
        PlasmicOldCompanyMissionsMissionEnAttenteValidation__VariantProps,
      internalArgProps:
        PlasmicOldCompanyMissionsMissionEnAttenteValidation__ArgProps,

      // Page metadata
      pageMetadata: {
        title: "",
        description: "",
        ogImageSrc: "",
        canonical: ""
      }
    }
  );

export default PlasmicOldCompanyMissionsMissionEnAttenteValidation;
/* prettier-ignore-end */
