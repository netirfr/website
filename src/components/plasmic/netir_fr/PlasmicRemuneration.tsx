/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: jD-Vl_KMNej9

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SiteHeader from "../../SiteHeader"; // plasmic-import: Vg4NgSIGKm96/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: byb1-I0x_v8X/component
import Modele from "../../Modele"; // plasmic-import: j1M4n_CV-Nck/component
import Besoin from "../../Besoin"; // plasmic-import: CZV8F0NS4iKj/component
import Faq from "../../Faq"; // plasmic-import: wBbJjw0EbsaX/component
import Footer from "../../Footer"; // plasmic-import: lPSQkcOmsQQw/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicRemuneration.module.css"; // plasmic-import: jD-Vl_KMNej9/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: 99U4uMxg1jkf/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: FEzuhm3U7mDW/icon
import NIcons2Icon from "./icons/PlasmicIcon__NIcons2"; // plasmic-import: _EC8PI1hBKVF/icon
import PercentArrowDownSvgrepoComSvgIcon from "./icons/PlasmicIcon__PercentArrowDownSvgrepoComSvg"; // plasmic-import: -1vfRVfwOpRL/icon
import ClassManagementSvgrepoComSvgIcon from "./icons/PlasmicIcon__ClassManagementSvgrepoComSvg"; // plasmic-import: nWNdyKQnSqgi/icon
import CaseRoundSvgrepoComSvgIcon from "./icons/PlasmicIcon__CaseRoundSvgrepoComSvg"; // plasmic-import: IoReGpVCJ_4g/icon
import LoupeSearchSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__LoupeSearchSvgrepoCom1Svg"; // plasmic-import: CAH820DKblfw/icon
import TransferAltSvgrepoComSvgIcon from "./icons/PlasmicIcon__TransferAltSvgrepoComSvg"; // plasmic-import: MxQMsl3yj-HU/icon
import quatuorRemovebgPreviewPngFgNy5HOinbT from "./images/quatuorRemovebgPreviewPng.png"; // plasmic-import: FgNY5HOinb_t/picture
import mentor55PngEhbJjkajIFl6 from "./images/mentor55Png.png"; // plasmic-import: EHBJjkajIFl6/picture
import apporteuraffaire55PngWGGKtOLdwD from "./images/apporteuraffaire55Png.png"; // plasmic-import: -w_gGKtOLdwD/picture
import image111MD1FwxOq88YI from "./images/image111.png"; // plasmic-import: mD1FWXOq88yI/picture
import captureDecran20251010A160848PngKrwg5DQpjUe from "./images/captureDecran20251010A160848Png.png"; // plasmic-import: KRWG5DQpjUe-/picture
import captureDecran20251010A154016Png7UFuwY72TuE from "./images/captureDecran20251010A154016Png.png"; // plasmic-import: 7uFuwY72TU-e/picture
import captureDecran20251010A161709PngHTnJgsLhFOhb from "./images/captureDecran20251010A161709Png.png"; // plasmic-import: hTnJgsLhFOhb/picture
import chevre2RemovebgPreviewPngO75IhK4K4VeR from "./images/chevre2RemovebgPreviewPng.png"; // plasmic-import: O75IhK4K4VeR/picture
import geminiGeneratedImage8R11Yk8R11Yk8R11RemovebgPreviewPngBZ8T737YaQxk from "./images/geminiGeneratedImage8R11Yk8R11Yk8R11RemovebgPreviewPng.png"; // plasmic-import: bZ8t737YaQXK/picture
import logoTextBlackColorBgWhite1500PngBSyZCbzPXsht from "./images/logoTextBlackColorBgWhite1500Png.png"; // plasmic-import: BSyZCbzPXsht/picture

createPlasmicElementProxy;

export type PlasmicRemuneration__VariantMembers = {};
export type PlasmicRemuneration__VariantsArgs = {};
type VariantPropType = keyof PlasmicRemuneration__VariantsArgs;
export const PlasmicRemuneration__VariantProps = new Array<VariantPropType>();

export type PlasmicRemuneration__ArgsType = {};
type ArgPropType = keyof PlasmicRemuneration__ArgsType;
export const PlasmicRemuneration__ArgProps = new Array<ArgPropType>();

export type PlasmicRemuneration__OverridesType = {
  body?: Flex__<"div">;
  wrapper?: Flex__<"div">;
  hero?: Flex__<"div">;
  siteHeader?: Flex__<typeof SiteHeader>;
  buttonButton?: Flex__<typeof ButtonPrimary>;
  interactionEffect?: Flex__<"div">;
  pres?: Flex__<"div">;
  value?: Flex__<"div">;
  titres?: Flex__<"div">;
  h1?: Flex__<"h1">;
  buttons2?: Flex__<"div">;
  buttonButton2?: Flex__<typeof ButtonPrimary>;
  interactionEffect2?: Flex__<"div">;
  buttonButton6?: Flex__<typeof ButtonPrimary>;
  interactionEffect6?: Flex__<"div">;
  modele?: Flex__<"div">;
  titre?: Flex__<"div">;
  graphique?: Flex__<"section">;
  avantages?: Flex__<"section">;
  testimonials?: Flex__<"div">;
  titre4?: Flex__<"div">;
  h3?: Flex__<"h3">;
  ul?: Flex__<"ul">;
  callToAction3?: Flex__<"div">;
  buttonButton5?: Flex__<typeof ButtonPrimary>;
  interactionEffect4?: Flex__<"div">;
  faq?: Flex__<"div">;
  titre7?: Flex__<"div">;
  questions?: Flex__<"div">;
  illustration?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultRemunerationProps {
  className?: string;
}

const $$ = {};

export function Head() {
  return (
    <>
      <meta name="twitter:card" content="summary_large_image" />
      <title key="title">{PlasmicRemuneration.pageMetadata.title}</title>
      <meta
        key="og:title"
        property="og:title"
        content={PlasmicRemuneration.pageMetadata.title}
      />
      <meta
        key="twitter:title"
        name="twitter:title"
        content={PlasmicRemuneration.pageMetadata.title}
      />
      <meta
        key="description"
        name="description"
        content={PlasmicRemuneration.pageMetadata.description}
      />
      <meta
        key="og:description"
        property="og:description"
        content={PlasmicRemuneration.pageMetadata.description}
      />
      <meta
        key="twitter:description"
        name="twitter:description"
        content={PlasmicRemuneration.pageMetadata.description}
      />
      <meta
        key="og:image"
        property="og:image"
        content={PlasmicRemuneration.pageMetadata.ogImageSrc}
      />
      <meta
        key="twitter:image"
        name="twitter:image"
        content={PlasmicRemuneration.pageMetadata.ogImageSrc}
      />
      <link rel="canonical" href={PlasmicRemuneration.pageMetadata.canonical} />
    </>
  );
}

function PlasmicRemuneration__RenderFunc(props: {
  variants: PlasmicRemuneration__VariantsArgs;
  args: PlasmicRemuneration__ArgsType;
  overrides: PlasmicRemuneration__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "siteHeader.isNavopen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonButton.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonButton2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonButton.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonButton2.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonButton6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "buttonNoirModifier2"
      },
      {
        path: "buttonButton6.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "soft"
      },
      {
        path: "buttonButton5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "buttonNoirModifier2"
      },
      {
        path: "buttonButton5.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "soft"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"body"}
          data-plasmic-override={overrides.body}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.body
          )}
        >
          <div
            data-plasmic-name={"wrapper"}
            data-plasmic-override={overrides.wrapper}
            className={classNames(projectcss.all, sty.wrapper)}
          >
            <div
              data-plasmic-name={"hero"}
              data-plasmic-override={overrides.hero}
              className={classNames(projectcss.all, sty.hero)}
            >
              <SiteHeader
                data-plasmic-name={"siteHeader"}
                data-plasmic-override={overrides.siteHeader}
                className={classNames("__wab_instance", sty.siteHeader)}
                isNavopen={generateStateValueProp($state, [
                  "siteHeader",
                  "isNavopen"
                ])}
                onIsNavopenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "siteHeader",
                    "isNavopen"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <ButtonPrimary
                  data-plasmic-name={"buttonButton"}
                  data-plasmic-override={overrides.buttonButton}
                  className={classNames("__wab_instance", sty.buttonButton)}
                  color={generateStateValueProp($state, [
                    "buttonButton",
                    "color"
                  ])}
                  disabled={false}
                  interactionEffect2={
                    <div
                      data-plasmic-name={"interactionEffect"}
                      data-plasmic-override={overrides.interactionEffect}
                      className={classNames(
                        projectcss.all,
                        sty.interactionEffect
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToInscription"] = true
                          ? (() => {
                              const actionArgs = { destination: `/sign-up` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __gatsbyNavigate(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToInscription"] != null &&
                          typeof $steps["goToInscription"] === "object" &&
                          typeof $steps["goToInscription"].then === "function"
                        ) {
                          $steps["goToInscription"] =
                            await $steps["goToInscription"];
                        }
                      }}
                    />
                  }
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aTdf2
                      )}
                    >
                      {"Inscription"}
                    </div>
                  }
                  linkTo={`/sign-up`}
                  onColorChange2={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "buttonButton",
                      "color"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onTypeChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "buttonButton",
                      "type"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  type={generateStateValueProp($state, [
                    "buttonButton",
                    "type"
                  ])}
                />
              </SiteHeader>
              <div
                data-plasmic-name={"pres"}
                data-plasmic-override={overrides.pres}
                className={classNames(projectcss.all, sty.pres)}
              >
                <div
                  data-plasmic-name={"value"}
                  data-plasmic-override={overrides.value}
                  className={classNames(projectcss.all, sty.value)}
                >
                  <div
                    data-plasmic-name={"titres"}
                    data-plasmic-override={overrides.titres}
                    className={classNames(projectcss.all, sty.titres)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {
                        "Comprendre la R\u00e9mun\u00e9ration des Missions sur Netir"
                      }
                    </h1>
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__ffMv1
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Faites confiance \u00e0 nos mentors, ils sauront vous proposer nos meilleurs freelances."
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "Faites confiance \u00e0 nos mentors, ils sauront vous proposer nos meilleurs freelances."
                          : "Chez Netir, nous croyons \u00e0 un partage de valeur \u00e9quitable et transparent. Notre mod\u00e8le de commissions est con\u00e7u pour avantager nos talents tout en valorisant l'expertise et la mise en relation."}
                    </h4>
                    <div
                      data-plasmic-name={"buttons2"}
                      data-plasmic-override={overrides.buttons2}
                      className={classNames(projectcss.all, sty.buttons2)}
                    >
                      <ButtonPrimary
                        data-plasmic-name={"buttonButton2"}
                        data-plasmic-override={overrides.buttonButton2}
                        className={classNames(
                          "__wab_instance",
                          sty.buttonButton2
                        )}
                        color={generateStateValueProp($state, [
                          "buttonButton2",
                          "color"
                        ])}
                        end={
                          <NIcons2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___6FXrm
                            )}
                            role={"img"}
                          />
                        }
                        interactionEffect2={
                          <div
                            data-plasmic-name={"interactionEffect2"}
                            data-plasmic-override={overrides.interactionEffect2}
                            className={classNames(
                              projectcss.all,
                              sty.interactionEffect2
                            )}
                          />
                        }
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__g9JT
                            )}
                          >
                            {"Je rejoins Netir"}
                          </div>
                        }
                        linkTo={`/sign-up`}
                        onColorChange2={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "buttonButton2",
                            "color"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onTypeChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "buttonButton2",
                            "type"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        type={generateStateValueProp($state, [
                          "buttonButton2",
                          "type"
                        ])}
                      />

                      <ButtonPrimary
                        data-plasmic-name={"buttonButton6"}
                        data-plasmic-override={overrides.buttonButton6}
                        className={classNames(
                          "__wab_instance",
                          sty.buttonButton6
                        )}
                        color={generateStateValueProp($state, [
                          "buttonButton6",
                          "color"
                        ])}
                        end={
                          <NIcons2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__sYgwo
                            )}
                            role={"img"}
                          />
                        }
                        interactionEffect2={
                          <div
                            data-plasmic-name={"interactionEffect6"}
                            data-plasmic-override={overrides.interactionEffect6}
                            className={classNames(
                              projectcss.all,
                              sty.interactionEffect6
                            )}
                          />
                        }
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__c9SoL
                            )}
                          >
                            {"En savoir plus"}
                          </div>
                        }
                        onColorChange2={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "buttonButton6",
                            "color"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onTypeChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "buttonButton6",
                            "type"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        type={generateStateValueProp($state, [
                          "buttonButton6",
                          "type"
                        ])}
                      />
                    </div>
                  </div>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__v3Be)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "auto"
                          : "500px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "100%"
                        : "none"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "60%"
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "40%"
                          : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: quatuorRemovebgPreviewPngFgNy5HOinbT,
                      fullWidth: 500,
                      fullHeight: 500,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"modele"}
              data-plasmic-override={overrides.modele}
              className={classNames(projectcss.all, sty.modele)}
              id={"quatuor-gagnant"}
            >
              <div
                data-plasmic-name={"titre"}
                data-plasmic-override={overrides.titre}
                className={classNames(projectcss.all, sty.titre)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__ibW2W
                  )}
                >
                  {"Le Mod\u00e8le de R\u00e9partition Netir : Un Aper\u00e7u"}
                </h2>
                <h4
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.h4__dgR60
                  )}
                >
                  {
                    "Notre syst\u00e8me vise \u00e0 maximiser la part revenant au freelance tout en valorisant l'accompagnement (mentorat) et la mise en relation (apport d'affaires)."
                  }
                </h4>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__mT7O)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0197L
                  )}
                >
                  {
                    "Imaginez une mission factur\u00e9e 1000 \u20ac \u00e0 l'entreprise cliente. Voici comment la valeur est r\u00e9partie :"
                  }
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___9T0Wq)}
                >
                  <Modele
                    _={"47%"}
                    className={classNames("__wab_instance", sty.modele__hiU3H)}
                    montant={"4700\u20ac"}
                  />

                  <Modele
                    _={"30%"}
                    className={classNames("__wab_instance", sty.modele__gLuyy)}
                    entite={"Mentor"}
                    image={{
                      src: mentor55PngEhbJjkajIFl6,
                      fullWidth: 1210,
                      fullHeight: 1362,
                      aspectRatio: undefined
                    }}
                    montant={"3000\u20ac"}
                    role={"Commission pour l'accompagnement"}
                  />

                  <Modele
                    _={"20%"}
                    className={classNames("__wab_instance", sty.modele___8F2En)}
                    entite={"Apporteur d'affaires"}
                    image={{
                      src: apporteuraffaire55PngWGGKtOLdwD,
                      fullWidth: 1132,
                      fullHeight: 1276,
                      aspectRatio: undefined
                    }}
                    montant={"2000\u20ac"}
                    role={"Commission pour la mise en relation"}
                  />

                  <Modele
                    _={"3%"}
                    className={classNames("__wab_instance", sty.modele__nroEw)}
                    entite={"Netir"}
                    image={{
                      src: image111MD1FwxOq88YI,
                      fullWidth: 1348,
                      fullHeight: 912,
                      aspectRatio: undefined
                    }}
                    montant={
                      hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "300\u20ac"
                        : "300"
                    }
                    role={
                      "Part de la plateforme et  de son partenaire financier"
                    }
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bT8Zq
                  )}
                >
                  {
                    "*Les commissions du Mentor et de l'Apporteur d'Affaires sont des exemples bas\u00e9s sur des n\u00e9gociations courantes. Elles sont variables et ajustables."
                  }
                </div>
              </div>
            </div>
            <section
              data-plasmic-name={"graphique"}
              data-plasmic-override={overrides.graphique}
              className={classNames(projectcss.all, sty.graphique)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2___36Zjv
                )}
              >
                {"Globalement si on divise un gateau en part"}
              </h2>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__ezgr6)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                loading={"lazy"}
                src={{
                  src: captureDecran20251010A160848PngKrwg5DQpjUe,
                  fullWidth: 1152,
                  fullHeight: 698,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rSra
                )}
              >
                {
                  "*Dans l'hypoth\u00e8se o\u00f9 le mentor prend 30% et l'apporteur d'affaire 20%."
                }
              </div>
            </section>
            <section
              data-plasmic-name={"avantages"}
              data-plasmic-override={overrides.avantages}
              className={classNames(projectcss.all, sty.avantages)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__lFfDv
                )}
              >
                {"Les Avantages Cl\u00e9s de Netir"}
              </h2>
              <div className={classNames(projectcss.all, sty.freeBox__kImm8)}>
                <Besoin
                  className={classNames("__wab_instance", sty.besoin__lFm8A)}
                  description={
                    "Seulement 3% du montant de la mission pour la plateforme (Netir + Stripe), bien en dessous de la moyenne du march\u00e9."
                  }
                  titre={"Commissions Ultra-Basses :"}
                >
                  <PercentArrowDownSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__i56Vc)}
                    role={"img"}
                  />
                </Besoin>
                <Besoin
                  className={classNames("__wab_instance", sty.besoin__c0VDm)}
                  description={
                    "Nous r\u00e9compensons l'expertise et la transmission de savoir."
                  }
                  titre={"Valorisation du Mentorat "}
                >
                  <ClassManagementSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__z4Ycm)}
                    role={"img"}
                  />
                </Besoin>
                <Besoin
                  className={classNames("__wab_instance", sty.besoin__s5Ksz)}
                  description={
                    "Encourageons la communaut\u00e9 \u00e0 cr\u00e9er des opportunit\u00e9s."
                  }
                  titre={"R\u00e9compense de l'Apport d'Affaires"}
                >
                  <CaseRoundSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__m3Ni2)}
                    role={"img"}
                  />
                </Besoin>
                <Besoin
                  className={classNames("__wab_instance", sty.besoin___7Pu0U)}
                  description={"Chaque euro est trac\u00e9 et expliqu\u00e9."}
                  titre={"Transparence Totale "}
                >
                  <LoupeSearchSvgrepoCom1SvgIcon
                    className={classNames(projectcss.all, sty.svg__fpets)}
                    role={"img"}
                  />
                </Besoin>
                <Besoin
                  className={classNames("__wab_instance", sty.besoin__zcrQ)}
                  description={
                    "L'entreprise paie Netir, nous nous occupons de la r\u00e9partition."
                  }
                  titre={"Paiements Simplifi\u00e9s"}
                >
                  <TransferAltSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__jlhSw)}
                    role={"img"}
                  />
                </Besoin>
              </div>
            </section>
            <div
              data-plasmic-name={"testimonials"}
              data-plasmic-override={overrides.testimonials}
              className={classNames(projectcss.all, sty.testimonials)}
            >
              <div
                data-plasmic-name={"titre4"}
                data-plasmic-override={overrides.titre4}
                className={classNames(projectcss.all, sty.titre4)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__z3BKk
                  )}
                >
                  {"Fonctionnement de la Facturation sur Netir : "}
                </h2>
                <h3
                  data-plasmic-name={"h3"}
                  data-plasmic-override={overrides.h3}
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3
                  )}
                >
                  {"Simple et Transparent"}
                </h3>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4BArV
                )}
              >
                {
                  "La gestion financi\u00e8re sur Netir est con\u00e7ue pour \u00eatre fluide et s\u00e9curis\u00e9e, minimisant la charge administrative pour le freelance, le mentor et l'apporteur d'affaires."
                }
              </div>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__oMvIz)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                loading={"lazy"}
                src={{
                  src: captureDecran20251010A154016Png7UFuwY72TuE,
                  fullWidth: 2100,
                  fullHeight: 1170,
                  aspectRatio: undefined
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__iCv4)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                loading={"lazy"}
                src={{
                  src: captureDecran20251010A161709PngHTnJgsLhFOhb,
                  fullWidth: 1546,
                  fullHeight: 1192,
                  aspectRatio: undefined
                }}
              />

              <div className={classNames(projectcss.all, sty.freeBox__ubBdb)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__d9O5J
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"En Bref :"}
                    </span>
                  </React.Fragment>
                </div>
                <ul
                  data-plasmic-name={"ul"}
                  data-plasmic-override={overrides.ul}
                  className={classNames(projectcss.all, projectcss.ul, sty.ul)}
                >
                  <li
                    className={classNames(
                      projectcss.all,
                      projectcss.li,
                      projectcss.__wab_text,
                      sty.li__vib9B
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Une seule facture pour le client : "}
                      </span>
                      <React.Fragment>
                        {"Simplification pour l'entreprise."}
                      </React.Fragment>
                    </React.Fragment>
                  </li>
                  <li
                    className={classNames(
                      projectcss.all,
                      projectcss.li,
                      projectcss.__wab_text,
                      sty.li__iNs4V
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"R\u00e9partition automatis\u00e9e par Netir : "}
                      </span>
                      <React.Fragment>
                        {
                          "Moins d'administration pour le freelance, le mentor et l'apporteur d'affaires.\n"
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </li>
                  <li
                    className={classNames(
                      projectcss.all,
                      projectcss.li,
                      projectcss.__wab_text,
                      sty.li__tGKt
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Transparence garantie : "}
                      </span>
                      <React.Fragment>
                        {"Chaque d\u00e9duction est claire et justifi\u00e9e."}
                      </React.Fragment>
                    </React.Fragment>
                  </li>
                  <li
                    className={classNames(
                      projectcss.all,
                      projectcss.li,
                      projectcss.__wab_text,
                      sty.li__ypuYh
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"S\u00e9curit\u00e9 des paiements : "}
                      </span>
                      <React.Fragment>
                        {"Gr\u00e2ce \u00e0 notre partenaire Stripe."}
                      </React.Fragment>
                    </React.Fragment>
                  </li>
                </ul>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__caCs
                  )}
                >
                  {
                    "Ce syst\u00e8me assure que chaque acteur re\u00e7oit sa juste part, sans tracas, et avec une visibilit\u00e9 compl\u00e8te sur la provenance et la destination des fonds."
                  }
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"callToAction3"}
              data-plasmic-override={overrides.callToAction3}
              className={classNames(projectcss.all, sty.callToAction3)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__z14Pd)}>
                <div className={classNames(projectcss.all, sty.freeBox__ds2LM)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__mkb5T
                    )}
                  >
                    {
                      "D\u00e9couvrez les Missions. \nOptimisez Votre R\u00e9mun\u00e9ration."
                    }
                  </h2>
                  <ButtonPrimary
                    data-plasmic-name={"buttonButton5"}
                    data-plasmic-override={overrides.buttonButton5}
                    className={classNames("__wab_instance", sty.buttonButton5)}
                    color={generateStateValueProp($state, [
                      "buttonButton5",
                      "color"
                    ])}
                    end={
                      <NIcons2Icon
                        className={classNames(projectcss.all, sty.svg___611HO)}
                        role={"img"}
                      />
                    }
                    interactionEffect2={
                      <div
                        data-plasmic-name={"interactionEffect4"}
                        data-plasmic-override={overrides.interactionEffect4}
                        className={classNames(
                          projectcss.all,
                          sty.interactionEffect4
                        )}
                      />
                    }
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pyJpf
                        )}
                      >
                        {"Inscris-toi sur Netir !"}
                      </div>
                    }
                    linkTo={"netir.fr/sign-up"}
                    onColorChange2={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "buttonButton5",
                        "color"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onTypeChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "buttonButton5",
                        "type"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    type={generateStateValueProp($state, [
                      "buttonButton5",
                      "type"
                    ])}
                  />
                </div>
              </div>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__pR0Na)}
                displayHeight={"100%"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "tabletOnly")
                    ? "200px"
                    : "380px"
                }
                loading={"lazy"}
                src={{
                  src: chevre2RemovebgPreviewPngO75IhK4K4VeR,
                  fullWidth: 427,
                  fullHeight: 585,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div
              data-plasmic-name={"faq"}
              data-plasmic-override={overrides.faq}
              className={classNames(projectcss.all, sty.faq)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__klRw5)}>
                <div
                  data-plasmic-name={"titre7"}
                  data-plasmic-override={overrides.titre7}
                  className={classNames(projectcss.all, sty.titre7)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__sk8Mu
                    )}
                  >
                    {"Netir en clair : Vos questions, nos r\u00e9ponses."}
                  </h2>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__yAneP)}>
                  <div
                    data-plasmic-name={"questions"}
                    data-plasmic-override={overrides.questions}
                    className={classNames(projectcss.all, sty.questions)}
                  >
                    <Faq
                      answer={
                        "Oui, la transparence est une valeur cl\u00e9 chez Netir. Chaque d\u00e9duction est clairement indiqu\u00e9e sur la r\u00e9partition et sur la facture finale du freelance. Vous savez exactement comment l'argent est partag\u00e9."
                      }
                      className={classNames("__wab_instance", sty.faq__y8GeT)}
                      question={
                        "Le mod\u00e8le de r\u00e9mun\u00e9ration est-il transparent ?"
                      }
                    />

                    <Faq
                      answer={
                        "L'entreprise cliente paie 100% de la mission \u00e0 Netir. C'est Netir qui se charge ensuite de vous verser votre part nette directement sur votre compte bancaire, apr\u00e8s avoir d\u00e9duit et revers\u00e9 toutes les commissions. Cela simplifie votre gestion administrative."
                      }
                      className={classNames("__wab_instance", sty.faq__jmLqv)}
                      question={"Qui me paie en tant que freelance ?"}
                    />

                    <Faq
                      answer={
                        "Si un freelance que vous accompagnez r\u00e9alise une mission, vous percevez une commission n\u00e9goci\u00e9e avec lui. Le pourcentage de cette commission est flexible et d\u00e9pend de l'ampleur et de la dur\u00e9e de votre accompagnement."
                      }
                      className={classNames("__wab_instance", sty.faq__x4Kc5)}
                      question={"Comment fonctionne la commission du mentor ?"}
                    />

                    <Faq
                      answer={
                        "Netir d\u00e9duit automatiquement votre commission du montant total de la mission et vous la verse directement. Vous n'avez pas \u00e0 facturer le freelance directement."
                      }
                      className={classNames("__wab_instance", sty.faq__vj8A)}
                      question={
                        "Comment ma commission de mentor est-elle pay\u00e9e ?"
                      }
                    />

                    <Faq
                      answer={
                        "Non, comme pour le mentorat, le pourcentage de la commission d'apporteur d'affaires est flexible et est d\u00e9fini lors de la mise en relation."
                      }
                      className={classNames("__wab_instance", sty.faq___7QgYy)}
                      question={
                        "La commission d'apporteur d'affaires est-elle fixe ?"
                      }
                    />

                    <Faq
                      answer={
                        "Oui, votre tableau de bord Netir vous donnera acc\u00e8s \u00e0 un historique d\u00e9taill\u00e9 de toutes vos missions, des montants factur\u00e9s et des r\u00e9partitions de commissions, pour une clart\u00e9 totale."
                      }
                      className={classNames("__wab_instance", sty.faq___9Zifo)}
                      question={
                        "Puis-je voir un relev\u00e9 d\u00e9taill\u00e9 de mes paiements et commissions ?"
                      }
                    />
                  </div>
                  <div
                    data-plasmic-name={"illustration"}
                    data-plasmic-override={overrides.illustration}
                    className={classNames(projectcss.all, sty.illustration)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__csUd)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "100%"
                          : hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "454px"
                            : "auto"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "184%"
                          : hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "136%"
                            : "80%"
                      }
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "244px"
                          : hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "635px"
                            : "auto"
                      }
                      loading={"lazy"}
                      src={{
                        src: geminiGeneratedImage8R11Yk8R11Yk8R11RemovebgPreviewPngBZ8T737YaQxk,
                        fullWidth: 427,
                        fullHeight: 585,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              </div>
            </div>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  body: [
    "body",
    "wrapper",
    "hero",
    "siteHeader",
    "buttonButton",
    "interactionEffect",
    "pres",
    "value",
    "titres",
    "h1",
    "buttons2",
    "buttonButton2",
    "interactionEffect2",
    "buttonButton6",
    "interactionEffect6",
    "modele",
    "titre",
    "graphique",
    "avantages",
    "testimonials",
    "titre4",
    "h3",
    "ul",
    "callToAction3",
    "buttonButton5",
    "interactionEffect4",
    "faq",
    "titre7",
    "questions",
    "illustration",
    "footer"
  ],
  wrapper: [
    "wrapper",
    "hero",
    "siteHeader",
    "buttonButton",
    "interactionEffect",
    "pres",
    "value",
    "titres",
    "h1",
    "buttons2",
    "buttonButton2",
    "interactionEffect2",
    "buttonButton6",
    "interactionEffect6",
    "modele",
    "titre",
    "graphique",
    "avantages",
    "testimonials",
    "titre4",
    "h3",
    "ul",
    "callToAction3",
    "buttonButton5",
    "interactionEffect4",
    "faq",
    "titre7",
    "questions",
    "illustration",
    "footer"
  ],
  hero: [
    "hero",
    "siteHeader",
    "buttonButton",
    "interactionEffect",
    "pres",
    "value",
    "titres",
    "h1",
    "buttons2",
    "buttonButton2",
    "interactionEffect2",
    "buttonButton6",
    "interactionEffect6"
  ],
  siteHeader: ["siteHeader", "buttonButton", "interactionEffect"],
  buttonButton: ["buttonButton", "interactionEffect"],
  interactionEffect: ["interactionEffect"],
  pres: [
    "pres",
    "value",
    "titres",
    "h1",
    "buttons2",
    "buttonButton2",
    "interactionEffect2",
    "buttonButton6",
    "interactionEffect6"
  ],
  value: [
    "value",
    "titres",
    "h1",
    "buttons2",
    "buttonButton2",
    "interactionEffect2",
    "buttonButton6",
    "interactionEffect6"
  ],
  titres: [
    "titres",
    "h1",
    "buttons2",
    "buttonButton2",
    "interactionEffect2",
    "buttonButton6",
    "interactionEffect6"
  ],
  h1: ["h1"],
  buttons2: [
    "buttons2",
    "buttonButton2",
    "interactionEffect2",
    "buttonButton6",
    "interactionEffect6"
  ],
  buttonButton2: ["buttonButton2", "interactionEffect2"],
  interactionEffect2: ["interactionEffect2"],
  buttonButton6: ["buttonButton6", "interactionEffect6"],
  interactionEffect6: ["interactionEffect6"],
  modele: ["modele", "titre"],
  titre: ["titre"],
  graphique: ["graphique"],
  avantages: ["avantages"],
  testimonials: ["testimonials", "titre4", "h3", "ul"],
  titre4: ["titre4", "h3"],
  h3: ["h3"],
  ul: ["ul"],
  callToAction3: ["callToAction3", "buttonButton5", "interactionEffect4"],
  buttonButton5: ["buttonButton5", "interactionEffect4"],
  interactionEffect4: ["interactionEffect4"],
  faq: ["faq", "titre7", "questions", "illustration"],
  titre7: ["titre7"],
  questions: ["questions"],
  illustration: ["illustration"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  body: "div";
  wrapper: "div";
  hero: "div";
  siteHeader: typeof SiteHeader;
  buttonButton: typeof ButtonPrimary;
  interactionEffect: "div";
  pres: "div";
  value: "div";
  titres: "div";
  h1: "h1";
  buttons2: "div";
  buttonButton2: typeof ButtonPrimary;
  interactionEffect2: "div";
  buttonButton6: typeof ButtonPrimary;
  interactionEffect6: "div";
  modele: "div";
  titre: "div";
  graphique: "section";
  avantages: "section";
  testimonials: "div";
  titre4: "div";
  h3: "h3";
  ul: "ul";
  callToAction3: "div";
  buttonButton5: typeof ButtonPrimary;
  interactionEffect4: "div";
  faq: "div";
  titre7: "div";
  questions: "div";
  illustration: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRemuneration__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRemuneration__VariantsArgs;
    args?: PlasmicRemuneration__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicRemuneration__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicRemuneration__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRemuneration__ArgProps,
          internalVariantPropNames: PlasmicRemuneration__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRemuneration__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "body") {
    func.displayName = "PlasmicRemuneration";
  } else {
    func.displayName = `PlasmicRemuneration.${nodeName}`;
  }
  return func;
}

export const PlasmicRemuneration = Object.assign(
  // Top-level PlasmicRemuneration renders the root element
  makeNodeComponent("body"),
  {
    // Helper components rendering sub-elements
    wrapper: makeNodeComponent("wrapper"),
    hero: makeNodeComponent("hero"),
    siteHeader: makeNodeComponent("siteHeader"),
    buttonButton: makeNodeComponent("buttonButton"),
    interactionEffect: makeNodeComponent("interactionEffect"),
    pres: makeNodeComponent("pres"),
    value: makeNodeComponent("value"),
    titres: makeNodeComponent("titres"),
    h1: makeNodeComponent("h1"),
    buttons2: makeNodeComponent("buttons2"),
    buttonButton2: makeNodeComponent("buttonButton2"),
    interactionEffect2: makeNodeComponent("interactionEffect2"),
    buttonButton6: makeNodeComponent("buttonButton6"),
    interactionEffect6: makeNodeComponent("interactionEffect6"),
    modele: makeNodeComponent("modele"),
    titre: makeNodeComponent("titre"),
    graphique: makeNodeComponent("graphique"),
    avantages: makeNodeComponent("avantages"),
    testimonials: makeNodeComponent("testimonials"),
    titre4: makeNodeComponent("titre4"),
    h3: makeNodeComponent("h3"),
    ul: makeNodeComponent("ul"),
    callToAction3: makeNodeComponent("callToAction3"),
    buttonButton5: makeNodeComponent("buttonButton5"),
    interactionEffect4: makeNodeComponent("interactionEffect4"),
    faq: makeNodeComponent("faq"),
    titre7: makeNodeComponent("titre7"),
    questions: makeNodeComponent("questions"),
    illustration: makeNodeComponent("illustration"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicRemuneration
    internalVariantProps: PlasmicRemuneration__VariantProps,
    internalArgProps: PlasmicRemuneration__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Comprendre la Rémunération des Missions sur Netir",
      description:
        "Netir est la plateforme qui vous garantie la qualité des freelance grâce aux recommandations des mentors.",
      ogImageSrc:
        "https://site-assets.plasmic.app/9f3005b94278521a011c47609ecbb96a.png",
      canonical: "https://www.netir.fr"
    }
  }
);

export default PlasmicRemuneration;
/* prettier-ignore-end */
