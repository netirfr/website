/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: JbGOPxR5Ca_f

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicHomepageInteret.module.css"; // plasmic-import: JbGOPxR5Ca_f/css

import image25P3WJjSxncOy from "./images/image25.png"; // plasmic-import: P3wJJSxnc_Oy/picture
import image24Cvg0WtVGlsdc from "./images/image24.svg"; // plasmic-import: Cvg0WtVGlsdc/picture

createPlasmicElementProxy;

export type PlasmicHomepageInteret__VariantMembers = {
  vert: "unnamedVariant" | "unnamedVariant2";
  mauve: "unnamedVariant" | "unnamedVariant2";
  jaune: "unnamedVariant";
  unnamedGroup: "unnamedVariant";
};
export type PlasmicHomepageInteret__VariantsArgs = {
  vert?: MultiChoiceArg<"unnamedVariant" | "unnamedVariant2">;
  mauve?: MultiChoiceArg<"unnamedVariant" | "unnamedVariant2">;
  jaune?: MultiChoiceArg<"unnamedVariant">;
  unnamedGroup?: MultiChoiceArg<"unnamedVariant">;
};
type VariantPropType = keyof PlasmicHomepageInteret__VariantsArgs;
export const PlasmicHomepageInteret__VariantProps = new Array<VariantPropType>(
  "vert",
  "mauve",
  "jaune",
  "unnamedGroup"
);

export type PlasmicHomepageInteret__ArgsType = {
  img?: React.ComponentProps<typeof PlasmicImg__>["src"];
  qui?: string;
  objectif?: string;
  quoi1?: string;
  quoi2?: string;
  quoi3?: string;
};
type ArgPropType = keyof PlasmicHomepageInteret__ArgsType;
export const PlasmicHomepageInteret__ArgProps = new Array<ArgPropType>(
  "img",
  "qui",
  "objectif",
  "quoi1",
  "quoi2",
  "quoi3"
);

export type PlasmicHomepageInteret__OverridesType = {
  interet?: Flex__<"div">;
};

export interface DefaultHomepageInteretProps {
  img?: React.ComponentProps<typeof PlasmicImg__>["src"];
  qui?: string;
  objectif?: string;
  quoi1?: string;
  quoi2?: string;
  quoi3?: string;
  vert?: MultiChoiceArg<"unnamedVariant" | "unnamedVariant2">;
  mauve?: MultiChoiceArg<"unnamedVariant" | "unnamedVariant2">;
  jaune?: MultiChoiceArg<"unnamedVariant">;
  unnamedGroup?: MultiChoiceArg<"unnamedVariant">;
  className?: string;
}

const $$ = {};

function PlasmicHomepageInteret__RenderFunc(props: {
  variants: PlasmicHomepageInteret__VariantsArgs;
  args: PlasmicHomepageInteret__ArgsType;
  overrides: PlasmicHomepageInteret__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          img: {
            src: image25P3WJjSxncOy,
            fullWidth: 795,
            fullHeight: 971,
            aspectRatio: undefined
          },
          qui: "Mentor",
          objectif: "Mon\u00e9tisez votre expertise !",
          quoi1:
            "Envie de transmettre vos connaissances ? Accompagnez et valorisez votre expertise aupr\u00e8s de freelances motiv\u00e9s \u00e0 monter en comp\u00e9tences.",
          quoi2:
            "Peu de revenus compl\u00e9mentaires ? G\u00e9n\u00e9rez un revenu stable en mon\u00e9tisant vos connaissances.",
          quoi3:
            "Trop de paperasse \u00e0 g\u00e9rer ? Profitez d\u2019un support administratif int\u00e9gr\u00e9 et d\u2019une commission de seulement 3%."
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "vert",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.vert
      },
      {
        path: "mauve",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.mauve
      },
      {
        path: "jaune",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.jaune
      },
      {
        path: "unnamedGroup",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.unnamedGroup
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"interet"}
      data-plasmic-override={overrides.interet}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.interet,
        {
          [sty.interetjaune_unnamedVariant]: hasVariant(
            $state,
            "jaune",
            "unnamedVariant"
          ),
          [sty.interetmauve_unnamedVariant2]: hasVariant(
            $state,
            "mauve",
            "unnamedVariant2"
          ),
          [sty.interetmauve_unnamedVariant]: hasVariant(
            $state,
            "mauve",
            "unnamedVariant"
          ),
          [sty.interetunnamedGroup_unnamedVariant]: hasVariant(
            $state,
            "unnamedGroup",
            "unnamedVariant"
          ),
          [sty.interetvert_unnamedVariant2]: hasVariant(
            $state,
            "vert",
            "unnamedVariant2"
          ),
          [sty.interetvert_unnamedVariant]: hasVariant(
            $state,
            "vert",
            "unnamedVariant"
          )
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__z11R, {
          [sty.freeBoxjaune_unnamedVariant__z11RziGX]: hasVariant(
            $state,
            "jaune",
            "unnamedVariant"
          ),
          [sty.freeBoxmauve_unnamedVariant2__z11REturh]: hasVariant(
            $state,
            "mauve",
            "unnamedVariant2"
          ),
          [sty.freeBoxmauve_unnamedVariant__z11RDhMsC]: hasVariant(
            $state,
            "mauve",
            "unnamedVariant"
          ),
          [sty.freeBoxunnamedGroup_unnamedVariant__z11RGWmA]: hasVariant(
            $state,
            "unnamedGroup",
            "unnamedVariant"
          ),
          [sty.freeBoxvert_unnamedVariant2__z11RmdoIr]: hasVariant(
            $state,
            "vert",
            "unnamedVariant2"
          ),
          [sty.freeBoxvert_unnamedVariant__z11RrN9R]: hasVariant(
            $state,
            "vert",
            "unnamedVariant"
          )
        })}
      >
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__bW0Kz, {
            [sty.imgjaune_unnamedVariant__bW0KzziGX]: hasVariant(
              $state,
              "jaune",
              "unnamedVariant"
            ),
            [sty.imgmauve_unnamedVariant__bW0KzDhMsC]: hasVariant(
              $state,
              "mauve",
              "unnamedVariant"
            ),
            [sty.imgvert_unnamedVariant__bW0KzrN9R]: hasVariant(
              $state,
              "vert",
              "unnamedVariant"
            )
          })}
          displayHeight={
            hasVariant($state, "vert", "unnamedVariant") &&
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "auto"
              : hasVariant($state, "vert", "unnamedVariant") &&
                  hasVariant(globalVariants, "screen", "tabletOnly")
                ? "141px"
                : hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "auto"
                  : hasVariant(globalVariants, "screen", "tabletOnly")
                    ? "141px"
                    : "auto"
          }
          displayMaxHeight={"none"}
          displayMaxWidth={
            hasVariant($state, "vert", "unnamedVariant") &&
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "16%"
              : hasVariant($state, "vert", "unnamedVariant") &&
                  hasVariant(globalVariants, "screen", "tabletOnly")
                ? "15%"
                : hasVariant($state, "vert", "unnamedVariant")
                  ? "20%"
                  : hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "16%"
                    : hasVariant(globalVariants, "screen", "tabletOnly")
                      ? "15%"
                      : "20%"
          }
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant($state, "jaune", "unnamedVariant") &&
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "60px"
              : hasVariant($state, "mauve", "unnamedVariant") &&
                  hasVariant(globalVariants, "screen", "mobileOnly")
                ? "60px"
                : hasVariant($state, "vert", "unnamedVariant") &&
                    hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "60px"
                  : hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "60px"
                    : "auto"
          }
          loading={"lazy"}
          src={args.img}
        />

        <div
          className={classNames(projectcss.all, sty.freeBox__wUcds, {
            [sty.freeBoxmauve_unnamedVariant__wUcdsDhMsC]: hasVariant(
              $state,
              "mauve",
              "unnamedVariant"
            ),
            [sty.freeBoxvert_unnamedVariant2__wUcdsmdoIr]: hasVariant(
              $state,
              "vert",
              "unnamedVariant2"
            )
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__inZgt)}>
            <div className={classNames(projectcss.all, sty.freeBox__xRGmX)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__obmRq,
                  {
                    [sty.textjaune_unnamedVariant__obmRqziGX]: hasVariant(
                      $state,
                      "jaune",
                      "unnamedVariant"
                    ),
                    [sty.textmauve_unnamedVariant__obmRqDhMsC]: hasVariant(
                      $state,
                      "mauve",
                      "unnamedVariant"
                    ),
                    [sty.textvert_unnamedVariant__obmRqrN9R]: hasVariant(
                      $state,
                      "vert",
                      "unnamedVariant"
                    )
                  }
                )}
              >
                {hasVariant($state, "jaune", "unnamedVariant") ? (
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.qui;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Mentor";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                ) : (
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.qui;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Mentor";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                )}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xiak,
                  {
                    [sty.textmauve_unnamedVariant__xiakDhMsC]: hasVariant(
                      $state,
                      "mauve",
                      "unnamedVariant"
                    )
                  }
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.objectif;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Mon\u00e9tisez votre expertise !";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                ) : (
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.objectif;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Mon\u00e9tisez votre expertise !";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                )}
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__vNnyy, {
                [sty.freeBoxvert_unnamedVariant__vNnyyrN9R]: hasVariant(
                  $state,
                  "vert",
                  "unnamedVariant"
                )
              })}
            >
              <div className={classNames(projectcss.all, sty.freeBox__pTGrp)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__iRa4Z)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "25px"
                      : "35px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: image24Cvg0WtVGlsdc,
                    fullWidth: 76,
                    fullHeight: 45,
                    aspectRatio: 1.688889
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vqqp2,
                    {
                      [sty.textvert_unnamedVariant__vqqp2RN9R]: hasVariant(
                        $state,
                        "vert",
                        "unnamedVariant"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.quoi1;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__fk92C, {
                  [sty.freeBoxvert_unnamedVariant__fk92CrN9R]: hasVariant(
                    $state,
                    "vert",
                    "unnamedVariant"
                  )
                })}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__uGqRd)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "25px"
                      : "35px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: image24Cvg0WtVGlsdc,
                    fullWidth: 76,
                    fullHeight: 45,
                    aspectRatio: 1.688889
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__b86Zm
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.quoi2;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__rtPEa)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__a2TRx)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "25px"
                      : "35px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: image24Cvg0WtVGlsdc,
                    fullWidth: 76,
                    fullHeight: 45,
                    aspectRatio: 1.688889
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zIhBg
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.quoi3;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  interet: ["interet"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  interet: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepageInteret__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepageInteret__VariantsArgs;
    args?: PlasmicHomepageInteret__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicHomepageInteret__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicHomepageInteret__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepageInteret__ArgProps,
          internalVariantPropNames: PlasmicHomepageInteret__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepageInteret__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "interet") {
    func.displayName = "PlasmicHomepageInteret";
  } else {
    func.displayName = `PlasmicHomepageInteret.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepageInteret = Object.assign(
  // Top-level PlasmicHomepageInteret renders the root element
  makeNodeComponent("interet"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicHomepageInteret
    internalVariantProps: PlasmicHomepageInteret__VariantProps,
    internalArgProps: PlasmicHomepageInteret__ArgProps
  }
);

export default PlasmicHomepageInteret;
/* prettier-ignore-end */
