/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: TFft5XGJ-fUJ

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import StepperComponentForm from "../../StepperComponentForm"; // plasmic-import: EFKlzFDp6AyF/component
import FormFormCompany from "../../FormFormCompany"; // plasmic-import: YzcQfYGIWd1a/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdPassword } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdPassword_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdCheckbox } from "@plasmicpkgs/antd5/skinny/registerCheckbox";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicStepperComponentFormContainer.module.css"; // plasmic-import: TFft5XGJ-fUJ/css

import PadlockLockedSvgrepoComSvgIcon from "./icons/PlasmicIcon__PadlockLockedSvgrepoComSvg"; // plasmic-import: vpZ026OiGQE1/icon
import BarSvgrepoComSvgIcon from "./icons/PlasmicIcon__BarSvgrepoComSvg"; // plasmic-import: L_A-j4tKSVFr/icon
import Bag4SvgrepoComSvgIcon from "./icons/PlasmicIcon__Bag4SvgrepoComSvg"; // plasmic-import: xeojuuOAnBdF/icon
import DollarCircleSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__DollarCircleSvgrepoCom1Svg"; // plasmic-import: _B8xOJaCg617/icon
import UserSvgrepoCom4SvgIcon from "./icons/PlasmicIcon__UserSvgrepoCom4Svg"; // plasmic-import: QydiZu8DMym3/icon
import nLogo4X7VwM2YjHhq from "./images/nLogo.svg"; // plasmic-import: 4X7vwM2yjHHQ/picture

createPlasmicElementProxy;

export type PlasmicStepperComponentFormContainer__VariantMembers = {};
export type PlasmicStepperComponentFormContainer__VariantsArgs = {};
type VariantPropType = keyof PlasmicStepperComponentFormContainer__VariantsArgs;
export const PlasmicStepperComponentFormContainer__VariantProps =
  new Array<VariantPropType>();

export type PlasmicStepperComponentFormContainer__ArgsType = {
  slot2?: React.ReactNode;
  children?: React.ReactNode;
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  children4?: React.ReactNode;
  slot3?: React.ReactNode;
  slot?: React.ReactNode;
  form2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicStepperComponentFormContainer__ArgsType;
export const PlasmicStepperComponentFormContainer__ArgProps =
  new Array<ArgPropType>(
    "slot2",
    "children",
    "children2",
    "children3",
    "children4",
    "slot3",
    "slot",
    "form2"
  );

export type PlasmicStepperComponentFormContainer__OverridesType = {
  root?: Flex__<"section">;
  columns?: Flex__<"div">;
  h3?: Flex__<"h3">;
  stepperComponentForm?: Flex__<typeof StepperComponentForm>;
  formFormCompany?: Flex__<typeof FormFormCompany>;
};

export interface DefaultStepperComponentFormContainerProps {
  slot2?: React.ReactNode;
  children?: React.ReactNode;
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  children4?: React.ReactNode;
  slot3?: React.ReactNode;
  slot?: React.ReactNode;
  form2?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicStepperComponentFormContainer__RenderFunc(props: {
  variants: PlasmicStepperComponentFormContainer__VariantsArgs;
  args: PlasmicStepperComponentFormContainer__ArgsType;
  overrides: PlasmicStepperComponentFormContainer__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const styleTokensClassNames = _useStyleTokens();

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__nEXv)}>
          <h3
            data-plasmic-name={"h3"}
            data-plasmic-override={overrides.h3}
            className={classNames(projectcss.all, projectcss.h3, sty.h3)}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jQemT
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {"Vous n\u2019\u00eates plus qu\u2019\u00e0 "}
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700, color: "#FF0000" }}
                    >
                      {"3 \u00e9tapes"}
                    </span>
                    <React.Fragment>
                      {
                        " de trouver LE freelance id\u00e9al pour votre projet !\r\n\r"
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
              ),
              value: args.slot2,
              className: classNames(sty.slotTargetSlot2)
            })}
          </h3>
          <StepperComponentForm
            data-plasmic-name={"stepperComponentForm"}
            data-plasmic-override={overrides.stepperComponentForm}
            children2={renderPlasmicSlot({
              defaultContents: (
                <div className={classNames(projectcss.all, sty.columns__jeS8O)}>
                  <div
                    className={classNames(projectcss.all, sty.column__ypbQr)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__y7Fdx)}
                    >
                      <Bag4SvgrepoComSvgIcon
                        className={classNames(projectcss.all, sty.svg__o9Tv)}
                        role={"img"}
                      />
                    </div>
                    <BarSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__urEqI)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__jChya)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__apgYp)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nIz72
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xilsh
                          )}
                        >
                          {"\u00c9tape 2"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pkDp
                        )}
                      >
                        {"Votre entreprise"}
                      </div>
                    </div>
                  </div>
                </div>
              ),
              value: args.children2
            })}
            children3={renderPlasmicSlot({
              defaultContents: (
                <div className={classNames(projectcss.all, sty.columns__dbote)}>
                  <div
                    className={classNames(projectcss.all, sty.column__pUhEz)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ly5UJ)}
                    >
                      <DollarCircleSvgrepoCom1SvgIcon
                        className={classNames(projectcss.all, sty.svg__kW3D)}
                        role={"img"}
                      />
                    </div>
                    <BarSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg___6Rhz4)}
                      role={"img"}
                    />
                  </div>
                  <div className={classNames(projectcss.all, sty.column__pUfH)}>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__iIf9P)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kXtSt
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ujPm6
                          )}
                        >
                          {"\u00c9tape 3"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eBmOl
                        )}
                      >
                        {"Facturation"}
                      </div>
                    </div>
                  </div>
                </div>
              ),
              value: args.children3
            })}
            children4={renderPlasmicSlot({
              defaultContents: (
                <div className={classNames(projectcss.all, sty.columns__tYl1F)}>
                  <div className={classNames(projectcss.all, sty.column__iRmq)}>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xb4Ur)}
                    >
                      <UserSvgrepoCom4SvgIcon
                        className={classNames(projectcss.all, sty.svg__uljNj)}
                        role={"img"}
                      />
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column___4OsKb)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__eiN8L)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vF1Kb
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kjxM
                          )}
                        >
                          {"\u00c9tape 4"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nNq9Y
                        )}
                      >
                        {"Responsable du compte"}
                      </div>
                    </div>
                  </div>
                </div>
              ),
              value: args.children4
            })}
            className={classNames("__wab_instance", sty.stepperComponentForm)}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <div className={classNames(projectcss.all, sty.columns__bpR3C)}>
                  <div
                    className={classNames(projectcss.all, sty.column__mmzK5)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__w8YuR)}
                    >
                      <PadlockLockedSvgrepoComSvgIcon
                        className={classNames(projectcss.all, sty.svg___92Nag)}
                        role={"img"}
                      />
                    </div>
                    <BarSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__pKb4K)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__q0Beo)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__hD5Ee)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__g0ERs
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rKzUo
                          )}
                        >
                          {"\u00c9tape 1"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__k8Idk
                        )}
                      >
                        {"Inscription"}
                      </div>
                    </div>
                  </div>
                </div>
              ),
              value: args.children
            })}
          </StepperComponentForm>
        </div>
        <div className={classNames(projectcss.all, sty.column__areOy)}>
          <div className={classNames(projectcss.all, sty.freeBox___73Q8E)}>
            {renderPlasmicSlot({
              defaultContents: (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__zeT3L)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"87px"}
                  loading={"lazy"}
                  src={{
                    src: nLogo4X7VwM2YjHhq,
                    fullWidth: 100.26872253417969,
                    fullHeight: 36.720001220703125,
                    aspectRatio: 2.72973
                  }}
                />
              ),

              value: args.slot3
            })}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__pUjBd)}>
            {renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qOeFg
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <h5
                        className={classNames(
                          projectcss.all,
                          projectcss.h5,
                          projectcss.__wab_text,
                          sty.h5__fJ55G
                        )}
                      >
                        {"Tout commence ici !\r"}
                      </h5>
                    }
                    <React.Fragment>
                      {
                        "Utilisez une adresse e-mail professionnelle pour vous inscrire.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
              ),
              value: args.slot
            })}
          </div>
          <FormFormCompany
            data-plasmic-name={"formFormCompany"}
            data-plasmic-override={overrides.formFormCompany}
            className={classNames("__wab_instance", sty.formFormCompany)}
            form2={renderPlasmicSlot({
              defaultContents: (() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form__wmkbt),
                  formItems: [
                    { label: "Name", name: "name", inputType: "Text" },
                    {
                      label: "Message",
                      name: "message",
                      inputType: "Text Area"
                    }
                  ],
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: "advanced",
                  requiredMark: true,
                  submitSlot: null,
                  validateTrigger: [],
                  wrapperCol: (() => {
                    const __composite = {
                      span: null,
                      horizontalOnly: null,
                      offset: null
                    };
                    __composite["span"] = 24;
                    __composite["horizontalOnly"] = true;
                    __composite["offset"] = 23;
                    return __composite;
                  })()
                };

                return (
                  <FormWrapper {...child$Props}>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__elUk7)}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__zG3Oq
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eGp9B
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700, color: "#040000" }}
                              >
                                {"Prenom"}
                              </span>
                            </React.Fragment>
                          </div>
                        }
                        name={"prenom"}
                        valuePropName={"prenom"}
                      >
                        {(() => {
                          const child$Props = {
                            autoFocus: true,
                            className: classNames(
                              "__wab_instance",
                              sty.input__rWrCe
                            ),
                            placeholder: "Pr\u00e9nom",
                            size: "large"
                          };

                          return <AntdInput {...child$Props} />;
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__hCkNt
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__unNp
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "#010000" }}
                              >
                                {"Nom"}
                              </span>
                            </React.Fragment>
                          </div>
                        }
                        name={"nom"}
                        valuePropName={"nom"}
                      >
                        {(() => {
                          const child$Props = {
                            autoFocus: true,
                            className: classNames(
                              "__wab_instance",
                              sty.input__dXlGy
                            ),
                            placeholder: "Nom",
                            size: "large"
                          };

                          return <AntdInput {...child$Props} />;
                        })()}
                      </FormItemWrapper>
                    </div>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__u9TaT
                      )}
                      hidden={false}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mJEyB
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700, color: "#000000" }}
                            >
                              {"Email"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"email"}
                      noLabel={false}
                      rules={[
                        { ruleType: "required", message: "Email obligatoire" }
                      ]}
                      valuePropName={"email"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.input__sRWn
                          ),
                          placeholder: "Email",
                          size: "large"
                        };

                        return <AntdInput {...child$Props} />;
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__lwxEh
                      )}
                      hidden={false}
                      hideValidationMessage={false}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__k44We
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#000000", fontWeight: 700 }}
                            >
                              {"Mot de passe"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"password"}
                      noLabel={false}
                      noStyle={false}
                      shouldUpdate={false}
                      valuePropName={"password"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qiXA
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            bordered: true,
                            className: classNames(
                              "__wab_instance",
                              sty.passwordInput__rwo2D
                            ),
                            maxLength: 8,
                            placeholder: "Mot de passe"
                          };

                          return <AntdPassword {...child$Props} />;
                        })()}
                      </div>
                    </FormItemWrapper>
                    <AntdCheckbox
                      autoFocus={false}
                      className={classNames(
                        "__wab_instance",
                        sty.checkbox___8KpzV
                      )}
                      defaultChecked={false}
                      disabled={false}
                      indeterminate={false}
                      onChange={async checked => {
                        const $steps = {};

                        $steps["updateVariant"] = true
                          ? (() => {
                              const actionArgs = {};
                              return (({ vgroup, value }) => {
                                if (typeof value === "string") {
                                  value = [value];
                                }
                                undefined;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateVariant"] != null &&
                          typeof $steps["updateVariant"] === "object" &&
                          typeof $steps["updateVariant"].then === "function"
                        ) {
                          $steps["updateVariant"] =
                            await $steps["updateVariant"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qyfoe
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#000000" }}
                          >
                            {"J'accepte"}
                          </span>
                          <React.Fragment> </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#FB0101" }}
                          >
                            {"les termes et conditions"}
                          </span>
                        </React.Fragment>
                      </div>
                    </AntdCheckbox>
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__mBmGl
                      )}
                      danger={true}
                      disabled={false}
                      ghost={false}
                      shape={"default"}
                      size={"large"}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9HQbY
                        )}
                      >
                        {"Valider"}
                      </div>
                    </AntdButton>
                  </FormWrapper>
                );
              })(),
              value: args.form2
            })}
          />
        </div>
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns", "h3", "stepperComponentForm", "formFormCompany"],
  columns: ["columns", "h3", "stepperComponentForm", "formFormCompany"],
  h3: ["h3"],
  stepperComponentForm: ["stepperComponentForm"],
  formFormCompany: ["formFormCompany"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "section";
  columns: "div";
  h3: "h3";
  stepperComponentForm: typeof StepperComponentForm;
  formFormCompany: typeof FormFormCompany;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStepperComponentFormContainer__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStepperComponentFormContainer__VariantsArgs;
    args?: PlasmicStepperComponentFormContainer__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<
      PlasmicStepperComponentFormContainer__VariantsArgs,
      ReservedPropsType
    > &
    // Specify args directly as props
    Omit<PlasmicStepperComponentFormContainer__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStepperComponentFormContainer__ArgProps,
          internalVariantPropNames:
            PlasmicStepperComponentFormContainer__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStepperComponentFormContainer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStepperComponentFormContainer";
  } else {
    func.displayName = `PlasmicStepperComponentFormContainer.${nodeName}`;
  }
  return func;
}

export const PlasmicStepperComponentFormContainer = Object.assign(
  // Top-level PlasmicStepperComponentFormContainer renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    h3: makeNodeComponent("h3"),
    stepperComponentForm: makeNodeComponent("stepperComponentForm"),
    formFormCompany: makeNodeComponent("formFormCompany"),

    // Metadata about props expected for PlasmicStepperComponentFormContainer
    internalVariantProps: PlasmicStepperComponentFormContainer__VariantProps,
    internalArgProps: PlasmicStepperComponentFormContainer__ArgProps
  }
);

export default PlasmicStepperComponentFormContainer;
/* prettier-ignore-end */
