/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: zo9N-Lnk8_00

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicCardWithBackground.module.css"; // plasmic-import: zo9N-Lnk8_00/css

createPlasmicElementProxy;

export type PlasmicCardWithBackground__VariantMembers = {};
export type PlasmicCardWithBackground__VariantsArgs = {};
type VariantPropType = keyof PlasmicCardWithBackground__VariantsArgs;
export const PlasmicCardWithBackground__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCardWithBackground__ArgsType = {
  backgroundimage?: React.ComponentProps<typeof PlasmicImg__>["src"];
  titre?: string;
  description?: string;
};
type ArgPropType = keyof PlasmicCardWithBackground__ArgsType;
export const PlasmicCardWithBackground__ArgProps = new Array<ArgPropType>(
  "backgroundimage",
  "titre",
  "description"
);

export type PlasmicCardWithBackground__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  h5?: Flex__<"h5">;
  text?: Flex__<"div">;
};

export interface DefaultCardWithBackgroundProps {
  backgroundimage?: React.ComponentProps<typeof PlasmicImg__>["src"];
  titre?: string;
  description?: string;
  className?: string;
}

const $$ = {};

function PlasmicCardWithBackground__RenderFunc(props: {
  variants: PlasmicCardWithBackground__VariantsArgs;
  args: PlasmicCardWithBackground__ArgsType;
  overrides: PlasmicCardWithBackground__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          titre: "Automobile",
          description:
            "Prise de RDV atelier, renseignements v\\u00e9hicules, suivi SAV, qualification de leads, transfert d'appel"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
      onMouseLeave={async event => {
        const $steps = {};

        $steps["updateIsOpen"] = true
          ? (() => {
              const actionArgs = {
                variable: {
                  objRoot: $state,
                  variablePath: ["isOpen"]
                },
                operation: 4
              };
              return (({ variable, value, startIndex, deleteCount }) => {
                if (!variable) {
                  return;
                }
                const { objRoot, variablePath } = variable;

                const oldValue = $stateGet(objRoot, variablePath);
                $stateSet(objRoot, variablePath, !oldValue);
                return !oldValue;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateIsOpen"] != null &&
          typeof $steps["updateIsOpen"] === "object" &&
          typeof $steps["updateIsOpen"].then === "function"
        ) {
          $steps["updateIsOpen"] = await $steps["updateIsOpen"];
        }
      }}
      onPointerOver={async event => {
        const $steps = {};

        $steps["updateIsOpen"] = true
          ? (() => {
              const actionArgs = {
                variable: {
                  objRoot: $state,
                  variablePath: ["isOpen"]
                },
                operation: 4
              };
              return (({ variable, value, startIndex, deleteCount }) => {
                if (!variable) {
                  return;
                }
                const { objRoot, variablePath } = variable;

                const oldValue = $stateGet(objRoot, variablePath);
                $stateSet(objRoot, variablePath, !oldValue);
                return !oldValue;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateIsOpen"] != null &&
          typeof $steps["updateIsOpen"] === "object" &&
          typeof $steps["updateIsOpen"].then === "function"
        ) {
          $steps["updateIsOpen"] = await $steps["updateIsOpen"];
        }
      }}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <PlasmicImg__
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"100%"}
        displayMaxHeight={"none"}
        displayMaxWidth={"none"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"100%"}
        loading={"lazy"}
        src={(() => {
          try {
            return $props.backgroundimage;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      {(
        triggers.hover_root
          ? true
          : hasVariant(globalVariants, "screen", "tabletOnly")
            ? true
            : false
      ) ? (
        <div className={classNames(projectcss.all, sty.freeBox__aQiPv)} />
      ) : null}
      <div className={classNames(projectcss.all, sty.freeBox__vFjcB)}>
        <h5
          data-plasmic-name={"h5"}
          data-plasmic-override={overrides.h5}
          className={classNames(
            projectcss.all,
            projectcss.h5,
            projectcss.__wab_text,
            sty.h5
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.titre;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Automobile";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </h5>
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {hasVariant(globalVariants, "screen", "mobileOnly") ? (
            <React.Fragment>
              {(() => {
                try {
                  return $props.description;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Prise de RDV atelier, renseignements v\\u00e9hicules, suivi SAV, qualification de leads, transfert d'appel";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          ) : (
            <React.Fragment>
              {(() => {
                try {
                  return $props.description;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Prise de RDV atelier, renseignements v\\u00e9hicules, suivi SAV, qualification de leads, transfert d'appel";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          )}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__iffVb)} />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "h5", "text"],
  img: ["img"],
  h5: ["h5"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  h5: "h5";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardWithBackground__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardWithBackground__VariantsArgs;
    args?: PlasmicCardWithBackground__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicCardWithBackground__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicCardWithBackground__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCardWithBackground__ArgProps,
          internalVariantPropNames: PlasmicCardWithBackground__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCardWithBackground__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardWithBackground";
  } else {
    func.displayName = `PlasmicCardWithBackground.${nodeName}`;
  }
  return func;
}

export const PlasmicCardWithBackground = Object.assign(
  // Top-level PlasmicCardWithBackground renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    h5: makeNodeComponent("h5"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicCardWithBackground
    internalVariantProps: PlasmicCardWithBackground__VariantProps,
    internalArgProps: PlasmicCardWithBackground__ArgProps
  }
);

export default PlasmicCardWithBackground;
/* prettier-ignore-end */
