/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: ThA2uZTqWkZI

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicDashboardRightContent.module.css"; // plasmic-import: ThA2uZTqWkZI/css

createPlasmicElementProxy;

export type PlasmicDashboardRightContent__VariantMembers = {};
export type PlasmicDashboardRightContent__VariantsArgs = {};
type VariantPropType = keyof PlasmicDashboardRightContent__VariantsArgs;
export const PlasmicDashboardRightContent__VariantProps =
  new Array<VariantPropType>();

export type PlasmicDashboardRightContent__ArgsType = { slot?: React.ReactNode };
type ArgPropType = keyof PlasmicDashboardRightContent__ArgsType;
export const PlasmicDashboardRightContent__ArgProps = new Array<ArgPropType>(
  "slot"
);

export type PlasmicDashboardRightContent__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
};

export interface DefaultDashboardRightContentProps {
  slot?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicDashboardRightContent__RenderFunc(props: {
  variants: PlasmicDashboardRightContent__VariantsArgs;
  args: PlasmicDashboardRightContent__ArgsType;
  overrides: PlasmicDashboardRightContent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__x15Md
        )}
      >
        {"Bonjour Nom + prenom \ud83d\udc4b"}
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__ks8U3
        )}
      >
        {"Nom de votre entreprise"}
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__sgpaz
        )}
      >
        {"Entreprise en attente de compl\u00e9tion\r"}
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__lcKug
        )}
      >
        {
          "Renseigne les informations de ton entreprise pour cr\u00e9er des missions, ce qui permettra \u00e0 Netir de faciliter la contractualisation et la facturation entre toi (freelance) et ton entreprise cliente.\r\n\r"
        }
      </div>
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <AntdButton
              className={classNames("__wab_instance", sty.button__iRn4Z)}
              danger={true}
              disabled={false}
              ghost={false}
              href={`/sign-up/company-3`}
              shape={"default"}
              size={"large"}
              submitsForm={true}
              target={false}
              type={"primary"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zt27V
                )}
              >
                {"Renseigner mon entreprise"}
              </div>
            </AntdButton>
          ),
          value: args.slot
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDashboardRightContent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDashboardRightContent__VariantsArgs;
    args?: PlasmicDashboardRightContent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicDashboardRightContent__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicDashboardRightContent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDashboardRightContent__ArgProps,
          internalVariantPropNames: PlasmicDashboardRightContent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDashboardRightContent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDashboardRightContent";
  } else {
    func.displayName = `PlasmicDashboardRightContent.${nodeName}`;
  }
  return func;
}

export const PlasmicDashboardRightContent = Object.assign(
  // Top-level PlasmicDashboardRightContent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicDashboardRightContent
    internalVariantProps: PlasmicDashboardRightContent__VariantProps,
    internalArgProps: PlasmicDashboardRightContent__ArgProps
  }
);

export default PlasmicDashboardRightContent;
/* prettier-ignore-end */
