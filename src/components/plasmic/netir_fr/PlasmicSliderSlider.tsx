/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: Jm2VI3OT8ZBb

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { BaseSlider } from "@plasmicpkgs/react-aria/skinny/registerSlider";
import FormLabel from "../../FormLabel"; // plasmic-import: OopUg5_rd7fY/component
import { BaseSliderOutput } from "@plasmicpkgs/react-aria/skinny/registerSliderOutput";
import { BaseSliderTrack } from "@plasmicpkgs/react-aria/skinny/registerSliderTrack";
import SliderSliderThumb from "../../SliderSliderThumb"; // plasmic-import: 1sY3AfTMMa1F/component
import Description from "../../Description"; // plasmic-import: kOSfS1xvp5Cg/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicSliderSlider.module.css"; // plasmic-import: Jm2VI3OT8ZBb/css

createPlasmicElementProxy;

export type PlasmicSliderSlider__VariantMembers = {};
export type PlasmicSliderSlider__VariantsArgs = {};
type VariantPropType = keyof PlasmicSliderSlider__VariantsArgs;
export const PlasmicSliderSlider__VariantProps = new Array<VariantPropType>();

export type PlasmicSliderSlider__ArgsType = {
  value?: number;
  showLabel?: boolean;
  showOutputText?: boolean;
  showDescription?: boolean;
  step?: number;
  minValue?: number;
  maxValue?: number;
  outputText?: string;
  filled?: boolean;
  disabled?: boolean;
  onChange?: (val: number) => void;
  ariaLabel?: string;
  label?: React.ReactNode;
  thumbs?: React.ReactNode;
};
type ArgPropType = keyof PlasmicSliderSlider__ArgsType;
export const PlasmicSliderSlider__ArgProps = new Array<ArgPropType>(
  "value",
  "showLabel",
  "showOutputText",
  "showDescription",
  "step",
  "minValue",
  "maxValue",
  "outputText",
  "filled",
  "disabled",
  "onChange",
  "ariaLabel",
  "label",
  "thumbs"
);

export type PlasmicSliderSlider__OverridesType = {
  ariaSlider?: Flex__<typeof BaseSlider>;
  formLabel?: Flex__<typeof FormLabel>;
  ariaSliderOutput?: Flex__<typeof BaseSliderOutput>;
  background?: Flex__<"div">;
  ariaSliderTrack?: Flex__<typeof BaseSliderTrack>;
  foreground?: Flex__<"div">;
  description?: Flex__<typeof Description>;
};

export interface DefaultSliderSliderProps {
  value?: number;
  showLabel?: boolean;
  showOutputText?: boolean;
  showDescription?: boolean;
  step?: number;
  minValue?: number;
  maxValue?: number;
  outputText?: string;
  filled?: boolean;
  disabled?: boolean;
  onChange?: (val: number) => void;
  ariaLabel?: string;
  label?: React.ReactNode;
  thumbs?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicSliderSlider__RenderFunc(props: {
  variants: PlasmicSliderSlider__VariantsArgs;
  args: PlasmicSliderSlider__ArgsType;
  overrides: PlasmicSliderSlider__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          showLabel: true,
          showOutputText: true,
          showDescription: false,
          filled: true
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "ariaSlider.value",
        type: "writable",
        variableType: "number",

        valueProp: "value",
        onChangeProp: "onChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  const [$ccVariants, setDollarCcVariants] = React.useState<
    Record<string, boolean>
  >({
    disabled: false
  });
  const updateVariant = React.useCallback(
    (changes: Record<string, boolean>) => {
      setDollarCcVariants(prev => {
        if (!Object.keys(changes).some(k => prev[k] !== changes[k])) {
          return prev;
        }
        return { ...prev, ...changes };
      });
    },
    []
  );

  return (
    <BaseSlider
      data-plasmic-name={"ariaSlider"}
      data-plasmic-override={overrides.ariaSlider}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      aria-label={args.ariaLabel}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.ariaSlider
      )}
      defaultValue={0}
      isDisabled={args.disabled}
      maxValue={args.maxValue}
      minValue={args.minValue}
      onChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["ariaSlider", "value"]).apply(
          null,
          eventArgs
        );
      }}
      orientation={"horizontal"}
      plasmicUpdateVariant={updateVariant}
      step={args.step}
      value={generateStateValueProp($state, ["ariaSlider", "value"])}
    >
      {$props.showLabel || $props.showOutputText ? (
        <div className={classNames(projectcss.all, sty.freeBox__edW)}>
          {$props.showLabel ? (
            <FormLabel
              data-plasmic-name={"formLabel"}
              data-plasmic-override={overrides.formLabel}
              className={classNames("__wab_instance", sty.formLabel)}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iZwDc
                    )}
                  >
                    {"Label"}
                  </div>
                ),
                value: args.label
              })}
            </FormLabel>
          ) : null}
          {(() => {
            try {
              return $props.showOutputText;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <BaseSliderOutput
              data-plasmic-name={"ariaSliderOutput"}
              data-plasmic-override={overrides.ariaSliderOutput}
              className={classNames("__wab_instance", sty.ariaSliderOutput)}
            >
              <React.Fragment>
                {$props.outputText ?? $state.ariaSlider.value}
              </React.Fragment>
            </BaseSliderOutput>
          ) : null}
        </div>
      ) : null}
      <div className={classNames(projectcss.all, sty.freeBox__dgPq)}>
        <div
          data-plasmic-name={"background"}
          data-plasmic-override={overrides.background}
          className={classNames(projectcss.all, sty.background)}
        >
          <BaseSliderTrack
            data-plasmic-name={"ariaSliderTrack"}
            data-plasmic-override={overrides.ariaSliderTrack}
            className={classNames("__wab_instance", sty.ariaSliderTrack)}
            progressBar={
              $props.filled ? (
                <div
                  data-plasmic-name={"foreground"}
                  data-plasmic-override={overrides.foreground}
                  className={classNames(projectcss.all, sty.foreground)}
                />
              ) : null
            }
          >
            {renderPlasmicSlot({
              defaultContents: (
                <SliderSliderThumb
                  className={classNames(
                    "__wab_instance",
                    sty.sliderSliderThumb__payXq
                  )}
                />
              ),

              value: args.thumbs
            })}
          </BaseSliderTrack>
        </div>
      </div>
      {$props.showDescription ? (
        <Description
          data-plasmic-name={"description"}
          data-plasmic-override={overrides.description}
          className={classNames("__wab_instance", sty.description)}
        />
      ) : null}
    </BaseSlider>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  ariaSlider: [
    "ariaSlider",
    "formLabel",
    "ariaSliderOutput",
    "background",
    "ariaSliderTrack",
    "foreground",
    "description"
  ],
  formLabel: ["formLabel"],
  ariaSliderOutput: ["ariaSliderOutput"],
  background: ["background", "ariaSliderTrack", "foreground"],
  ariaSliderTrack: ["ariaSliderTrack", "foreground"],
  foreground: ["foreground"],
  description: ["description"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  ariaSlider: typeof BaseSlider;
  formLabel: typeof FormLabel;
  ariaSliderOutput: typeof BaseSliderOutput;
  background: "div";
  ariaSliderTrack: typeof BaseSliderTrack;
  foreground: "div";
  description: typeof Description;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSliderSlider__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSliderSlider__VariantsArgs;
    args?: PlasmicSliderSlider__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicSliderSlider__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicSliderSlider__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSliderSlider__ArgProps,
          internalVariantPropNames: PlasmicSliderSlider__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSliderSlider__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "ariaSlider") {
    func.displayName = "PlasmicSliderSlider";
  } else {
    func.displayName = `PlasmicSliderSlider.${nodeName}`;
  }
  return func;
}

export const PlasmicSliderSlider = Object.assign(
  // Top-level PlasmicSliderSlider renders the root element
  makeNodeComponent("ariaSlider"),
  {
    // Helper components rendering sub-elements
    formLabel: makeNodeComponent("formLabel"),
    ariaSliderOutput: makeNodeComponent("ariaSliderOutput"),
    background: makeNodeComponent("background"),
    ariaSliderTrack: makeNodeComponent("ariaSliderTrack"),
    foreground: makeNodeComponent("foreground"),
    description: makeNodeComponent("description"),

    // Metadata about props expected for PlasmicSliderSlider
    internalVariantProps: PlasmicSliderSlider__VariantProps,
    internalArgProps: PlasmicSliderSlider__ArgProps
  }
);

export default PlasmicSliderSlider;
/* prettier-ignore-end */
