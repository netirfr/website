/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: eyoxTGMzE-Q0

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import HomepageNavlink from "../../HomepageNavlink"; // plasmic-import: 2SyvdQVIMida/component
import ButtonOldNoirModifier from "../../ButtonOldNoirModifier"; // plasmic-import: 5xK5VFnQQQwm/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicHomepageNavbar.module.css"; // plasmic-import: eyoxTGMzE-Q0/css

import CrossSvgrepoComSvgIcon from "./icons/PlasmicIcon__CrossSvgrepoComSvg"; // plasmic-import: eBCRhro0-L2F/icon
import nLogo4X7VwM2YjHhq from "./images/nLogo.svg"; // plasmic-import: 4X7vwM2yjHHQ/picture

createPlasmicElementProxy;

export type PlasmicHomepageNavbar__VariantMembers = {};
export type PlasmicHomepageNavbar__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepageNavbar__VariantsArgs;
export const PlasmicHomepageNavbar__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepageNavbar__ArgsType = {
  close?: boolean;
  onCloseChange?: (val: string) => void;
  onClickClosenav?: (event: any) => void;
};
type ArgPropType = keyof PlasmicHomepageNavbar__ArgsType;
export const PlasmicHomepageNavbar__ArgProps = new Array<ArgPropType>(
  "close",
  "onCloseChange",
  "onClickClosenav"
);

export type PlasmicHomepageNavbar__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  svg?: Flex__<"svg">;
  connexion?: Flex__<"div">;
  buttonOldNoirModifier?: Flex__<typeof ButtonOldNoirModifier>;
};

export interface DefaultHomepageNavbarProps {
  close?: boolean;
  onCloseChange?: (val: string) => void;
  onClickClosenav?: (event: any) => void;
  className?: string;
}

const $$ = {};

function PlasmicHomepageNavbar__RenderFunc(props: {
  variants: PlasmicHomepageNavbar__VariantsArgs;
  args: PlasmicHomepageNavbar__ArgsType;
  overrides: PlasmicHomepageNavbar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "close",
        type: "writable",
        variableType: "boolean",

        valueProp: "close",
        onChangeProp: "onCloseChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
      onClick={async event => {
        const $steps = {};

        $steps["updateClose"] = true
          ? (() => {
              const actionArgs = {
                variable: {
                  objRoot: $state,
                  variablePath: ["close"]
                },
                operation: 0,
                value: false
              };
              return (({ variable, value, startIndex, deleteCount }) => {
                if (!variable) {
                  return;
                }
                const { objRoot, variablePath } = variable;

                $stateSet(objRoot, variablePath, value);
                return value;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateClose"] != null &&
          typeof $steps["updateClose"] === "object" &&
          typeof $steps["updateClose"].then === "function"
        ) {
          $steps["updateClose"] = await $steps["updateClose"];
        }
      }}
    >
      <div className={classNames(projectcss.all, sty.freeBox__uIjga)}>
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"35px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"94px"}
          loading={"lazy"}
          onClick={async event => {
            const $steps = {};

            $steps["goToHomepage"] = true
              ? (() => {
                  const actionArgs = { destination: `/` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __gatsbyNavigate(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToHomepage"] != null &&
              typeof $steps["goToHomepage"] === "object" &&
              typeof $steps["goToHomepage"].then === "function"
            ) {
              $steps["goToHomepage"] = await $steps["goToHomepage"];
            }
          }}
          src={{
            src: nLogo4X7VwM2YjHhq,
            fullWidth: 100.26872253417969,
            fullHeight: 36.720001220703125,
            aspectRatio: 2.72973
          }}
        />

        <CrossSvgrepoComSvgIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          onClick={args.onClickClosenav}
          role={"img"}
        />
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__frWzg)}
        onClick={async event => {
          const $steps = {};

          $steps["goToHomepage"] = true
            ? (() => {
                const actionArgs = { destination: `/` };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __gatsbyNavigate(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToHomepage"] != null &&
            typeof $steps["goToHomepage"] === "object" &&
            typeof $steps["goToHomepage"].then === "function"
          ) {
            $steps["goToHomepage"] = await $steps["goToHomepage"];
          }
        }}
      >
        <HomepageNavlink
          className={classNames("__wab_instance", sty.homepageNavlink__typ5F)}
          destination={`/`}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jIvF6
            )}
          >
            {"Accueil"}
          </div>
        </HomepageNavlink>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__e4Di7)}
        onClick={async event => {
          const $steps = {};

          $steps["goToWipLandingEntreprise"] = true
            ? (() => {
                const actionArgs = { destination: `/company` };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __gatsbyNavigate(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToWipLandingEntreprise"] != null &&
            typeof $steps["goToWipLandingEntreprise"] === "object" &&
            typeof $steps["goToWipLandingEntreprise"].then === "function"
          ) {
            $steps["goToWipLandingEntreprise"] =
              await $steps["goToWipLandingEntreprise"];
          }
        }}
      >
        <HomepageNavlink
          className={classNames("__wab_instance", sty.homepageNavlink__j4QwU)}
          destination={`/company`}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wTqy6
            )}
          >
            {"Entreprise"}
          </div>
        </HomepageNavlink>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__ftRgL)}
        onClick={async event => {
          const $steps = {};

          $steps["goToWipLandingFreelance"] = true
            ? (() => {
                const actionArgs = { destination: `/freelance` };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __gatsbyNavigate(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToWipLandingFreelance"] != null &&
            typeof $steps["goToWipLandingFreelance"] === "object" &&
            typeof $steps["goToWipLandingFreelance"].then === "function"
          ) {
            $steps["goToWipLandingFreelance"] =
              await $steps["goToWipLandingFreelance"];
          }
        }}
      >
        <HomepageNavlink
          className={classNames("__wab_instance", sty.homepageNavlink__exGv1)}
          destination={`/freelance`}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__l9MX4
            )}
          >
            {"Freelance"}
          </div>
        </HomepageNavlink>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__sgqgr)}
        onClick={async event => {
          const $steps = {};

          $steps["goToWipLandingMentor"] = true
            ? (() => {
                const actionArgs = { destination: `/mentor` };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __gatsbyNavigate(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToWipLandingMentor"] != null &&
            typeof $steps["goToWipLandingMentor"] === "object" &&
            typeof $steps["goToWipLandingMentor"].then === "function"
          ) {
            $steps["goToWipLandingMentor"] =
              await $steps["goToWipLandingMentor"];
          }
        }}
      >
        <HomepageNavlink
          className={classNames("__wab_instance", sty.homepageNavlink__c5Bxj)}
          destination={`/mentor`}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wO5Of
            )}
          >
            {"Mentor"}
          </div>
        </HomepageNavlink>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__bByLs)}
        onClick={async event => {
          const $steps = {};

          $steps["goToWipLandingApporteurDaffaire"] = true
            ? (() => {
                const actionArgs = { destination: `/apporteur-daffaires` };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __gatsbyNavigate(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToWipLandingApporteurDaffaire"] != null &&
            typeof $steps["goToWipLandingApporteurDaffaire"] === "object" &&
            typeof $steps["goToWipLandingApporteurDaffaire"].then === "function"
          ) {
            $steps["goToWipLandingApporteurDaffaire"] =
              await $steps["goToWipLandingApporteurDaffaire"];
          }
        }}
      >
        <HomepageNavlink
          className={classNames("__wab_instance", sty.homepageNavlink__mIAu)}
          destination={`/apporteur-daffaires`}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dCpNo
            )}
          >
            {"Apporteur d'affaires"}
          </div>
        </HomepageNavlink>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__wboi9)}
        onClick={async event => {
          const $steps = {};

          $steps["goToLegalNotices"] = true
            ? (() => {
                const actionArgs = { destination: `/legal-notices` };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __gatsbyNavigate(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToLegalNotices"] != null &&
            typeof $steps["goToLegalNotices"] === "object" &&
            typeof $steps["goToLegalNotices"].then === "function"
          ) {
            $steps["goToLegalNotices"] = await $steps["goToLegalNotices"];
          }
        }}
      >
        <HomepageNavlink
          className={classNames("__wab_instance", sty.homepageNavlink__vPTa)}
          destination={`/legal-notices`}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__tvw
            )}
          >
            {"Mention l\u00e9gales"}
          </div>
        </HomepageNavlink>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__hSjWv)}
        onClick={async event => {
          const $steps = {};

          $steps["goToPolitiqueConfidentialite"] = true
            ? (() => {
                const actionArgs = { destination: `/confidential-policies` };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __gatsbyNavigate(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToPolitiqueConfidentialite"] != null &&
            typeof $steps["goToPolitiqueConfidentialite"] === "object" &&
            typeof $steps["goToPolitiqueConfidentialite"].then === "function"
          ) {
            $steps["goToPolitiqueConfidentialite"] =
              await $steps["goToPolitiqueConfidentialite"];
          }
        }}
      >
        <HomepageNavlink
          className={classNames("__wab_instance", sty.homepageNavlink___94G2Y)}
          destination={`/confidential-policies`}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__iKz8F
            )}
          >
            {"Politique de confidentialit\u00e9"}
          </div>
        </HomepageNavlink>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__gBbO8)}
        onClick={async event => {
          const $steps = {};

          $steps["goToConditionUtilisation"] = true
            ? (() => {
                const actionArgs = { destination: `/legal` };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __gatsbyNavigate(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToConditionUtilisation"] != null &&
            typeof $steps["goToConditionUtilisation"] === "object" &&
            typeof $steps["goToConditionUtilisation"].then === "function"
          ) {
            $steps["goToConditionUtilisation"] =
              await $steps["goToConditionUtilisation"];
          }
        }}
      >
        <HomepageNavlink
          className={classNames("__wab_instance", sty.homepageNavlink__vW0O6)}
          destination={`/legal`}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__oCyFr
            )}
          >
            {"Conditions d'utilisations"}
          </div>
        </HomepageNavlink>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__hKqFb)} />

      <div
        className={classNames(projectcss.all, sty.freeBox__oYrT4)}
        onClick={async event => {
          const $steps = {};

          $steps["goToConnexion"] = true
            ? (() => {
                const actionArgs = { destination: `/sign-in` };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __gatsbyNavigate(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToConnexion"] != null &&
            typeof $steps["goToConnexion"] === "object" &&
            typeof $steps["goToConnexion"].then === "function"
          ) {
            $steps["goToConnexion"] = await $steps["goToConnexion"];
          }
        }}
      >
        <HomepageNavlink
          className={classNames("__wab_instance", sty.homepageNavlink__r5Gsb)}
          destination={`/sign-in`}
        >
          <div
            data-plasmic-name={"connexion"}
            data-plasmic-override={overrides.connexion}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.connexion
            )}
          >
            {"Connexion"}
          </div>
        </HomepageNavlink>
      </div>
      <ButtonOldNoirModifier
        data-plasmic-name={"buttonOldNoirModifier"}
        data-plasmic-override={overrides.buttonOldNoirModifier}
        className={classNames("__wab_instance", sty.buttonOldNoirModifier)}
        content={"Inscription"}
        lien={`/sign-up`}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "svg", "connexion", "buttonOldNoirModifier"],
  img: ["img"],
  svg: ["svg"],
  connexion: ["connexion"],
  buttonOldNoirModifier: ["buttonOldNoirModifier"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  svg: "svg";
  connexion: "div";
  buttonOldNoirModifier: typeof ButtonOldNoirModifier;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepageNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepageNavbar__VariantsArgs;
    args?: PlasmicHomepageNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicHomepageNavbar__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicHomepageNavbar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepageNavbar__ArgProps,
          internalVariantPropNames: PlasmicHomepageNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepageNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepageNavbar";
  } else {
    func.displayName = `PlasmicHomepageNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepageNavbar = Object.assign(
  // Top-level PlasmicHomepageNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    svg: makeNodeComponent("svg"),
    connexion: makeNodeComponent("connexion"),
    buttonOldNoirModifier: makeNodeComponent("buttonOldNoirModifier"),

    // Metadata about props expected for PlasmicHomepageNavbar
    internalVariantProps: PlasmicHomepageNavbar__VariantProps,
    internalArgProps: PlasmicHomepageNavbar__ArgProps
  }
);

export default PlasmicHomepageNavbar;
/* prettier-ignore-end */
