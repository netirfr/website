/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: KS-1W6sGklIw

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicDashboardDashboardLayout.module.css"; // plasmic-import: KS-1W6sGklIw/css

import User2SvgrepoComSvgIcon from "./icons/PlasmicIcon__User2SvgrepoComSvg"; // plasmic-import: yXbiP_2IZqD3/icon
import EnterpriseSvgrepoComSvgIcon from "./icons/PlasmicIcon__EnterpriseSvgrepoComSvg"; // plasmic-import: HC2LKgzu4-0d/icon
import Bag4SvgrepoComSvgIcon from "./icons/PlasmicIcon__Bag4SvgrepoComSvg"; // plasmic-import: xeojuuOAnBdF/icon
import ExitSvgrepoComSvgIcon from "./icons/PlasmicIcon__ExitSvgrepoComSvg"; // plasmic-import: tT8yRtktTpnV/icon
import CrossSvgrepoComSvgIcon from "./icons/PlasmicIcon__CrossSvgrepoComSvg"; // plasmic-import: eBCRhro0-L2F/icon
import nLogo4X7VwM2YjHhq from "./images/nLogo.svg"; // plasmic-import: 4X7vwM2yjHHQ/picture

createPlasmicElementProxy;

export type PlasmicDashboardDashboardLayout__VariantMembers = {};
export type PlasmicDashboardDashboardLayout__VariantsArgs = {};
type VariantPropType = keyof PlasmicDashboardDashboardLayout__VariantsArgs;
export const PlasmicDashboardDashboardLayout__VariantProps =
  new Array<VariantPropType>();

export type PlasmicDashboardDashboardLayout__ArgsType = {
  navTilte?: string;
  seconTitleNav?: string;
  navTitleEntreprise?: string;
  labelMentoring?: string;
  isSidebarOpenn?: boolean;
  onIsSidebarOpennChange?: (val: string) => void;
  children?: React.ReactNode;
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicDashboardDashboardLayout__ArgsType;
export const PlasmicDashboardDashboardLayout__ArgProps = new Array<ArgPropType>(
  "navTilte",
  "seconTitleNav",
  "navTitleEntreprise",
  "labelMentoring",
  "isSidebarOpenn",
  "onIsSidebarOpennChange",
  "children",
  "children2",
  "children3",
  "slot"
);

export type PlasmicDashboardDashboardLayout__OverridesType = {
  root?: Flex__<"div">;
  left?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  dropdown?: Flex__<typeof AntdDropdown>;
  button?: Flex__<typeof AntdButton>;
  columns?: Flex__<"div">;
  right?: Flex__<"div">;
};

export interface DefaultDashboardDashboardLayoutProps {
  navTilte?: string;
  seconTitleNav?: string;
  navTitleEntreprise?: string;
  labelMentoring?: string;
  isSidebarOpenn?: boolean;
  onIsSidebarOpennChange?: (val: string) => void;
  children?: React.ReactNode;
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicDashboardDashboardLayout__RenderFunc(props: {
  variants: PlasmicDashboardDashboardLayout__VariantsArgs;
  args: PlasmicDashboardDashboardLayout__ArgsType;
  overrides: PlasmicDashboardDashboardLayout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          navTilte: "FREELANCING",
          seconTitleNav: "INFORMATIONS",
          navTitleEntreprise: "ADMIN",
          labelMentoring: "MENTORING"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isSidebarOpenn",
        type: "writable",
        variableType: "boolean",

        valueProp: "isSidebarOpenn",
        onChangeProp: "onIsSidebarOpennChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"left"}
        data-plasmic-override={overrides.left}
        className={classNames(projectcss.all, sty.left)}
      >
        {(
          hasVariant(globalVariants, "screen", "tabletOnly")
            ? (() => {
                try {
                  return $state.isSidebarOpenn;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <div className={classNames(projectcss.all, sty.freeBox___5D3Q3)}>
            <div className={classNames(projectcss.all, sty.freeBox__t5RxM)}>
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"32px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"85px"}
                loading={"lazy"}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToFreelanceHome"] = true
                    ? (() => {
                        const actionArgs = { destination: `/home-page` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __gatsbyNavigate(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToFreelanceHome"] != null &&
                    typeof $steps["goToFreelanceHome"] === "object" &&
                    typeof $steps["goToFreelanceHome"].then === "function"
                  ) {
                    $steps["goToFreelanceHome"] =
                      await $steps["goToFreelanceHome"];
                  }
                }}
                src={{
                  src: nLogo4X7VwM2YjHhq,
                  fullWidth: 100.26872253417969,
                  fullHeight: 36.720001220703125,
                  aspectRatio: 2.72973
                }}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__moBjg)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vSz6Q
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.navTilte;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___6Hob9)}>
              {renderPlasmicSlot({
                defaultContents: null,
                value: args.children
              })}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___7Hi6S)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__y8UN2
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.seconTitleNav;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__c7LAn)}>
              {renderPlasmicSlot({
                defaultContents: null,
                value: args.children2
              })}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__svsHh)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ispai
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.labelMentoring;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__cM9SJ)}>
              {renderPlasmicSlot({
                defaultContents: null,
                value: args.children3
              })}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__wnQw)}>
              <AntdDropdown
                data-plasmic-name={"dropdown"}
                data-plasmic-override={overrides.dropdown}
                className={classNames("__wab_instance", sty.dropdown)}
                disabled={false}
                dropdownMenuScopeClassName={sty["dropdown__dropdownMenu"]}
                fakeOpen={false}
                menuClassName={classNames({ [sty["pcls_egj5y1rtHA6T"]]: true })}
                menuItemClassName={classNames({
                  [sty["pcls_1tZswDQHGjJy"]]: true
                })}
                menuItems={() => (
                  <React.Fragment>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem___9XXc
                      )}
                      key={"menu-item-1"}
                      onClick={async () => {
                        const $steps = {};

                        $steps["goToFreelanceHome"] = true
                          ? (() => {
                              const actionArgs = { destination: `/home-page` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __gatsbyNavigate(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToFreelanceHome"] != null &&
                          typeof $steps["goToFreelanceHome"] === "object" &&
                          typeof $steps["goToFreelanceHome"].then === "function"
                        ) {
                          $steps["goToFreelanceHome"] =
                            await $steps["goToFreelanceHome"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__uFqlF
                        )}
                      >
                        <User2SvgrepoComSvgIcon
                          className={classNames(projectcss.all, sty.svg__kSbli)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hdkz7
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 400, color: "#000000" }}
                            >
                              {"Mon espace freelance"}
                            </span>
                          </React.Fragment>
                        </div>
                      </div>
                    </AntdMenuItem>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__bStGy
                      )}
                      disabled={false}
                      key={"menu-item-1"}
                      onClick={async () => {
                        const $steps = {};

                        $steps["goToFreelanceHome2"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: `/mentor/home`
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __gatsbyNavigate(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToFreelanceHome2"] != null &&
                          typeof $steps["goToFreelanceHome2"] === "object" &&
                          typeof $steps["goToFreelanceHome2"].then ===
                            "function"
                        ) {
                          $steps["goToFreelanceHome2"] =
                            await $steps["goToFreelanceHome2"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tHqJm
                        )}
                      >
                        <User2SvgrepoComSvgIcon
                          className={classNames(projectcss.all, sty.svg__pql9K)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fLt9Q
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#000000" }}
                            >
                              {"Mon espace mentor"}
                            </span>
                          </React.Fragment>
                        </div>
                      </div>
                    </AntdMenuItem>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__pghm6
                      )}
                      key={"menu-item-1"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___8CCud
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rBnxO
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#000000" }}
                            >
                              {"Mon espace entreprise"}
                            </span>
                          </React.Fragment>
                        </div>
                      </div>
                    </AntdMenuItem>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__zs9L
                      )}
                      key={"menu-item-1"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yVtt
                        )}
                      >
                        <EnterpriseSvgrepoComSvgIcon
                          className={classNames(projectcss.all, sty.svg__pTDsp)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7Vkj
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#000000" }}
                            >
                              {"Entreprise sans nom"}
                            </span>
                          </React.Fragment>
                        </div>
                      </div>
                    </AntdMenuItem>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__c9Ucr
                      )}
                      key={"menu-item-1"}
                      onClick={async () => {
                        const $steps = {};

                        $steps["goToSignUpCompanyStep2"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: `/sign-up/company-2`
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __gatsbyNavigate(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToSignUpCompanyStep2"] != null &&
                          typeof $steps["goToSignUpCompanyStep2"] ===
                            "object" &&
                          typeof $steps["goToSignUpCompanyStep2"].then ===
                            "function"
                        ) {
                          $steps["goToSignUpCompanyStep2"] =
                            await $steps["goToSignUpCompanyStep2"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wcpqF
                        )}
                      >
                        <Bag4SvgrepoComSvgIcon
                          className={classNames(projectcss.all, sty.svg__vv6Lc)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vLhDo
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#000000" }}
                            >
                              {"Ajouter une entreprise"}
                            </span>
                          </React.Fragment>
                        </div>
                      </div>
                    </AntdMenuItem>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__eoA88
                      )}
                      key={"menu-item-1"}
                      onClick={async () => {
                        const $steps = {};

                        $steps["goToConnexion"] = true
                          ? (() => {
                              const actionArgs = { destination: `/sign-in` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __gatsbyNavigate(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToConnexion"] != null &&
                          typeof $steps["goToConnexion"] === "object" &&
                          typeof $steps["goToConnexion"].then === "function"
                        ) {
                          $steps["goToConnexion"] =
                            await $steps["goToConnexion"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__r5Yv
                        )}
                      >
                        <ExitSvgrepoComSvgIcon
                          className={classNames(projectcss.all, sty.svg__qnDbx)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aLcSt
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#000000" }}
                            >
                              {"Me d\u00e9connecter"}
                            </span>
                          </React.Fragment>
                        </div>
                      </div>
                    </AntdMenuItem>
                  </React.Fragment>
                )}
                menuItemsJson={[
                  { type: "item", value: "action1", label: "Action 1" },
                  { type: "item", value: "action2", label: "Action 2" }
                ]}
                placement={"topLeft"}
                trigger={"click"}
                useMenuItemsSlot={true}
              >
                <AntdButton
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                >
                  <div
                    data-plasmic-name={"columns"}
                    data-plasmic-override={overrides.columns}
                    className={classNames(projectcss.all, sty.columns)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column___7Zs82)}
                    >
                      <User2SvgrepoComSvgIcon
                        className={classNames(projectcss.all, sty.svg___9Gov)}
                        role={"img"}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column___79Nk)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__n8M3D
                        )}
                      >
                        {"Nom et pr\u00e9nom"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__px0T4
                        )}
                      >
                        {"Freelance"}
                      </div>
                    </div>
                  </div>
                </AntdButton>
              </AntdDropdown>
            </div>
          </div>
        ) : null}
      </div>
      <div
        data-plasmic-name={"right"}
        data-plasmic-override={overrides.right}
        className={classNames(projectcss.all, sty.right)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__xFt8C)}>
          {renderPlasmicSlot({
            defaultContents: null,
            value: args.slot
          })}
        </div>
        {(
          hasVariant(globalVariants, "screen", "tabletOnly")
            ? (() => {
                try {
                  return $state.isSidebarOpenn;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <div className={classNames(projectcss.all, sty.freeBox___6T21O)}>
            <CrossSvgrepoComSvgIcon
              className={classNames(projectcss.all, sty.svg__uKuD2)}
              onClick={async event => {
                const $steps = {};

                $steps["updateIsSidebarOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isSidebarOpenn"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsSidebarOpen"] != null &&
                  typeof $steps["updateIsSidebarOpen"] === "object" &&
                  typeof $steps["updateIsSidebarOpen"].then === "function"
                ) {
                  $steps["updateIsSidebarOpen"] =
                    await $steps["updateIsSidebarOpen"];
                }
              }}
              role={"img"}
            />
          </div>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "left", "img", "dropdown", "button", "columns", "right"],
  left: ["left", "img", "dropdown", "button", "columns"],
  img: ["img"],
  dropdown: ["dropdown", "button", "columns"],
  button: ["button", "columns"],
  columns: ["columns"],
  right: ["right"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  left: "div";
  img: typeof PlasmicImg__;
  dropdown: typeof AntdDropdown;
  button: typeof AntdButton;
  columns: "div";
  right: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDashboardDashboardLayout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDashboardDashboardLayout__VariantsArgs;
    args?: PlasmicDashboardDashboardLayout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicDashboardDashboardLayout__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicDashboardDashboardLayout__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDashboardDashboardLayout__ArgProps,
          internalVariantPropNames:
            PlasmicDashboardDashboardLayout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDashboardDashboardLayout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDashboardDashboardLayout";
  } else {
    func.displayName = `PlasmicDashboardDashboardLayout.${nodeName}`;
  }
  return func;
}

export const PlasmicDashboardDashboardLayout = Object.assign(
  // Top-level PlasmicDashboardDashboardLayout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    left: makeNodeComponent("left"),
    img: makeNodeComponent("img"),
    dropdown: makeNodeComponent("dropdown"),
    button: makeNodeComponent("button"),
    columns: makeNodeComponent("columns"),
    right: makeNodeComponent("right"),

    // Metadata about props expected for PlasmicDashboardDashboardLayout
    internalVariantProps: PlasmicDashboardDashboardLayout__VariantProps,
    internalArgProps: PlasmicDashboardDashboardLayout__ArgProps
  }
);

export default PlasmicDashboardDashboardLayout;
/* prettier-ignore-end */
