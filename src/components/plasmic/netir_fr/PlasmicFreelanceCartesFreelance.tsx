/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: IrYgS-V1Gdk4

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Title from "../../Title"; // plasmic-import: XzqlIgKUS2Ev/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicFreelanceCartesFreelance.module.css"; // plasmic-import: IrYgS-V1Gdk4/css

import headhunting17929492PngUTyjj2WD5Bmm from "./images/headhunting17929492Png.png"; // plasmic-import: uTYJJ2wD5Bmm/picture

createPlasmicElementProxy;

export type PlasmicFreelanceCartesFreelance__VariantMembers = {};
export type PlasmicFreelanceCartesFreelance__VariantsArgs = {};
type VariantPropType = keyof PlasmicFreelanceCartesFreelance__VariantsArgs;
export const PlasmicFreelanceCartesFreelance__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFreelanceCartesFreelance__ArgsType = {
  titre?: string;
  icon?: React.ComponentProps<typeof PlasmicImg__>["src"];
  point1?: string;
  point2?: string;
  point3?: string;
  lien?: string;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicFreelanceCartesFreelance__ArgsType;
export const PlasmicFreelanceCartesFreelance__ArgProps = new Array<ArgPropType>(
  "titre",
  "icon",
  "point1",
  "point2",
  "point3",
  "lien",
  "children"
);

export type PlasmicFreelanceCartesFreelance__OverridesType = {
  root?: Flex__<"div">;
  columns?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  title?: Flex__<typeof Title>;
};

export interface DefaultFreelanceCartesFreelanceProps {
  titre?: string;
  icon?: React.ComponentProps<typeof PlasmicImg__>["src"];
  point1?: string;
  point2?: string;
  point3?: string;
  lien?: string;
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicFreelanceCartesFreelance__RenderFunc(props: {
  variants: PlasmicFreelanceCartesFreelance__VariantsArgs;
  args: PlasmicFreelanceCartesFreelance__ArgsType;
  overrides: PlasmicFreelanceCartesFreelance__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__sS3PO)}>
          <div className={classNames(projectcss.all, sty.freeBox___1Ixwl)}>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"60px"}
              loading={"lazy"}
              src={(() => {
                try {
                  return $props.icon;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      src: headhunting17929492PngUTyjj2WD5Bmm,
                      fullWidth: 512,
                      fullHeight: 512,
                      aspectRatio: undefined
                    };
                  }
                  throw e;
                }
              })()}
            />
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.column__mmeLh)}>
          <Title
            data-plasmic-name={"title"}
            data-plasmic-override={overrides.title}
            className={classNames("__wab_instance", sty.title)}
            lien={`/mentor`}
            titre={args.titre}
          />
        </div>
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___27Jrz
        )}
      >
        <React.Fragment>
          <React.Fragment>{""}</React.Fragment>
          {
            <ul
              className={classNames(
                projectcss.all,
                projectcss.ul,
                sty.ul__yFoe
              )}
            >
              <li
                className={classNames(
                  projectcss.all,
                  projectcss.li,
                  projectcss.__wab_text,
                  sty.li__yxZr2
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.point1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </li>
            </ul>
          }
          <React.Fragment>{""}</React.Fragment>
        </React.Fragment>
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__zblP5
        )}
      >
        <React.Fragment>
          <React.Fragment>{""}</React.Fragment>
          {
            <ul
              className={classNames(
                projectcss.all,
                projectcss.ul,
                sty.ul__b6SZq
              )}
            >
              <li
                className={classNames(
                  projectcss.all,
                  projectcss.li,
                  projectcss.__wab_text,
                  sty.li___9Jm16
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.point2;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </li>
            </ul>
          }
          <React.Fragment>{""}</React.Fragment>
        </React.Fragment>
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__mhAlS
        )}
      >
        <React.Fragment>
          <React.Fragment>{""}</React.Fragment>
          {
            <ul
              className={classNames(
                projectcss.all,
                projectcss.ul,
                sty.ul__faHuF
              )}
            >
              <li
                className={classNames(
                  projectcss.all,
                  projectcss.li,
                  projectcss.__wab_text,
                  sty.li__oa2Sa
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.point3;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </li>
            </ul>
          }
          <React.Fragment>{""}</React.Fragment>
        </React.Fragment>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__a5OuG)}>
        {renderPlasmicSlot({
          defaultContents: "Enter some text",
          value: args.children
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns", "img", "title"],
  columns: ["columns", "img", "title"],
  img: ["img"],
  title: ["title"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  img: typeof PlasmicImg__;
  title: typeof Title;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFreelanceCartesFreelance__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFreelanceCartesFreelance__VariantsArgs;
    args?: PlasmicFreelanceCartesFreelance__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicFreelanceCartesFreelance__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicFreelanceCartesFreelance__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFreelanceCartesFreelance__ArgProps,
          internalVariantPropNames:
            PlasmicFreelanceCartesFreelance__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFreelanceCartesFreelance__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFreelanceCartesFreelance";
  } else {
    func.displayName = `PlasmicFreelanceCartesFreelance.${nodeName}`;
  }
  return func;
}

export const PlasmicFreelanceCartesFreelance = Object.assign(
  // Top-level PlasmicFreelanceCartesFreelance renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),
    title: makeNodeComponent("title"),

    // Metadata about props expected for PlasmicFreelanceCartesFreelance
    internalVariantProps: PlasmicFreelanceCartesFreelance__VariantProps,
    internalArgProps: PlasmicFreelanceCartesFreelance__ArgProps
  }
);

export default PlasmicFreelanceCartesFreelance;
/* prettier-ignore-end */
