/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: I1cyDttPCrVx

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicAvantages.module.css"; // plasmic-import: I1cyDttPCrVx/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: ve2oeUzZomz5/icon
import image9REpM9TnVhNff from "./images/image9.svg"; // plasmic-import: REpM9tnVHNff/picture

createPlasmicElementProxy;

export type PlasmicAvantages__VariantMembers = {
  mobile: "mobile";
};
export type PlasmicAvantages__VariantsArgs = {
  mobile?: MultiChoiceArg<"mobile">;
};
type VariantPropType = keyof PlasmicAvantages__VariantsArgs;
export const PlasmicAvantages__VariantProps = new Array<VariantPropType>(
  "mobile"
);

export type PlasmicAvantages__ArgsType = {
  avantage?: string;
  icon?: React.ComponentProps<typeof PlasmicImg__>["src"];
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicAvantages__ArgsType;
export const PlasmicAvantages__ArgProps = new Array<ArgPropType>(
  "avantage",
  "icon",
  "children"
);

export type PlasmicAvantages__OverridesType = {
  avantage2?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  h6?: Flex__<"h6">;
};

export interface DefaultAvantagesProps {
  avantage?: string;
  icon?: React.ComponentProps<typeof PlasmicImg__>["src"];
  children?: React.ReactNode;
  mobile?: MultiChoiceArg<"mobile">;
  className?: string;
}

const $$ = {};

function PlasmicAvantages__RenderFunc(props: {
  variants: PlasmicAvantages__VariantsArgs;
  args: PlasmicAvantages__ArgsType;
  overrides: PlasmicAvantages__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          avantage: "Des freelances hautement qualifi\u00e9s",
          icon: {
            src: image9REpM9TnVhNff,
            fullWidth: 52,
            fullHeight: 52,
            aspectRatio: 1
          }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "mobile",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.mobile
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"avantage2"}
      data-plasmic-override={overrides.avantage2}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.avantage2,
        { [sty.avantage2mobile]: hasVariant($state, "mobile", "mobile") }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <IconIcon
              className={classNames(projectcss.all, sty.svg__nZp7D)}
              role={"img"}
            />
          ),

          value: args.children
        })}
      </div>
      <h6
        data-plasmic-name={"h6"}
        data-plasmic-override={overrides.h6}
        className={classNames(
          projectcss.all,
          projectcss.h6,
          projectcss.__wab_text,
          sty.h6,
          { [sty.h6mobile]: hasVariant($state, "mobile", "mobile") }
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.avantage;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "Des Freelances hautement qualifi\u00e9s";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </h6>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  avantage2: ["avantage2", "freeBox", "h6"],
  freeBox: ["freeBox"],
  h6: ["h6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  avantage2: "div";
  freeBox: "div";
  h6: "h6";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAvantages__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAvantages__VariantsArgs;
    args?: PlasmicAvantages__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicAvantages__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicAvantages__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAvantages__ArgProps,
          internalVariantPropNames: PlasmicAvantages__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAvantages__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "avantage2") {
    func.displayName = "PlasmicAvantages";
  } else {
    func.displayName = `PlasmicAvantages.${nodeName}`;
  }
  return func;
}

export const PlasmicAvantages = Object.assign(
  // Top-level PlasmicAvantages renders the root element
  makeNodeComponent("avantage2"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    h6: makeNodeComponent("h6"),

    // Metadata about props expected for PlasmicAvantages
    internalVariantProps: PlasmicAvantages__VariantProps,
    internalArgProps: PlasmicAvantages__ArgProps
  }
);

export default PlasmicAvantages;
/* prettier-ignore-end */
