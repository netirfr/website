/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: PhJgLxyBhiCz

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SiteHeader from "../../SiteHeader"; // plasmic-import: Vg4NgSIGKm96/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: byb1-I0x_v8X/component
import Footer from "../../Footer"; // plasmic-import: lPSQkcOmsQQw/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicLegalNotices.module.css"; // plasmic-import: PhJgLxyBhiCz/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: 99U4uMxg1jkf/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: FEzuhm3U7mDW/icon
import logoTextBlackColorBgWhite1500PngBSyZCbzPXsht from "./images/logoTextBlackColorBgWhite1500Png.png"; // plasmic-import: BSyZCbzPXsht/picture

createPlasmicElementProxy;

export type PlasmicLegalNotices__VariantMembers = {};
export type PlasmicLegalNotices__VariantsArgs = {};
type VariantPropType = keyof PlasmicLegalNotices__VariantsArgs;
export const PlasmicLegalNotices__VariantProps = new Array<VariantPropType>();

export type PlasmicLegalNotices__ArgsType = {};
type ArgPropType = keyof PlasmicLegalNotices__ArgsType;
export const PlasmicLegalNotices__ArgProps = new Array<ArgPropType>();

export type PlasmicLegalNotices__OverridesType = {
  body?: Flex__<"div">;
  homepage?: Flex__<"div">;
  siteHeader?: Flex__<typeof SiteHeader>;
  buttonButton?: Flex__<typeof ButtonPrimary>;
  section?: Flex__<"section">;
  h1?: Flex__<"h1">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultLegalNoticesProps {
  className?: string;
}

const $$ = {};

export function Head() {
  return (
    <>
      <meta name="twitter:card" content="summary_large_image" />
      <title key="title">{PlasmicLegalNotices.pageMetadata.title}</title>
      <meta
        key="og:title"
        property="og:title"
        content={PlasmicLegalNotices.pageMetadata.title}
      />
      <meta
        key="twitter:title"
        name="twitter:title"
        content={PlasmicLegalNotices.pageMetadata.title}
      />
      <meta
        key="description"
        name="description"
        content={PlasmicLegalNotices.pageMetadata.description}
      />
      <meta
        key="og:description"
        property="og:description"
        content={PlasmicLegalNotices.pageMetadata.description}
      />
      <meta
        key="twitter:description"
        name="twitter:description"
        content={PlasmicLegalNotices.pageMetadata.description}
      />
      <meta
        key="og:image"
        property="og:image"
        content={PlasmicLegalNotices.pageMetadata.ogImageSrc}
      />
      <meta
        key="twitter:image"
        name="twitter:image"
        content={PlasmicLegalNotices.pageMetadata.ogImageSrc}
      />
      <link rel="canonical" href={PlasmicLegalNotices.pageMetadata.canonical} />
    </>
  );
}

function PlasmicLegalNotices__RenderFunc(props: {
  variants: PlasmicLegalNotices__VariantsArgs;
  args: PlasmicLegalNotices__ArgsType;
  overrides: PlasmicLegalNotices__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "siteHeader.isNavopen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonButton.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonButton.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"body"}
          data-plasmic-override={overrides.body}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.body
          )}
        >
          <div
            data-plasmic-name={"homepage"}
            data-plasmic-override={overrides.homepage}
            className={classNames(projectcss.all, sty.homepage)}
          >
            <SiteHeader
              data-plasmic-name={"siteHeader"}
              data-plasmic-override={overrides.siteHeader}
              className={classNames("__wab_instance", sty.siteHeader)}
              isNavopen={generateStateValueProp($state, [
                "siteHeader",
                "isNavopen"
              ])}
              onIsNavopenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "siteHeader",
                  "isNavopen"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              page={["headerSimple"]}
            >
              <ButtonPrimary
                data-plasmic-name={"buttonButton"}
                data-plasmic-override={overrides.buttonButton}
                className={classNames("__wab_instance", sty.buttonButton)}
                color={generateStateValueProp($state, [
                  "buttonButton",
                  "color"
                ])}
                disabled={false}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4SJyR
                    )}
                  >
                    {"Inscription"}
                  </div>
                }
                linkTo={`/sign-up`}
                onColorChange2={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "buttonButton",
                    "color"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onTypeChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "buttonButton",
                    "type"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                type={generateStateValueProp($state, ["buttonButton", "type"])}
              />
            </SiteHeader>
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section)}
            >
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"Mentions L\u00e9gales"}
              </h1>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mPZa
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {
                      "D\u00e9nomination Commerciale : NOBULLSHIT COLLECTIVE SARL\nAdresse : 3 rue de l'aub\u00e9pine 85110 Chantonnay\nContact : contact@netir.fr\nNum\u00e9ro SIREN : 949314991\nNum\u00e9ro SIRET : 94931499100017\nH\u00e9bergement du site : "
                    }
                  </React.Fragment>
                  {
                    <PlasmicLink__
                      data-plasmic-name={"link"}
                      data-plasmic-override={overrides.link}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.link
                      )}
                      component={Link}
                      href={"https://france-nuage.fr/"}
                      platform={"gatsby"}
                    >
                      {"France-Nuage"}
                    </PlasmicLink__>
                  }
                  <React.Fragment>
                    {
                      "\nNum\u00e9ro TVA Intracommunautaire : FR56949314991\nNum\u00e9ro RCS : La Roche-sur-Yon B 949 314 991"
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
            </section>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  body: [
    "body",
    "homepage",
    "siteHeader",
    "buttonButton",
    "section",
    "h1",
    "link",
    "footer"
  ],
  homepage: [
    "homepage",
    "siteHeader",
    "buttonButton",
    "section",
    "h1",
    "link",
    "footer"
  ],
  siteHeader: ["siteHeader", "buttonButton"],
  buttonButton: ["buttonButton"],
  section: ["section", "h1", "link"],
  h1: ["h1"],
  link: ["link"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  body: "div";
  homepage: "div";
  siteHeader: typeof SiteHeader;
  buttonButton: typeof ButtonPrimary;
  section: "section";
  h1: "h1";
  link: "a";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLegalNotices__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLegalNotices__VariantsArgs;
    args?: PlasmicLegalNotices__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicLegalNotices__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicLegalNotices__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLegalNotices__ArgProps,
          internalVariantPropNames: PlasmicLegalNotices__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLegalNotices__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "body") {
    func.displayName = "PlasmicLegalNotices";
  } else {
    func.displayName = `PlasmicLegalNotices.${nodeName}`;
  }
  return func;
}

export const PlasmicLegalNotices = Object.assign(
  // Top-level PlasmicLegalNotices renders the root element
  makeNodeComponent("body"),
  {
    // Helper components rendering sub-elements
    homepage: makeNodeComponent("homepage"),
    siteHeader: makeNodeComponent("siteHeader"),
    buttonButton: makeNodeComponent("buttonButton"),
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    link: makeNodeComponent("link"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicLegalNotices
    internalVariantProps: PlasmicLegalNotices__VariantProps,
    internalArgProps: PlasmicLegalNotices__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Netir - Mentions légales",
      description:
        "Consultez nos mentions légales pour plus d'informations sur nos services, nos politiques et nos conditions d'utilisation.",
      ogImageSrc:
        "https://site-assets.plasmic.app/9f3005b94278521a011c47609ecbb96a.png",
      canonical: "https://netir.fr/legal-notices"
    }
  }
);

export default PlasmicLegalNotices;
/* prettier-ignore-end */
