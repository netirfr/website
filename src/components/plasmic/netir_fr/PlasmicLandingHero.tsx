/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: adVdIOAVoo1F

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Plop from "../../Plop"; // plasmic-import: nMzQ825_SDoh/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicLandingHero.module.css"; // plasmic-import: adVdIOAVoo1F/css

import group1627PngBaN5Kk1MtFt from "./images/group1627Png.png"; // plasmic-import: BaN5-KK1mtFt/picture

createPlasmicElementProxy;

export type PlasmicLandingHero__VariantMembers = {
  entreprise: "entreprise";
  freelance: "freelance";
  apporteurDaffaire: "apporteurDaffaire";
};
export type PlasmicLandingHero__VariantsArgs = {
  entreprise?: SingleBooleanChoiceArg<"entreprise">;
  freelance?: SingleBooleanChoiceArg<"freelance">;
  apporteurDaffaire?: SingleBooleanChoiceArg<"apporteurDaffaire">;
};
type VariantPropType = keyof PlasmicLandingHero__VariantsArgs;
export const PlasmicLandingHero__VariantProps = new Array<VariantPropType>(
  "entreprise",
  "freelance",
  "apporteurDaffaire"
);

export type PlasmicLandingHero__ArgsType = {
  description?: string;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicLandingHero__ArgsType;
export const PlasmicLandingHero__ArgProps = new Array<ArgPropType>(
  "description",
  "children"
);

export type PlasmicLandingHero__OverridesType = {
  root?: Flex__<"div">;
  plop?: Flex__<typeof Plop>;
  text?: Flex__<"div">;
};

export interface DefaultLandingHeroProps {
  description?: string;
  children?: React.ReactNode;
  entreprise?: SingleBooleanChoiceArg<"entreprise">;
  freelance?: SingleBooleanChoiceArg<"freelance">;
  apporteurDaffaire?: SingleBooleanChoiceArg<"apporteurDaffaire">;
  className?: string;
}

const $$ = {};

function PlasmicLandingHero__RenderFunc(props: {
  variants: PlasmicLandingHero__VariantsArgs;
  args: PlasmicLandingHero__ArgsType;
  overrides: PlasmicLandingHero__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "entreprise",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.entreprise
      },
      {
        path: "freelance",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.freelance
      },
      {
        path: "apporteurDaffaire",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.apporteurDaffaire
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootapporteurDaffaire]: hasVariant(
            $state,
            "apporteurDaffaire",
            "apporteurDaffaire"
          ),
          [sty.rootentreprise]: hasVariant($state, "entreprise", "entreprise"),
          [sty.rootfreelance]: hasVariant($state, "freelance", "freelance")
        }
      )}
    >
      {renderPlasmicSlot({
        defaultContents: (
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__hgPEv)}
            displayHeight={"180px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"180px"}
            loading={"lazy"}
            src={{
              src: group1627PngBaN5Kk1MtFt,
              fullWidth: 736,
              fullHeight: 746,
              aspectRatio: undefined
            }}
          />
        ),

        value: args.children
      })}
      <Plop
        data-plasmic-name={"plop"}
        data-plasmic-override={overrides.plop}
        backgroundColor={(() => {
          try {
            return (() => {
              return ($state.backgroundColor = "red");
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "var(--token-jgohepLVeKvh)";
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.plop)}
        label={``}
      />

      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textapporteurDaffaire]: hasVariant(
            $state,
            "apporteurDaffaire",
            "apporteurDaffaire"
          ),
          [sty.textentreprise]: hasVariant($state, "entreprise", "entreprise"),
          [sty.textfreelance]: hasVariant($state, "freelance", "freelance"),
          [sty.textfreelance_entreprise]:
            hasVariant($state, "freelance", "freelance") &&
            hasVariant($state, "entreprise", "entreprise")
        })}
      >
        {hasVariant($state, "apporteurDaffaire", "apporteurDaffaire")
          ? "Anna - apporteuse d\u2019affaires entre Lucas et Armand"
          : hasVariant($state, "freelance", "freelance")
            ? "Lucas - Freelance UX/UI"
            : hasVariant($state, "entreprise", "entreprise")
              ? "Armand - Client de Lucas, directeur g\u00e9n\u00e9ral "
              : "Elisa - Mentor en web\n design de Lucas"}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "plop", "text"],
  plop: ["plop"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  plop: typeof Plop;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLandingHero__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLandingHero__VariantsArgs;
    args?: PlasmicLandingHero__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicLandingHero__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicLandingHero__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLandingHero__ArgProps,
          internalVariantPropNames: PlasmicLandingHero__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLandingHero__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLandingHero";
  } else {
    func.displayName = `PlasmicLandingHero.${nodeName}`;
  }
  return func;
}

export const PlasmicLandingHero = Object.assign(
  // Top-level PlasmicLandingHero renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    plop: makeNodeComponent("plop"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicLandingHero
    internalVariantProps: PlasmicLandingHero__VariantProps,
    internalArgProps: PlasmicLandingHero__ArgProps
  }
);

export default PlasmicLandingHero;
/* prettier-ignore-end */
