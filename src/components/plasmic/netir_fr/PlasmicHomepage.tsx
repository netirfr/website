/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: 4YfaN7JIFcbv

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SiteHeader from "../../SiteHeader"; // plasmic-import: Vg4NgSIGKm96/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: byb1-I0x_v8X/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import CardWithBackground from "../../CardWithBackground"; // plasmic-import: zo9N-Lnk8_00/component
import Besoin from "../../Besoin"; // plasmic-import: CZV8F0NS4iKj/component
import Avantages from "../../Avantages"; // plasmic-import: I1cyDttPCrVx/component
import Testimonial from "../../Testimonial"; // plasmic-import: dCyluW4eRMLq/component
import Cta from "../../Cta"; // plasmic-import: FtcUsaQ-hIvC/component
import Faq from "../../Faq"; // plasmic-import: wBbJjw0EbsaX/component
import Footer from "../../Footer"; // plasmic-import: lPSQkcOmsQQw/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: 4YfaN7JIFcbv/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: 99U4uMxg1jkf/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: FEzuhm3U7mDW/icon
import NIcons2Icon from "./icons/PlasmicIcon__NIcons2"; // plasmic-import: _EC8PI1hBKVF/icon
import PercentSvgrepoComSvg2Icon from "./icons/PlasmicIcon__PercentSvgrepoComSvg2"; // plasmic-import: XFxekbZI_x21/icon
import SquareAcademicCapSvgrepoComSvgIcon from "./icons/PlasmicIcon__SquareAcademicCapSvgrepoComSvg"; // plasmic-import: KMUNmm_lrHy9/icon
import TaskSquareSvgrepoCom2SvgIcon from "./icons/PlasmicIcon__TaskSquareSvgrepoCom2Svg"; // plasmic-import: m_uoUlZQaHGh/icon
import TreeSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__TreeSvgrepoCom1Svg"; // plasmic-import: WKrvEG39l1b5/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: ve2oeUzZomz5/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: K29TJA3sQduS/icon
import InvoiceSvgrepoComSvgIcon from "./icons/PlasmicIcon__InvoiceSvgrepoComSvg"; // plasmic-import: Ogpp_AQYarfa/icon
import HealthSvgrepoComSvgIcon from "./icons/PlasmicIcon__HealthSvgrepoComSvg"; // plasmic-import: H-kGvVs8IKBX/icon
import Communication3SvgrepoComSvgIcon from "./icons/PlasmicIcon__Communication3SvgrepoComSvg"; // plasmic-import: FtZ7Odka8zUD/icon
import LockSvgrepoComSvgIcon from "./icons/PlasmicIcon__LockSvgrepoComSvg"; // plasmic-import: mT_v88aj8gkM/icon
import SecurityVerifiedSolidSvgrepoComSvgIcon from "./icons/PlasmicIcon__SecurityVerifiedSolidSvgrepoComSvg"; // plasmic-import: IHVqEjiJqz8n/icon
import TreeSvgrepoComSvgIcon from "./icons/PlasmicIcon__TreeSvgrepoComSvg"; // plasmic-import: 4ll9QRXUi2m_/icon
import RocketSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__RocketSvgrepoCom1Svg"; // plasmic-import: bDxppOFEQOIt/icon
import TrophySvgrepoComSvgIcon from "./icons/PlasmicIcon__TrophySvgrepoComSvg"; // plasmic-import: HbwJeCQLj88Y/icon
import BulbOnSvgrepoComSvgIcon from "./icons/PlasmicIcon__BulbOnSvgrepoComSvg"; // plasmic-import: xmr5MGcr2dOq/icon
import WebLinkSvgrepoComSvgIcon from "./icons/PlasmicIcon__WebLinkSvgrepoComSvg"; // plasmic-import: pa41I_uKsfd9/icon
import unePetiteChevreBlancheSurLeSommetDUneMontPngCp7Ml1JfrFv from "./images/unePetiteChevreBlancheSurLeSommetDUneMontPng.png"; // plasmic-import: -Cp7ml1JfrFV/picture
import handipharmLogoWbKtOhWPwtiz from "./images/handipharmLogo.svg"; // plasmic-import: WbKtOhWPwtiz/picture
import logoBigXZpuT8Kgy8Eh from "./images/logoBig.png"; // plasmic-import: xZpuT8Kgy8eh/picture
import nobullshitXgwL6ARlI0DP from "./images/nobullshit.png"; // plasmic-import: xgwL6ARlI0dP/picture
import cosikaLogo2WE5FfyUbgaMx from "./images/cosikaLogo2.png"; // plasmic-import: wE5FFYUbgaMx/picture
import turaquand6Isdk8MaLFx9 from "./images/turaquand.png"; // plasmic-import: 6Isdk8maLFx9/picture
import smala2ZsSz5UizzlDx from "./images/smala2.png"; // plasmic-import: ZsSZ5uizzlDx/picture
import cloudIamPjUgCpGuMml0 from "./images/cloudIam.png"; // plasmic-import: PjUGCpGuMml0/picture
import phamaConfort0UPxsoChPv5Y from "./images/phamaConfort.png"; // plasmic-import: 0uPxsoCHPv5y/picture
import campingCar2SNlYfWn9VXr from "./images/campingCar.png"; // plasmic-import: 2SNlYFWn9vXr/picture
import abcmLogoNcQOw4GGoyu from "./images/abcmLogo.png"; // plasmic-import: ncQ_ow4gGoyu/picture
import franceNuageEytvfVu1LwPc from "./images/franceNuage.png"; // plasmic-import: eytvfVU1lwPc/picture
import freelance55PngTxxtE1HolTJ from "./images/freelance55Png.png"; // plasmic-import: TxxtE1Hol_tJ/picture
import entreprise15PngQwvqs5FkPgmw from "./images/entreprise15Png.png"; // plasmic-import: qwvqs5fkPgmw/picture
import mentor55PngEhbJjkajIFl6 from "./images/mentor55Png.png"; // plasmic-import: EHBJjkajIFl6/picture
import apporteuraffaire55PngWGGKtOLdwD from "./images/apporteuraffaire55Png.png"; // plasmic-import: -w_gGKtOLdwD/picture
import image11ChRPvgo2AJ from "./images/image11.svg"; // plasmic-import: CH-rPvgo-2aJ/picture
import image124272Jd4WBDj9 from "./images/image12.svg"; // plasmic-import: 4272Jd4wBDj9/picture
import image13Aa3G6IM4DpM from "./images/image13.svg"; // plasmic-import: aa3_g6iM4dpM/picture
import image14JoL4V7JbH6U from "./images/image14.svg"; // plasmic-import: JoL4v-7jbH6U/picture
import image15TPzCzTy7Vk from "./images/image15.svg"; // plasmic-import: T_PZ_CzTY7Vk/picture
import image16LyxCe69L04 from "./images/image16.svg"; // plasmic-import: lyx-_Ce69l04/picture
import image17WzrgQnjFgwsj from "./images/image17.svg"; // plasmic-import: wzrgQnjFGWSJ/picture
import geminiGeneratedImageJ00L65J00L65J00L1PngBQcKg4PcBayL from "./images/geminiGeneratedImageJ00L65J00L65J00L1Png.png"; // plasmic-import: BQcKG4pcBayL/picture
import geminiGeneratedImage8Nmavg8Nmavg8NmaPngFaQbk7IFwq from "./images/geminiGeneratedImage8Nmavg8Nmavg8NmaPng.png"; // plasmic-import: fa-qbk_7IFwq/picture
import geminiGeneratedImageDghrcodghrcodghrPngKxSUpNaIbv from "./images/geminiGeneratedImageDghrcodghrcodghrPng.png"; // plasmic-import: kxS-UpNa-IBV/picture
import geminiGeneratedImageDo8Lcjdo8Lcjdo8LPngNMbgxDyE5Ve from "./images/geminiGeneratedImageDo8Lcjdo8Lcjdo8LPng.png"; // plasmic-import: n-MbgxDyE5VE/picture
import geminiGeneratedImage8R11Yk8R11Yk8R11RemovebgPreviewPngBZ8T737YaQxk from "./images/geminiGeneratedImage8R11Yk8R11Yk8R11RemovebgPreviewPng.png"; // plasmic-import: bZ8t737YaQXK/picture
import logoTextBlackColorBgWhite1500PngBSyZCbzPXsht from "./images/logoTextBlackColorBgWhite1500Png.png"; // plasmic-import: BSyZCbzPXsht/picture

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  body?: Flex__<"div">;
  wrapper?: Flex__<"div">;
  hero?: Flex__<"div">;
  siteHeader?: Flex__<typeof SiteHeader>;
  buttonButton?: Flex__<typeof ButtonPrimary>;
  interactionEffect?: Flex__<"div">;
  pres?: Flex__<"div">;
  value?: Flex__<"div">;
  titres?: Flex__<"div">;
  h1?: Flex__<"h1">;
  h4?: Flex__<"h4">;
  buttons2?: Flex__<"div">;
  buttonButton2?: Flex__<typeof ButtonPrimary>;
  interactionEffect2?: Flex__<"div">;
  buttonButton6?: Flex__<typeof ButtonPrimary>;
  interactionEffect6?: Flex__<"div">;
  confiance?: Flex__<"div">;
  titre6?: Flex__<"div">;
  carousel?: Flex__<"div">;
  sliderCarousel4?: Flex__<typeof SliderWrapper>;
  handipharmLogo?: Flex__<"div">;
  logoBig2?: Flex__<"div">;
  nobullshit2?: Flex__<"div">;
  cosikaLogo2?: Flex__<"div">;
  turquand3?: Flex__<"div">;
  turquand4?: Flex__<typeof PlasmicImg__>;
  smala3?: Flex__<"div">;
  cloudIam2?: Flex__<"div">;
  pharmaConfort2?: Flex__<"div">;
  campingCar2?: Flex__<"div">;
  abcm3?: Flex__<"div">;
  franceNuage2?: Flex__<"div">;
  quatuor?: Flex__<"div">;
  titre?: Flex__<"div">;
  persona?: Flex__<"div">;
  besoin?: Flex__<"section">;
  advantages?: Flex__<"div">;
  titre3?: Flex__<"div">;
  testimonials?: Flex__<"div">;
  titre4?: Flex__<"div">;
  testimonial?: Flex__<"div">;
  callToAction2?: Flex__<"div">;
  faq?: Flex__<"div">;
  titre7?: Flex__<"div">;
  questions?: Flex__<"div">;
  illustration?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultHomepageProps {
  className?: string;
}

const $$ = {};

export function Head() {
  return (
    <>
      <meta name="twitter:card" content="summary_large_image" />
      <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
      <meta
        key="og:title"
        property="og:title"
        content={PlasmicHomepage.pageMetadata.title}
      />
      <meta
        key="twitter:title"
        name="twitter:title"
        content={PlasmicHomepage.pageMetadata.title}
      />
      <meta
        key="description"
        name="description"
        content={PlasmicHomepage.pageMetadata.description}
      />
      <meta
        key="og:description"
        property="og:description"
        content={PlasmicHomepage.pageMetadata.description}
      />
      <meta
        key="twitter:description"
        name="twitter:description"
        content={PlasmicHomepage.pageMetadata.description}
      />
      <meta
        key="og:image"
        property="og:image"
        content={PlasmicHomepage.pageMetadata.ogImageSrc}
      />
      <meta
        key="twitter:image"
        name="twitter:image"
        content={PlasmicHomepage.pageMetadata.ogImageSrc}
      />
      <link rel="canonical" href={PlasmicHomepage.pageMetadata.canonical} />
    </>
  );
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "siteHeader.isNavopen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonButton.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonButton2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonButton.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonButton2.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sliderCarousel4.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel4",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "buttonButton6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "buttonNoirModifier2"
      },
      {
        path: "buttonButton6.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "soft"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"body"}
          data-plasmic-override={overrides.body}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.body
          )}
        >
          <div
            data-plasmic-name={"wrapper"}
            data-plasmic-override={overrides.wrapper}
            className={classNames(projectcss.all, sty.wrapper)}
          >
            <div
              data-plasmic-name={"hero"}
              data-plasmic-override={overrides.hero}
              className={classNames(projectcss.all, sty.hero)}
            >
              <SiteHeader
                data-plasmic-name={"siteHeader"}
                data-plasmic-override={overrides.siteHeader}
                className={classNames("__wab_instance", sty.siteHeader)}
                isNavopen={generateStateValueProp($state, [
                  "siteHeader",
                  "isNavopen"
                ])}
                onIsNavopenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "siteHeader",
                    "isNavopen"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <ButtonPrimary
                  data-plasmic-name={"buttonButton"}
                  data-plasmic-override={overrides.buttonButton}
                  className={classNames("__wab_instance", sty.buttonButton)}
                  color={generateStateValueProp($state, [
                    "buttonButton",
                    "color"
                  ])}
                  disabled={false}
                  interactionEffect2={
                    <div
                      data-plasmic-name={"interactionEffect"}
                      data-plasmic-override={overrides.interactionEffect}
                      className={classNames(
                        projectcss.all,
                        sty.interactionEffect
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToInscription"] = true
                          ? (() => {
                              const actionArgs = { destination: `/sign-up` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __gatsbyNavigate(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToInscription"] != null &&
                          typeof $steps["goToInscription"] === "object" &&
                          typeof $steps["goToInscription"].then === "function"
                        ) {
                          $steps["goToInscription"] =
                            await $steps["goToInscription"];
                        }
                      }}
                    />
                  }
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zt5NY
                      )}
                    >
                      {"Inscription"}
                    </div>
                  }
                  linkTo={"netir.fr/sign-up"}
                  onColorChange2={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "buttonButton",
                      "color"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onTypeChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "buttonButton",
                      "type"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  type={generateStateValueProp($state, [
                    "buttonButton",
                    "type"
                  ])}
                />
              </SiteHeader>
              <div
                data-plasmic-name={"pres"}
                data-plasmic-override={overrides.pres}
                className={classNames(projectcss.all, sty.pres)}
              >
                <div
                  data-plasmic-name={"value"}
                  data-plasmic-override={overrides.value}
                  className={classNames(projectcss.all, sty.value)}
                >
                  <div
                    data-plasmic-name={"titres"}
                    data-plasmic-override={overrides.titres}
                    className={classNames(projectcss.all, sty.titres)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "var(--token-a7EGbo9QyMt7)" }}
                        >
                          {"Une mission = un Freelance. "}
                        </span>
                      </React.Fragment>
                    </h1>
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3___34Os9
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "var(--token-a7EGbo9QyMt7)" }}
                        >
                          {
                            "Et derri\u00e8re, un Mentor qui assure vos r\u00e9sultats."
                          }
                        </span>
                      </React.Fragment>
                    </h3>
                    <h4
                      data-plasmic-name={"h4"}
                      data-plasmic-override={overrides.h4}
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Faites confiance \u00e0 nos mentors, ils sauront vous proposer nos meilleurs freelances."
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "Faites confiance \u00e0 nos mentors, ils sauront vous proposer nos meilleurs freelances."
                          : "La marketplace qui en finit avec l'isolement du freelance, les \ncommissions exhorbitantes et le casse-t\u00eate du recrutement qualifi\u00e9."}
                    </h4>
                    <div
                      data-plasmic-name={"buttons2"}
                      data-plasmic-override={overrides.buttons2}
                      className={classNames(projectcss.all, sty.buttons2)}
                    >
                      <ButtonPrimary
                        data-plasmic-name={"buttonButton2"}
                        data-plasmic-override={overrides.buttonButton2}
                        className={classNames(
                          "__wab_instance",
                          sty.buttonButton2
                        )}
                        color={generateStateValueProp($state, [
                          "buttonButton2",
                          "color"
                        ])}
                        destination={"netir.fr/sign-up"}
                        end={
                          <NIcons2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__kGoWj
                            )}
                            role={"img"}
                          />
                        }
                        interactionEffect2={
                          <div
                            data-plasmic-name={"interactionEffect2"}
                            data-plasmic-override={overrides.interactionEffect2}
                            className={classNames(
                              projectcss.all,
                              sty.interactionEffect2
                            )}
                          />
                        }
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0Eh8Z
                            )}
                          >
                            {"Je rejoins Netir"}
                          </div>
                        }
                        linkTo={"netir.fr/sign-up"}
                        onColorChange2={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "buttonButton2",
                            "color"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onTypeChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "buttonButton2",
                            "type"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        type={generateStateValueProp($state, [
                          "buttonButton2",
                          "type"
                        ])}
                      />

                      <ButtonPrimary
                        data-plasmic-name={"buttonButton6"}
                        data-plasmic-override={overrides.buttonButton6}
                        className={classNames(
                          "__wab_instance",
                          sty.buttonButton6
                        )}
                        color={generateStateValueProp($state, [
                          "buttonButton6",
                          "color"
                        ])}
                        destination={"#quatuor"}
                        end={
                          <NIcons2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__jmlwn
                            )}
                            role={"img"}
                          />
                        }
                        interactionEffect2={
                          <div
                            data-plasmic-name={"interactionEffect6"}
                            data-plasmic-override={overrides.interactionEffect6}
                            className={classNames(
                              projectcss.all,
                              sty.interactionEffect6
                            )}
                          />
                        }
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nZgTm
                            )}
                          >
                            {"En savoir plus"}
                          </div>
                        }
                        linkTo={"#quatuor"}
                        onColorChange2={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "buttonButton6",
                            "color"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onTypeChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "buttonButton6",
                            "type"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        type={generateStateValueProp($state, [
                          "buttonButton6",
                          "type"
                        ])}
                      />
                    </div>
                  </div>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__n8Kwq)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "auto"
                          : "600px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "100%"
                        : "none"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "60%"
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "40%"
                          : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: unePetiteChevreBlancheSurLeSommetDUneMontPngCp7Ml1JfrFv,
                      fullWidth: 1024,
                      fullHeight: 1365,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"confiance"}
              data-plasmic-override={overrides.confiance}
              className={classNames(projectcss.all, sty.confiance)}
            >
              <div
                data-plasmic-name={"titre6"}
                data-plasmic-override={overrides.titre6}
                className={classNames(projectcss.all, sty.titre6)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__gsEsO
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "var(--token-9HNAvI0pqHnB)" }}
                    >
                      {"180+ entreprises "}
                    </span>
                    <React.Fragment>
                      {"font d\u00e9j\u00e0 confiance \u00e0 Netir."}
                    </React.Fragment>
                  </React.Fragment>
                </h2>
              </div>
              <div
                data-plasmic-name={"carousel"}
                data-plasmic-override={overrides.carousel}
                className={classNames(projectcss.all, sty.carousel)}
              >
                {(() => {
                  const child$Props = {
                    arrowColor: "#3C0E0E",
                    arrows: false,
                    autoplay: true,
                    autoplaySpeed: 0,
                    beforeChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "currentSlide",
                        ["sliderCarousel4", "currentSlide"],
                        SliderWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    centerMode: true,
                    className: classNames(
                      "__wab_instance",
                      sty.sliderCarousel4
                    ),
                    cssEase: "linear",
                    fade: false,
                    initialSlide: generateStateValueProp($state, [
                      "sliderCarousel4",
                      "currentSlide"
                    ]),
                    pauseOnHover: hasVariant(
                      globalVariants,
                      "screen",
                      "mobileOnly"
                    )
                      ? false
                      : false,
                    ref: ref => {
                      $refs["sliderCarousel4"] = ref;
                    },
                    sliderScopeClassName: sty["sliderCarousel4__slider"],
                    slidesToScroll: 9,
                    speed: hasVariant(globalVariants, "screen", "mobileOnly")
                      ? 2050
                      : 22000,
                    swipe: false,
                    touchMove: false,
                    variableWidth: true,
                    vertical: false
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "currentSlide",
                        plasmicStateName: "sliderCarousel4.currentSlide"
                      }
                    ],
                    [],
                    SliderWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <SliderWrapper
                      data-plasmic-name={"sliderCarousel4"}
                      data-plasmic-override={overrides.sliderCarousel4}
                      {...child$Props}
                    >
                      <div
                        data-plasmic-name={"handipharmLogo"}
                        data-plasmic-override={overrides.handipharmLogo}
                        className={classNames(
                          projectcss.all,
                          sty.handipharmLogo
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__jIZtt)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100px"
                              : "80px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "200px"
                          }
                          src={{
                            src: handipharmLogoWbKtOhWPwtiz,
                            fullWidth: 335,
                            fullHeight: 135,
                            aspectRatio: 2.481481
                          }}
                        />
                      </div>
                      <div
                        data-plasmic-name={"logoBig2"}
                        data-plasmic-override={overrides.logoBig2}
                        className={classNames(projectcss.all, sty.logoBig2)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__c24Kj)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100px"
                              : "85px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "none"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "200px"
                          }
                          src={{
                            src: logoBigXZpuT8Kgy8Eh,
                            fullWidth: 500,
                            fullHeight: 500,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        data-plasmic-name={"nobullshit2"}
                        data-plasmic-override={overrides.nobullshit2}
                        className={classNames(projectcss.all, sty.nobullshit2)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__nPnAm)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "106px"
                              : "80px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "100%"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "200px"
                          }
                          src={{
                            src: nobullshitXgwL6ARlI0DP,
                            fullWidth: 766,
                            fullHeight: 326,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        data-plasmic-name={"cosikaLogo2"}
                        data-plasmic-override={overrides.cosikaLogo2}
                        className={classNames(projectcss.all, sty.cosikaLogo2)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__nL0O)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "60px"
                              : "90px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "100%"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "200px"
                          }
                          src={{
                            src: cosikaLogo2WE5FfyUbgaMx,
                            fullWidth: 1040,
                            fullHeight: 233,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        data-plasmic-name={"turquand3"}
                        data-plasmic-override={overrides.turquand3}
                        className={classNames(projectcss.all, sty.turquand3)}
                      >
                        <PlasmicImg__
                          data-plasmic-name={"turquand4"}
                          data-plasmic-override={overrides.turquand4}
                          alt={""}
                          className={classNames(sty.turquand4)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "106px"
                              : "80px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "100%"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "200px"
                          }
                          src={{
                            src: turaquand6Isdk8MaLFx9,
                            fullWidth: 400,
                            fullHeight: 400,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        data-plasmic-name={"smala3"}
                        data-plasmic-override={overrides.smala3}
                        className={classNames(projectcss.all, sty.smala3)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___1RpO)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "106px"
                              : "80px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "100%"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "200px"
                          }
                          src={{
                            src: smala2ZsSz5UizzlDx,
                            fullWidth: 368,
                            fullHeight: 163,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        data-plasmic-name={"cloudIam2"}
                        data-plasmic-override={overrides.cloudIam2}
                        className={classNames(projectcss.all, sty.cloudIam2)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__xSsyu)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "106px"
                              : "80px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "100%"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "200px"
                          }
                          src={{
                            src: cloudIamPjUgCpGuMml0,
                            fullWidth: 812,
                            fullHeight: 307,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        data-plasmic-name={"pharmaConfort2"}
                        data-plasmic-override={overrides.pharmaConfort2}
                        className={classNames(
                          projectcss.all,
                          sty.pharmaConfort2
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__h7IQp)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "106px"
                              : "80px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "100%"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "200px"
                          }
                          src={{
                            src: phamaConfort0UPxsoChPv5Y,
                            fullWidth: 681,
                            fullHeight: 366,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        data-plasmic-name={"campingCar2"}
                        data-plasmic-override={overrides.campingCar2}
                        className={classNames(projectcss.all, sty.campingCar2)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___7ROvY)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "106px"
                              : "80px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "100%"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "200px"
                          }
                          src={{
                            src: campingCar2SNlYfWn9VXr,
                            fullWidth: 502,
                            fullHeight: 145,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        data-plasmic-name={"abcm3"}
                        data-plasmic-override={overrides.abcm3}
                        className={classNames(projectcss.all, sty.abcm3)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__fgTxo)}
                          displayHeight={"80px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"200px"}
                          src={{
                            src: abcmLogoNcQOw4GGoyu,
                            fullWidth: 427,
                            fullHeight: 162,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        data-plasmic-name={"franceNuage2"}
                        data-plasmic-override={overrides.franceNuage2}
                        className={classNames(projectcss.all, sty.franceNuage2)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__wUBpR)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "106px"
                              : "80px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "100%"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "200px"
                          }
                          src={{
                            src: franceNuageEytvfVu1LwPc,
                            fullWidth: 478,
                            fullHeight: 153,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    </SliderWrapper>
                  );
                })()}
              </div>
            </div>
            <div
              data-plasmic-name={"quatuor"}
              data-plasmic-override={overrides.quatuor}
              className={classNames(projectcss.all, sty.quatuor)}
              id={"quatuor"}
            >
              <div
                data-plasmic-name={"titre"}
                data-plasmic-override={overrides.titre}
                className={classNames(projectcss.all, sty.titre)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3___7TdG
                  )}
                >
                  {'Assez des plateformes qui ne font que du "matchmaking" ?'}
                </h3>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__rbYd
                  )}
                >
                  {"Netir va plus loin."}
                </h2>
              </div>
              <div
                data-plasmic-name={"persona"}
                data-plasmic-override={overrides.persona}
                className={classNames(projectcss.all, sty.persona)}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__tqIqJ
                  )}
                  component={Link}
                  href={`/freelances`}
                  platform={"gatsby"}
                >
                  <CardWithBackground
                    backgroundimage={{
                      src: freelance55PngTxxtE1HolTJ,
                      fullWidth: 1210,
                      fullHeight: 1362,
                      aspectRatio: undefined
                    }}
                    className={classNames(
                      "__wab_instance",
                      sty.cardWithBackground__zsbxV
                    )}
                    description={
                      "Tu n'es plus seul. Trouve des missions stimulantes, monte en comp\u00e9tence avec ton mentor et garde 97% de ce que tu gagnes."
                    }
                    titre={"Freelance"}
                  />
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__gtVmO
                  )}
                  component={Link}
                  href={`/entreprises`}
                  platform={"gatsby"}
                >
                  <CardWithBackground
                    backgroundimage={{
                      src: entreprise15PngQwvqs5FkPgmw,
                      fullWidth: 1328,
                      fullHeight: 1590,
                      aspectRatio: undefined
                    }}
                    className={classNames(
                      "__wab_instance",
                      sty.cardWithBackground__wlT9J
                    )}
                    description={
                      "Arr\u00eate de recruter \u00e0 l'aveugle. Acc\u00e8de \u00e0 des freelances ultra-qualifi\u00e9s, coach\u00e9s en continu par des experts pour des r\u00e9sultats optimis\u00e9s."
                    }
                    titre={"Entreprise"}
                  />
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__vnYmt
                  )}
                  component={Link}
                  href={`/mentor`}
                  platform={"gatsby"}
                >
                  <CardWithBackground
                    backgroundimage={{
                      src: mentor55PngEhbJjkajIFl6,
                      fullWidth: 1210,
                      fullHeight: 1362,
                      aspectRatio: undefined
                    }}
                    className={classNames(
                      "__wab_instance",
                      sty.cardWithBackground__gdDu3
                    )}
                    description={
                      "Transmets ton savoir. Deviens le coach de la nouvelle g\u00e9n\u00e9ration freelance, mon\u00e9tise ton expertise et g\u00e9n\u00e8re un revenu compl\u00e9mentaire."
                    }
                    titre={"Mentor"}
                  />
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__o8Lle
                  )}
                  component={Link}
                  href={`/apporteur-affaires`}
                  platform={"gatsby"}
                >
                  <CardWithBackground
                    backgroundimage={{
                      src: apporteuraffaire55PngWGGKtOLdwD,
                      fullWidth: 1132,
                      fullHeight: 1276,
                      aspectRatio: undefined
                    }}
                    className={classNames(
                      "__wab_instance",
                      sty.cardWithBackground___54OT
                    )}
                    description={
                      "Mon\u00e9tise ton r\u00e9seau. Recommande un Freelance ou une Entreprise et touche ta commission sur la mise en relation. On te simplifie le processus."
                    }
                    titre={"Apporteur d'affaire"}
                  />
                </PlasmicLink__>
              </div>
            </div>
            <section
              data-plasmic-name={"besoin"}
              data-plasmic-override={overrides.besoin}
              className={classNames(projectcss.all, sty.besoin)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__xE7Oe
                )}
              >
                {"Netir vs. le reste du march\u00e9 : le choix est vite fait."}
              </h2>
              <div className={classNames(projectcss.all, sty.freeBox___7VRfM)}>
                <Besoin
                  className={classNames("__wab_instance", sty.besoin___2GQeO)}
                  description={
                    "Seulement 3% pour le Freelance et 3% pour le Mentor. (les autres prennent jusqu'\u00e0 10%)"
                  }
                  titre={"Commission juste"}
                >
                  <PercentSvgrepoComSvg2Icon
                    className={classNames(projectcss.all, sty.svg__lqj1K)}
                    role={"img"}
                  />
                </Besoin>
                <Besoin
                  className={classNames("__wab_instance", sty.besoin__pf4X7)}
                  description={
                    "Mentorat personnalis\u00e9 pour monter en comp\u00e9tence et ne jamais rester bloqu\u00e9 (masterclass, pair-programming)."
                  }
                  titre={"Accompagnement continu"}
                >
                  <SquareAcademicCapSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg___83Byo)}
                    role={"img"}
                  />
                </Besoin>
                <Besoin
                  className={classNames("__wab_instance", sty.besoin__vzCdn)}
                  description={
                    "Simplifie ta vie. Devis, facturation, aspects juridiques et sociaux... on g\u00e8re (en partie)."
                  }
                  titre={"Support administratif"}
                >
                  <TaskSquareSvgrepoCom2SvgIcon
                    className={classNames(projectcss.all, sty.svg__kgdKg)}
                    role={"img"}
                  />
                </Besoin>
                <Besoin
                  className={classNames("__wab_instance", sty.besoin___3EVLk)}
                  description={
                    "Investis une partie de tes gains dans des projets \u00e0 impact."
                  }
                  titre={
                    hasVariant(globalVariants, "screen", "tabletOnly")
                      ? "Impact Positif "
                      : "Impact Positif "
                  }
                >
                  <TreeSvgrepoCom1SvgIcon
                    className={classNames(projectcss.all, sty.svg___9U9Sv)}
                    role={"img"}
                  />
                </Besoin>
              </div>
            </section>
            <div
              data-plasmic-name={"advantages"}
              data-plasmic-override={overrides.advantages}
              className={classNames(projectcss.all, sty.advantages)}
            >
              <div
                data-plasmic-name={"titre3"}
                data-plasmic-override={overrides.titre3}
                className={classNames(projectcss.all, sty.titre3)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__ace6Y
                  )}
                >
                  {"Une tonne d'avantages"}
                </h2>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___9Rq9B)}>
                <Avantages
                  avantage={"Freelances tr\u00e8s qualifi\u00e9s"}
                  className={classNames("__wab_instance", sty.avantages__e53Gv)}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["mobile"]
                      : undefined
                  }
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__lr0Ji)}
                    role={"img"}
                  />
                </Avantages>
                <Avantages
                  avantage={"Commission de 3%"}
                  className={classNames("__wab_instance", sty.avantages__qkOKy)}
                  icon={{
                    src: image11ChRPvgo2AJ,
                    fullWidth: 52,
                    fullHeight: 52,
                    aspectRatio: 1
                  }}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["mobile"]
                      : undefined
                  }
                >
                  <Icon2Icon
                    className={classNames(projectcss.all, sty.svg__dYQfn)}
                    role={"img"}
                  />
                </Avantages>
                <Avantages
                  avantage={"Facturation int\u00e9gr\u00e9e"}
                  className={classNames("__wab_instance", sty.avantages__jPovf)}
                  icon={{
                    src: image124272Jd4WBDj9,
                    fullWidth: 52,
                    fullHeight: 52,
                    aspectRatio: 1
                  }}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["mobile"]
                      : undefined
                  }
                >
                  <InvoiceSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__vqTfp)}
                    role={"img"}
                  />
                </Avantages>
                <Avantages
                  avantage={"Mutuelle et assurance "}
                  className={classNames("__wab_instance")}
                  icon={{
                    src: image13Aa3G6IM4DpM,
                    fullWidth: 52,
                    fullHeight: 52,
                    aspectRatio: 1
                  }}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["mobile"]
                      : undefined
                  }
                >
                  <HealthSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__wiuNg)}
                    role={"img"}
                  />
                </Avantages>
                <Avantages
                  avantage={"Mentorat personnalis\u00e9"}
                  className={classNames("__wab_instance", sty.avantages__ptYxw)}
                  icon={{
                    src: image14JoL4V7JbH6U,
                    fullWidth: 52,
                    fullHeight: 52,
                    aspectRatio: 1
                  }}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["mobile"]
                      : undefined
                  }
                >
                  <Communication3SvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg___9GCy9)}
                    role={"img"}
                  />
                </Avantages>
                <Avantages
                  avantage={"Protection impay\u00e9s"}
                  className={classNames("__wab_instance", sty.avantages__ySlNs)}
                  icon={{
                    src: image15TPzCzTy7Vk,
                    fullWidth: 52,
                    fullHeight: 52,
                    aspectRatio: 1
                  }}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["mobile"]
                      : undefined
                  }
                >
                  <LockSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__q6Evy)}
                    role={"img"}
                  />
                </Avantages>
                <Avantages
                  avantage={"Paiements s\u00e9curis\u00e9s"}
                  className={classNames("__wab_instance", sty.avantages__qLn97)}
                  icon={{
                    src: image16LyxCe69L04,
                    fullWidth: 52,
                    fullHeight: 52,
                    aspectRatio: 1
                  }}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["mobile"]
                      : undefined
                  }
                >
                  <SecurityVerifiedSolidSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__et33)}
                    role={"img"}
                  />
                </Avantages>
                <Avantages
                  avantage={"Projets \u00e0 impacts"}
                  className={classNames("__wab_instance", sty.avantages__l8GtY)}
                  icon={{
                    src: image17WzrgQnjFgwsj,
                    fullWidth: 52,
                    fullHeight: 52,
                    aspectRatio: 1
                  }}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["mobile"]
                      : undefined
                  }
                >
                  <TreeSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__hzeUf)}
                    role={"img"}
                  />
                </Avantages>
              </div>
            </div>
            <div
              data-plasmic-name={"testimonials"}
              data-plasmic-override={overrides.testimonials}
              className={classNames(projectcss.all, sty.testimonials)}
            >
              <div
                data-plasmic-name={"titre4"}
                data-plasmic-override={overrides.titre4}
                className={classNames(projectcss.all, sty.titre4)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__ruiiZ
                  )}
                >
                  {"Ils ont test\u00e9 Netir et ne veulent plus partir."}
                </h2>
              </div>
              <div
                data-plasmic-name={"testimonial"}
                data-plasmic-override={overrides.testimonial}
                className={classNames(projectcss.all, sty.testimonial)}
              >
                <Testimonial
                  className={classNames(
                    "__wab_instance",
                    sty.testimonial__ob6Fl
                  )}
                  img={{
                    src: geminiGeneratedImageJ00L65J00L65J00L1PngBQcKg4PcBayL,
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["unnamedVariant"]
                      : undefined
                  }
                  name={"Julien L."}
                  review={
                    "\"Fini de me faire plumer ! Avec Netir, je garde l'essentiel de mes gains et mon mentor m'aide \u00e0 d\u00e9crocher des missions g\u00e9niales. C'est le coup de boost dont j'avais besoin.\""
                  }
                  starColor={"green"}
                  starCount={5}
                />

                <Testimonial
                  className={classNames(
                    "__wab_instance",
                    sty.testimonial__bg6U6
                  )}
                  img={{
                    src: geminiGeneratedImage8Nmavg8Nmavg8NmaPngFaQbk7IFwq,
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["unnamedVariant"]
                      : undefined
                  }
                  name={"Sarah D."}
                  review={
                    '"Trouver le bon talent sans perdre des semaines, c\'est d\u00e9sormais possible. Les freelances de Netir sont non seulement comp\u00e9tents, mais le suivi mentor assure une fiabilit\u00e9 sans faille. Un gain de temps et de qualit\u00e9 incroyable."'
                  }
                  starCount={5}
                />

                <Testimonial
                  className={classNames(
                    "__wab_instance",
                    sty.testimonial__z0TiI
                  )}
                  img={{
                    src: geminiGeneratedImageDghrcodghrcodghrPngKxSUpNaIbv,
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["unnamedVariant"]
                      : undefined
                  }
                  name={"J\u00e9remy L."}
                  review={
                    '"Mon expertise a un impact r\u00e9el sur Netir. Je guide des jeunes talents vers le succ\u00e8s et je suis r\u00e9mun\u00e9r\u00e9 pour cela. C\'est valorisant et incroyablement enrichissant de voir mes conseils porter leurs fruits."'
                  }
                  starColor={"yellow"}
                  starCount={5}
                />

                <Testimonial
                  className={classNames(
                    "__wab_instance",
                    sty.testimonial__gvGwo
                  )}
                  img={{
                    src: geminiGeneratedImageDo8Lcjdo8Lcjdo8LPngNMbgxDyE5Ve,
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["unnamedVariant"]
                      : undefined
                  }
                  name={"David S."}
                  review={
                    '"Mon r\u00e9seau professionnel est mon actif principal. Netir me permet de le mon\u00e9tiser tr\u00e8s simplement, en recommandant des profils ou des entreprises que je connais. Un revenu passif bienvenu et sans aucune contrainte !"'
                  }
                  starColor={"blue"}
                  starCount={5}
                />
              </div>
            </div>
            <div
              data-plasmic-name={"callToAction2"}
              data-plasmic-override={overrides.callToAction2}
              className={classNames(projectcss.all, sty.callToAction2)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___9NVb)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__aQGwn
                  )}
                >
                  {"Pr\u00eat \u00e0 ne plus faire de la figuration ?"}
                </h2>
                <div className={classNames(projectcss.all, sty.freeBox__aj0Hx)}>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__q8Uxt
                    )}
                    component={Link}
                    href={`/freelances`}
                    platform={"gatsby"}
                  >
                    <Cta
                      boutton={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Acc\u00e9der \u00e0 l'espace freelance"
                          : undefined
                      }
                      className={classNames("__wab_instance", sty.cta__e5HJ)}
                    >
                      <RocketSvgrepoCom1SvgIcon
                        className={classNames(projectcss.all, sty.svg__izI5)}
                        role={"img"}
                      />
                    </Cta>
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__kgviD
                    )}
                    component={Link}
                    href={`/entreprises`}
                    platform={"gatsby"}
                  >
                    <Cta
                      boutton={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Acc\u00e9der \u00e0 l'espace entreprise"
                          : "Acc\u00e9der \u00e0 l'Espace Entreprise"
                      }
                      className={classNames("__wab_instance", sty.cta__iDi9)}
                      ets={["ets"]}
                      nom={"Stop au recrutement au hasard"}
                    >
                      <TrophySvgrepoComSvgIcon
                        className={classNames(projectcss.all, sty.svg__trYul)}
                        role={"img"}
                      />
                    </Cta>
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__iCqyz
                    )}
                    component={Link}
                    href={`/mentor`}
                    platform={"gatsby"}
                  >
                    <Cta
                      boutton={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Acc\u00e9der \u00e0 l'espace mentor"
                          : "Acc\u00e9der \u00e0 l'Espace Mentor"
                      }
                      className={classNames("__wab_instance", sty.cta___9WhQz)}
                      mentor={["mentor"]}
                      nom={"Mon\u00e9tise enfin ton savoir"}
                    >
                      <BulbOnSvgrepoComSvgIcon
                        className={classNames(projectcss.all, sty.svg__iJ4J)}
                        role={"img"}
                      />
                    </Cta>
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___3ZTiK
                    )}
                    component={Link}
                    href={`/apporteur-affaires`}
                    platform={"gatsby"}
                  >
                    <Cta
                      appAff={["appAff"]}
                      boutton={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Acc\u00e9der \u00e0 l'espace apporteur d'affaires"
                          : "Acc\u00e9der \u00e0 l'Espace Apporteur d'Affaires"
                      }
                      className={classNames("__wab_instance", sty.cta__hCeQ5)}
                      nom={"Fais bosser ton r\u00e9seau"}
                    >
                      <WebLinkSvgrepoComSvgIcon
                        className={classNames(projectcss.all, sty.svg__lSjJm)}
                        role={"img"}
                      />
                    </Cta>
                  </PlasmicLink__>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"faq"}
              data-plasmic-override={overrides.faq}
              className={classNames(projectcss.all, sty.faq)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__mjhoG)}>
                <div
                  data-plasmic-name={"titre7"}
                  data-plasmic-override={overrides.titre7}
                  className={classNames(projectcss.all, sty.titre7)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__pYz7M
                    )}
                  >
                    {"Netir en clair : Vos questions, nos r\u00e9ponses."}
                  </h2>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__gngQe)}>
                  <div
                    data-plasmic-name={"questions"}
                    data-plasmic-override={overrides.questions}
                    className={classNames(projectcss.all, sty.questions)}
                  >
                    <Faq
                      answer={
                        "Netir est la plateforme qui connecte les entreprises avec des freelances d'\u00e9lite, coach\u00e9s par des mentors experts. Nous r\u00e9inventons la collaboration en assurant qualit\u00e9, accompagnement et r\u00e9mun\u00e9ration juste pour tous."
                      }
                      className={classNames("__wab_instance", sty.faq__ovnMf)}
                      question={"Qu'est-ce que Netir exactement ? "}
                    />

                    <Faq
                      answer={
                        "Notre mod\u00e8le unique repose sur un trio gagnant : un freelance qualifi\u00e9, une entreprise \u00e0 la recherche d'excellence, et un mentor qui garantit le d\u00e9veloppement et les r\u00e9sultats. Nous nous distinguons aussi par nos commissions ultra-comp\u00e9titives (3% seulement) et notre engagement envers l'impact positif."
                      }
                      className={classNames("__wab_instance", sty.faq__hpXNr)}
                      question={
                        "Qu'est-ce qui rend Netir diff\u00e9rent des autres plateformes ? "
                      }
                    />

                    <Faq
                      answer={
                        "Netir s'adresse aux freelances exigeants, aux entreprises qui cherchent des talents fiables, aux experts souhaitant devenir mentors, et \u00e0 tous ceux qui veulent mon\u00e9tiser leur r\u00e9seau en tant qu'apporteurs d'affaires."
                      }
                      className={classNames("__wab_instance", sty.faq__gd0Xz)}
                      question={"Pour qui est fait Netir ?"}
                    />

                    <Faq
                      answer={
                        "Tous nos freelances et mentors passent par un processus de qualification rigoureux. De plus, chaque freelance est accompagn\u00e9 par un mentor qui l'aide \u00e0 monter en comp\u00e9tence et \u00e0 garantir la r\u00e9ussite des missions."
                      }
                      className={classNames("__wab_instance", sty.faq__tk2FU)}
                      question={
                        "Comment Netir assure-t-il la qualit\u00e9 des profils ?"
                      }
                    />

                    <Faq
                      answer={
                        "Netir applique une commission transparente et parmi les plus faibles du march\u00e9 : seulement 3% sur le montant des missions pour le freelance et 3% pour le mentor, pr\u00e9lev\u00e9s c\u00f4t\u00e9 entreprise. C'est tout."
                      }
                      className={classNames("__wab_instance", sty.faq__upWQ)}
                      question={
                        "Quels sont les co\u00fbts ou commissions sur Netir ?"
                      }
                    />

                    <Faq
                      answer={
                        "C'est simple. Cliquez sur le bouton qui correspond \u00e0 votre profil (Freelance, Entreprise, Mentor ou Apporteur d'Affaires) pour acc\u00e9der \u00e0 votre espace d\u00e9di\u00e9 et en savoir plus sur les \u00e9tapes d'inscription."
                      }
                      className={classNames("__wab_instance", sty.faq__oVlzn)}
                      question={"Comment puis-je commencer avec Netir ?"}
                    />
                  </div>
                  <div
                    data-plasmic-name={"illustration"}
                    data-plasmic-override={overrides.illustration}
                    className={classNames(projectcss.all, sty.illustration)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__wzxSm)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "100%"
                          : hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "454px"
                            : "auto"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "184%"
                          : hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "136%"
                            : "80%"
                      }
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "244px"
                          : hasVariant(globalVariants, "screen", "tabletOnly")
                            ? "635px"
                            : "auto"
                      }
                      loading={"lazy"}
                      src={{
                        src: geminiGeneratedImage8R11Yk8R11Yk8R11RemovebgPreviewPngBZ8T737YaQxk,
                        fullWidth: 427,
                        fullHeight: 585,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              </div>
            </div>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  body: [
    "body",
    "wrapper",
    "hero",
    "siteHeader",
    "buttonButton",
    "interactionEffect",
    "pres",
    "value",
    "titres",
    "h1",
    "h4",
    "buttons2",
    "buttonButton2",
    "interactionEffect2",
    "buttonButton6",
    "interactionEffect6",
    "confiance",
    "titre6",
    "carousel",
    "sliderCarousel4",
    "handipharmLogo",
    "logoBig2",
    "nobullshit2",
    "cosikaLogo2",
    "turquand3",
    "turquand4",
    "smala3",
    "cloudIam2",
    "pharmaConfort2",
    "campingCar2",
    "abcm3",
    "franceNuage2",
    "quatuor",
    "titre",
    "persona",
    "besoin",
    "advantages",
    "titre3",
    "testimonials",
    "titre4",
    "testimonial",
    "callToAction2",
    "faq",
    "titre7",
    "questions",
    "illustration",
    "footer"
  ],
  wrapper: [
    "wrapper",
    "hero",
    "siteHeader",
    "buttonButton",
    "interactionEffect",
    "pres",
    "value",
    "titres",
    "h1",
    "h4",
    "buttons2",
    "buttonButton2",
    "interactionEffect2",
    "buttonButton6",
    "interactionEffect6",
    "confiance",
    "titre6",
    "carousel",
    "sliderCarousel4",
    "handipharmLogo",
    "logoBig2",
    "nobullshit2",
    "cosikaLogo2",
    "turquand3",
    "turquand4",
    "smala3",
    "cloudIam2",
    "pharmaConfort2",
    "campingCar2",
    "abcm3",
    "franceNuage2",
    "quatuor",
    "titre",
    "persona",
    "besoin",
    "advantages",
    "titre3",
    "testimonials",
    "titre4",
    "testimonial",
    "callToAction2",
    "faq",
    "titre7",
    "questions",
    "illustration",
    "footer"
  ],
  hero: [
    "hero",
    "siteHeader",
    "buttonButton",
    "interactionEffect",
    "pres",
    "value",
    "titres",
    "h1",
    "h4",
    "buttons2",
    "buttonButton2",
    "interactionEffect2",
    "buttonButton6",
    "interactionEffect6"
  ],
  siteHeader: ["siteHeader", "buttonButton", "interactionEffect"],
  buttonButton: ["buttonButton", "interactionEffect"],
  interactionEffect: ["interactionEffect"],
  pres: [
    "pres",
    "value",
    "titres",
    "h1",
    "h4",
    "buttons2",
    "buttonButton2",
    "interactionEffect2",
    "buttonButton6",
    "interactionEffect6"
  ],
  value: [
    "value",
    "titres",
    "h1",
    "h4",
    "buttons2",
    "buttonButton2",
    "interactionEffect2",
    "buttonButton6",
    "interactionEffect6"
  ],
  titres: [
    "titres",
    "h1",
    "h4",
    "buttons2",
    "buttonButton2",
    "interactionEffect2",
    "buttonButton6",
    "interactionEffect6"
  ],
  h1: ["h1"],
  h4: ["h4"],
  buttons2: [
    "buttons2",
    "buttonButton2",
    "interactionEffect2",
    "buttonButton6",
    "interactionEffect6"
  ],
  buttonButton2: ["buttonButton2", "interactionEffect2"],
  interactionEffect2: ["interactionEffect2"],
  buttonButton6: ["buttonButton6", "interactionEffect6"],
  interactionEffect6: ["interactionEffect6"],
  confiance: [
    "confiance",
    "titre6",
    "carousel",
    "sliderCarousel4",
    "handipharmLogo",
    "logoBig2",
    "nobullshit2",
    "cosikaLogo2",
    "turquand3",
    "turquand4",
    "smala3",
    "cloudIam2",
    "pharmaConfort2",
    "campingCar2",
    "abcm3",
    "franceNuage2"
  ],
  titre6: ["titre6"],
  carousel: [
    "carousel",
    "sliderCarousel4",
    "handipharmLogo",
    "logoBig2",
    "nobullshit2",
    "cosikaLogo2",
    "turquand3",
    "turquand4",
    "smala3",
    "cloudIam2",
    "pharmaConfort2",
    "campingCar2",
    "abcm3",
    "franceNuage2"
  ],
  sliderCarousel4: [
    "sliderCarousel4",
    "handipharmLogo",
    "logoBig2",
    "nobullshit2",
    "cosikaLogo2",
    "turquand3",
    "turquand4",
    "smala3",
    "cloudIam2",
    "pharmaConfort2",
    "campingCar2",
    "abcm3",
    "franceNuage2"
  ],
  handipharmLogo: ["handipharmLogo"],
  logoBig2: ["logoBig2"],
  nobullshit2: ["nobullshit2"],
  cosikaLogo2: ["cosikaLogo2"],
  turquand3: ["turquand3", "turquand4"],
  turquand4: ["turquand4"],
  smala3: ["smala3"],
  cloudIam2: ["cloudIam2"],
  pharmaConfort2: ["pharmaConfort2"],
  campingCar2: ["campingCar2"],
  abcm3: ["abcm3"],
  franceNuage2: ["franceNuage2"],
  quatuor: ["quatuor", "titre", "persona"],
  titre: ["titre"],
  persona: ["persona"],
  besoin: ["besoin"],
  advantages: ["advantages", "titre3"],
  titre3: ["titre3"],
  testimonials: ["testimonials", "titre4", "testimonial"],
  titre4: ["titre4"],
  testimonial: ["testimonial"],
  callToAction2: ["callToAction2"],
  faq: ["faq", "titre7", "questions", "illustration"],
  titre7: ["titre7"],
  questions: ["questions"],
  illustration: ["illustration"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  body: "div";
  wrapper: "div";
  hero: "div";
  siteHeader: typeof SiteHeader;
  buttonButton: typeof ButtonPrimary;
  interactionEffect: "div";
  pres: "div";
  value: "div";
  titres: "div";
  h1: "h1";
  h4: "h4";
  buttons2: "div";
  buttonButton2: typeof ButtonPrimary;
  interactionEffect2: "div";
  buttonButton6: typeof ButtonPrimary;
  interactionEffect6: "div";
  confiance: "div";
  titre6: "div";
  carousel: "div";
  sliderCarousel4: typeof SliderWrapper;
  handipharmLogo: "div";
  logoBig2: "div";
  nobullshit2: "div";
  cosikaLogo2: "div";
  turquand3: "div";
  turquand4: typeof PlasmicImg__;
  smala3: "div";
  cloudIam2: "div";
  pharmaConfort2: "div";
  campingCar2: "div";
  abcm3: "div";
  franceNuage2: "div";
  quatuor: "div";
  titre: "div";
  persona: "div";
  besoin: "section";
  advantages: "div";
  titre3: "div";
  testimonials: "div";
  titre4: "div";
  testimonial: "div";
  callToAction2: "div";
  faq: "div";
  titre7: "div";
  questions: "div";
  illustration: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "body") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("body"),
  {
    // Helper components rendering sub-elements
    wrapper: makeNodeComponent("wrapper"),
    hero: makeNodeComponent("hero"),
    siteHeader: makeNodeComponent("siteHeader"),
    buttonButton: makeNodeComponent("buttonButton"),
    interactionEffect: makeNodeComponent("interactionEffect"),
    pres: makeNodeComponent("pres"),
    value: makeNodeComponent("value"),
    titres: makeNodeComponent("titres"),
    h1: makeNodeComponent("h1"),
    h4: makeNodeComponent("h4"),
    buttons2: makeNodeComponent("buttons2"),
    buttonButton2: makeNodeComponent("buttonButton2"),
    interactionEffect2: makeNodeComponent("interactionEffect2"),
    buttonButton6: makeNodeComponent("buttonButton6"),
    interactionEffect6: makeNodeComponent("interactionEffect6"),
    confiance: makeNodeComponent("confiance"),
    titre6: makeNodeComponent("titre6"),
    carousel: makeNodeComponent("carousel"),
    sliderCarousel4: makeNodeComponent("sliderCarousel4"),
    handipharmLogo: makeNodeComponent("handipharmLogo"),
    logoBig2: makeNodeComponent("logoBig2"),
    nobullshit2: makeNodeComponent("nobullshit2"),
    cosikaLogo2: makeNodeComponent("cosikaLogo2"),
    turquand3: makeNodeComponent("turquand3"),
    turquand4: makeNodeComponent("turquand4"),
    smala3: makeNodeComponent("smala3"),
    cloudIam2: makeNodeComponent("cloudIam2"),
    pharmaConfort2: makeNodeComponent("pharmaConfort2"),
    campingCar2: makeNodeComponent("campingCar2"),
    abcm3: makeNodeComponent("abcm3"),
    franceNuage2: makeNodeComponent("franceNuage2"),
    quatuor: makeNodeComponent("quatuor"),
    titre: makeNodeComponent("titre"),
    persona: makeNodeComponent("persona"),
    besoin: makeNodeComponent("besoin"),
    advantages: makeNodeComponent("advantages"),
    titre3: makeNodeComponent("titre3"),
    testimonials: makeNodeComponent("testimonials"),
    titre4: makeNodeComponent("titre4"),
    testimonial: makeNodeComponent("testimonial"),
    callToAction2: makeNodeComponent("callToAction2"),
    faq: makeNodeComponent("faq"),
    titre7: makeNodeComponent("titre7"),
    questions: makeNodeComponent("questions"),
    illustration: makeNodeComponent("illustration"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title:
        "Une mission = un Freelance. Et derrière, un Mentor qui assure vos résultats.",
      description:
        "Netir est la plateforme qui vous garantie la qualité des freelance grâce aux recommandations des mentors.",
      ogImageSrc:
        "https://site-assets.plasmic.app/9f3005b94278521a011c47609ecbb96a.png",
      canonical: "https://www.netir.fr"
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
