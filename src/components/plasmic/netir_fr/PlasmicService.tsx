/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: MQ3erQnwY6K8

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicService.module.css"; // plasmic-import: MQ3erQnwY6K8/css

import CheckIcon from "./icons/PlasmicIcon__Check"; // plasmic-import: L4RC0xhJ0uBL/icon
import NIcons2Icon from "./icons/PlasmicIcon__NIcons2"; // plasmic-import: _EC8PI1hBKVF/icon
import freelance3Jpg1IgHLxZagJpq from "./images/freelance3Jpg.jpg"; // plasmic-import: 1igHLxZagJPQ/picture
import freelance2JpgNhZzhkGoaquI from "./images/freelance2Jpg.jpg"; // plasmic-import: nhZZHKGoaquI/picture

createPlasmicElementProxy;

export type PlasmicService__VariantMembers = {
  invers: "unnamedVariant";
};
export type PlasmicService__VariantsArgs = {
  invers?: SingleChoiceArg<"unnamedVariant">;
};
type VariantPropType = keyof PlasmicService__VariantsArgs;
export const PlasmicService__VariantProps = new Array<VariantPropType>(
  "invers"
);

export type PlasmicService__ArgsType = {
  titre?: string;
  aide1?: string;
  aide2?: string;
  aide3?: string;
  image?: React.ComponentProps<typeof PlasmicImg__>["src"];
  bouton?: string;
};
type ArgPropType = keyof PlasmicService__ArgsType;
export const PlasmicService__ArgProps = new Array<ArgPropType>(
  "titre",
  "aide1",
  "aide2",
  "aide3",
  "image",
  "bouton"
);

export type PlasmicService__OverridesType = {
  service1?: Flex__<"div">;
  h3?: Flex__<"h3">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultServiceProps {
  titre?: string;
  aide1?: string;
  aide2?: string;
  aide3?: string;
  image?: React.ComponentProps<typeof PlasmicImg__>["src"];
  bouton?: string;
  invers?: SingleChoiceArg<"unnamedVariant">;
  className?: string;
}

const $$ = {};

function PlasmicService__RenderFunc(props: {
  variants: PlasmicService__VariantsArgs;
  args: PlasmicService__ArgsType;
  overrides: PlasmicService__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          titre: "Fais grandir ton activit\u00e9",
          aide1: "Mise en relation avec des clients s\u00e9rieux",
          aide2:
            "Acc\u00e8s \u00e0 des apporteurs d\u2019affaires motiv\u00e9s",
          aide3: "Opportunit\u00e9s solides et cibl\u00e9es",
          image: {
            src: freelance3Jpg1IgHLxZagJpq,
            fullWidth: 6720,
            fullHeight: 4480,
            aspectRatio: undefined
          },
          bouton: "Apporteurs d'affaires"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "invers",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.invers
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"service1"}
      data-plasmic-override={overrides.service1}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.service1,
        {
          [sty.service1invers_unnamedVariant]: hasVariant(
            $state,
            "invers",
            "unnamedVariant"
          )
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__k4Qzd, {
          [sty.freeBoxinvers_unnamedVariant__k4Qzdfjoo5]: hasVariant(
            $state,
            "invers",
            "unnamedVariant"
          )
        })}
      >
        <h3
          data-plasmic-name={"h3"}
          data-plasmic-override={overrides.h3}
          className={classNames(
            projectcss.all,
            projectcss.h3,
            projectcss.__wab_text,
            sty.h3
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.titre;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Fais grandir ton activit\u00e9 sans perdre de temps";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </h3>
        <div className={classNames(projectcss.all, sty.freeBox__iAsM7)}>
          <CheckIcon
            className={classNames(projectcss.all, sty.svg__hhy08)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__gBvZl
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.aide1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Mise en relation avec des clients s\u00e9rieux";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__z3ALx)}>
          <CheckIcon
            className={classNames(projectcss.all, sty.svg__tup74)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___5Wm2T
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.aide2;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Acc\u00e8s \u00e0 des apporteurs d\u2019affaires motiv\u00e9s";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__pr7Id)}>
          <CheckIcon
            className={classNames(projectcss.all, sty.svg__mhcIj)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__oiaFv
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.aide3;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Opportunit\u00e9s solides et cibl\u00e9es";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__tygNi)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__js2Hl
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.bouton;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Apporteurs d'affaires";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <NIcons2Icon
            className={classNames(projectcss.all, sty.svg__qOc2H)}
            role={"img"}
          />
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox___04RTm, {
          [sty.freeBoxinvers_unnamedVariant___04RTmfjoo5]: hasVariant(
            $state,
            "invers",
            "unnamedVariant"
          )
        })}
      >
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"400px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"600px"}
          loading={"lazy"}
          src={(() => {
            try {
              return $props.image;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {
                  src: freelance2JpgNhZzhkGoaquI,
                  fullWidth: 6720,
                  fullHeight: 4480,
                  aspectRatio: undefined
                };
              }
              throw e;
            }
          })()}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  service1: ["service1", "h3", "img"],
  h3: ["h3"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  service1: "div";
  h3: "h3";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicService__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicService__VariantsArgs;
    args?: PlasmicService__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicService__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicService__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicService__ArgProps,
          internalVariantPropNames: PlasmicService__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicService__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "service1") {
    func.displayName = "PlasmicService";
  } else {
    func.displayName = `PlasmicService.${nodeName}`;
  }
  return func;
}

export const PlasmicService = Object.assign(
  // Top-level PlasmicService renders the root element
  makeNodeComponent("service1"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicService
    internalVariantProps: PlasmicService__VariantProps,
    internalArgProps: PlasmicService__ArgProps
  }
);

export default PlasmicService;
/* prettier-ignore-end */
