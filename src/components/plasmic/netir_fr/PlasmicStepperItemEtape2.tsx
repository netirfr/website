/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: pm4cK0JRWHQM

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import StepperComponentFormContainer from "../../StepperComponentFormContainer"; // plasmic-import: TFft5XGJ-fUJ/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicStepperItemEtape2.module.css"; // plasmic-import: pm4cK0JRWHQM/css

import CheckIcon from "./icons/PlasmicIcon__Check"; // plasmic-import: L4RC0xhJ0uBL/icon
import BarSvgrepoComSvgIcon from "./icons/PlasmicIcon__BarSvgrepoComSvg"; // plasmic-import: L_A-j4tKSVFr/icon
import Bag4SvgrepoComSvgIcon from "./icons/PlasmicIcon__Bag4SvgrepoComSvg"; // plasmic-import: xeojuuOAnBdF/icon
import DollarCircleSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__DollarCircleSvgrepoCom1Svg"; // plasmic-import: _B8xOJaCg617/icon
import UserSvgrepoCom4SvgIcon from "./icons/PlasmicIcon__UserSvgrepoCom4Svg"; // plasmic-import: QydiZu8DMym3/icon
import nLogo4X7VwM2YjHhq from "./images/nLogo.svg"; // plasmic-import: 4X7vwM2yjHHQ/picture

createPlasmicElementProxy;

export type PlasmicStepperItemEtape2__VariantMembers = {};
export type PlasmicStepperItemEtape2__VariantsArgs = {};
type VariantPropType = keyof PlasmicStepperItemEtape2__VariantsArgs;
export const PlasmicStepperItemEtape2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicStepperItemEtape2__ArgsType = {};
type ArgPropType = keyof PlasmicStepperItemEtape2__ArgsType;
export const PlasmicStepperItemEtape2__ArgProps = new Array<ArgPropType>();

export type PlasmicStepperItemEtape2__OverridesType = {
  root?: Flex__<typeof StepperComponentFormContainer>;
  iconStep?: Flex__<"div">;
  informations?: Flex__<"div">;
  iconStep2?: Flex__<"div">;
  informations2?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  nomPublicDeVotreEntreprise?: Flex__<typeof AntdInput>;
  input3?: Flex__<typeof AntdInput>;
  button?: Flex__<typeof AntdButton>;
};

export interface DefaultStepperItemEtape2Props {
  className?: string;
}

const $$ = {};

function PlasmicStepperItemEtape2__RenderFunc(props: {
  variants: PlasmicStepperItemEtape2__VariantsArgs;
  args: PlasmicStepperItemEtape2__ArgsType;
  overrides: PlasmicStepperItemEtape2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "nomPublicDeVotreEntreprise.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <StepperComponentFormContainer
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      children2={
        <div className={classNames(projectcss.all, sty.columns___9GIdU)}>
          <div className={classNames(projectcss.all, sty.column__topl9)}>
            <div
              data-plasmic-name={"iconStep2"}
              data-plasmic-override={overrides.iconStep2}
              className={classNames(projectcss.all, sty.iconStep2)}
            >
              <Bag4SvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__t4HsW)}
                role={"img"}
              />
            </div>
            <BarSvgrepoComSvgIcon
              className={classNames(projectcss.all, sty.svg__nYvjd)}
              role={"img"}
            />
          </div>
          <div className={classNames(projectcss.all, sty.column__gobsR)}>
            <div
              data-plasmic-name={"informations2"}
              data-plasmic-override={overrides.informations2}
              className={classNames(projectcss.all, sty.informations2)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__uGu8P)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kmYf1
                  )}
                >
                  {"\u00c9tape 2"}
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uISy
                )}
              >
                {"Votre entreprise"}
              </div>
            </div>
          </div>
        </div>
      }
      className={classNames("__wab_instance", sty.root)}
      form2={(() => {
        const child$Props = {
          className: classNames("__wab_instance", sty.form),
          extendedOnValuesChange: async (...eventArgs: any) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              "value",
              ["form", "value"],
              FormWrapper_Helpers
            ).apply(null, eventArgs);
          },
          formItems: [
            { label: "Name", name: "name", inputType: "Text" },
            { label: "Message", name: "message", inputType: "Text Area" }
          ],
          labelCol: { span: 8, horizontalOnly: true },
          layout: "vertical",
          mode: "advanced",
          onIsSubmittingChange: async (...eventArgs: any) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              "isSubmitting",
              ["form", "isSubmitting"],
              FormWrapper_Helpers
            ).apply(null, eventArgs);
          },
          ref: ref => {
            $refs["form"] = ref;
          },
          requiredMark: true,
          submitSlot: null,
          validateTrigger: [],
          wrapperCol: (() => {
            const __composite = {
              span: null,
              horizontalOnly: null,
              offset: null
            };
            __composite["span"] = 24;
            __composite["horizontalOnly"] = true;
            __composite["offset"] = 23;
            return __composite;
          })()
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "value",
              plasmicStateName: "form.value"
            },
            {
              name: "isSubmitting",
              plasmicStateName: "form.isSubmitting"
            }
          ],
          [],
          FormWrapper_Helpers ?? {},
          child$Props
        );

        return (
          <FormWrapper
            data-plasmic-name={"form"}
            data-plasmic-override={overrides.form}
            {...child$Props}
          >
            <div className={classNames(projectcss.all, sty.freeBox__s1DHq)}>
              <FormItemWrapper
                className={classNames("__wab_instance", sty.formField___38UnE)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nnv7
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#010000" }}
                      >
                        {"Nom public de votre entreprise"}
                      </span>
                    </React.Fragment>
                  </div>
                }
                name={"nom"}
                valuePropName={"nom"}
              >
                {(() => {
                  const child$Props = {
                    autoFocus: true,
                    className: classNames(
                      "__wab_instance",
                      sty.nomPublicDeVotreEntreprise
                    ),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["nomPublicDeVotreEntreprise", "value"],
                        AntdInput_Helpers
                      ).apply(null, eventArgs);
                    },
                    placeholder: "Nom de votre entreprise",
                    size: "large",
                    value: generateStateValueProp($state, [
                      "nomPublicDeVotreEntreprise",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "nomPublicDeVotreEntreprise.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"nomPublicDeVotreEntreprise"}
                      data-plasmic-override={
                        overrides.nomPublicDeVotreEntreprise
                      }
                      {...child$Props}
                    />
                  );
                })()}
              </FormItemWrapper>
            </div>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__c7R6)}
              hidden={false}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fnVj
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700, color: "#000000" }}
                    >
                      {"Localisation"}
                    </span>
                  </React.Fragment>
                </div>
              }
              name={"Localisation"}
              noLabel={false}
              rules={[]}
              valuePropName={"Localisation"}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input3),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["input3", "value"],
                      AntdInput_Helpers
                    ).apply(null, eventArgs);
                  },
                  placeholder: "L'adresse de votre code postale",
                  size: "large",
                  value: generateStateValueProp($state, ["input3", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input3.value"
                    }
                  ],
                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdInput
                    data-plasmic-name={"input3"}
                    data-plasmic-override={overrides.input3}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
            <AntdButton
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              danger={true}
              disabled={false}
              ghost={false}
              shape={"default"}
              size={"large"}
              submitsForm={true}
              type={"primary"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fLoYk
                )}
              >
                {"Valider"}
              </div>
            </AntdButton>
          </FormWrapper>
        );
      })()}
      slot={
        <div className={classNames(projectcss.all, sty.freeBox__waJt)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ekqa4
            )}
          >
            {"Pr\u00e9sentez votre entreprise\r"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vWcq
            )}
          >
            {"Enter some text"}
          </div>
        </div>
      }
      slot2={
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__rAx
          )}
        >
          <React.Fragment>
            <React.Fragment>
              {"Vous n\u2019\u00eates plus qu\u2019\u00e0 "}
            </React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ fontWeight: 700, color: "#F43F5E" }}
            >
              {"3 \u00e9tapes"}
            </span>
            <React.Fragment>
              {" de trouver LE freelance id\u00e9al pour votre projet !\r\n\r"}
            </React.Fragment>
          </React.Fragment>
        </div>
      }
    >
      <div className={classNames(projectcss.all, sty.columns__flgI)}>
        <div className={classNames(projectcss.all, sty.column__kWaKb)}>
          <div
            data-plasmic-name={"iconStep"}
            data-plasmic-override={overrides.iconStep}
            className={classNames(projectcss.all, sty.iconStep)}
          >
            <CheckIcon
              className={classNames(projectcss.all, sty.svg__rnF7H)}
              role={"img"}
            />
          </div>
          <BarSvgrepoComSvgIcon
            className={classNames(projectcss.all, sty.svg__pCcSy)}
            role={"img"}
          />
        </div>
        <div className={classNames(projectcss.all, sty.column__oCxVd)}>
          <div
            data-plasmic-name={"informations"}
            data-plasmic-override={overrides.informations}
            className={classNames(projectcss.all, sty.informations)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__veGmL)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__naXSo
                )}
              >
                {"\u00c9tape 1"}
              </div>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kwaTa
              )}
            >
              {"Inscription"}
            </div>
          </div>
        </div>
      </div>
    </StepperComponentFormContainer>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "iconStep",
    "informations",
    "iconStep2",
    "informations2",
    "form",
    "nomPublicDeVotreEntreprise",
    "input3",
    "button"
  ],
  iconStep: ["iconStep"],
  informations: ["informations"],
  iconStep2: ["iconStep2"],
  informations2: ["informations2"],
  form: ["form", "nomPublicDeVotreEntreprise", "input3", "button"],
  nomPublicDeVotreEntreprise: ["nomPublicDeVotreEntreprise"],
  input3: ["input3"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof StepperComponentFormContainer;
  iconStep: "div";
  informations: "div";
  iconStep2: "div";
  informations2: "div";
  form: typeof FormWrapper;
  nomPublicDeVotreEntreprise: typeof AntdInput;
  input3: typeof AntdInput;
  button: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStepperItemEtape2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStepperItemEtape2__VariantsArgs;
    args?: PlasmicStepperItemEtape2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicStepperItemEtape2__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicStepperItemEtape2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStepperItemEtape2__ArgProps,
          internalVariantPropNames: PlasmicStepperItemEtape2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStepperItemEtape2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStepperItemEtape2";
  } else {
    func.displayName = `PlasmicStepperItemEtape2.${nodeName}`;
  }
  return func;
}

export const PlasmicStepperItemEtape2 = Object.assign(
  // Top-level PlasmicStepperItemEtape2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iconStep: makeNodeComponent("iconStep"),
    informations: makeNodeComponent("informations"),
    iconStep2: makeNodeComponent("iconStep2"),
    informations2: makeNodeComponent("informations2"),
    form: makeNodeComponent("form"),
    nomPublicDeVotreEntreprise: makeNodeComponent("nomPublicDeVotreEntreprise"),
    input3: makeNodeComponent("input3"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicStepperItemEtape2
    internalVariantProps: PlasmicStepperItemEtape2__VariantProps,
    internalArgProps: PlasmicStepperItemEtape2__ArgProps
  }
);

export default PlasmicStepperItemEtape2;
/* prettier-ignore-end */
