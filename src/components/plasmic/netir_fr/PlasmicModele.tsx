/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: j1M4n_CV-Nck

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicModele.module.css"; // plasmic-import: j1M4n_CV-Nck/css

import freelance55PngTxxtE1HolTJ from "./images/freelance55Png.png"; // plasmic-import: TxxtE1Hol_tJ/picture

createPlasmicElementProxy;

export type PlasmicModele__VariantMembers = {};
export type PlasmicModele__VariantsArgs = {};
type VariantPropType = keyof PlasmicModele__VariantsArgs;
export const PlasmicModele__VariantProps = new Array<VariantPropType>();

export type PlasmicModele__ArgsType = {
  entite?: string;
  role?: string;
  _?: string;
  montant?: string;
  image?: React.ComponentProps<typeof PlasmicImg__>["src"];
};
type ArgPropType = keyof PlasmicModele__ArgsType;
export const PlasmicModele__ArgProps = new Array<ArgPropType>(
  "entite",
  "role",
  "_",
  "montant",
  "image"
);

export type PlasmicModele__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  freeBox?: Flex__<"div">;
};

export interface DefaultModeleProps {
  entite?: string;
  role?: string;
  _?: string;
  montant?: string;
  image?: React.ComponentProps<typeof PlasmicImg__>["src"];
  className?: string;
}

const $$ = {};

function PlasmicModele__RenderFunc(props: {
  variants: PlasmicModele__VariantsArgs;
  args: PlasmicModele__ArgsType;
  overrides: PlasmicModele__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          entite: "Freelance",
          role: "Part nette pour l'ex\u00e9cution de la mission",
          _: "92%",
          montant: "920\u20ac",
          image: {
            src: freelance55PngTxxtE1HolTJ,
            fullWidth: 1210,
            fullHeight: 1362,
            aspectRatio: undefined
          }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <PlasmicImg__
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"200px"}
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"100%"}
        loading={"lazy"}
        src={(() => {
          try {
            return $props.image.src;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return {
                src: freelance55PngTxxtE1HolTJ,
                fullWidth: 1210,
                fullHeight: 1362,
                aspectRatio: undefined
              };
            }
            throw e;
          }
        })()}
      />

      <h5
        className={classNames(
          projectcss.all,
          projectcss.h5,
          projectcss.__wab_text,
          sty.h5__yFGrf
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.entite;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "Le Freelance";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </h5>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__mc9KC
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.role;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "Part nette pour l'ex\u00e9cution de la mission";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <h5
        className={classNames(
          projectcss.all,
          projectcss.h5,
          projectcss.__wab_text,
          sty.h5__kL69
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props._;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "92%";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </h5>
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__iJu7M
          )}
        >
          {"soit"}
        </div>
        <h5
          className={classNames(
            projectcss.all,
            projectcss.h5,
            projectcss.__wab_text,
            sty.h5__fgyFz
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.montant;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "920 \u20ac";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </h5>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "freeBox"],
  img: ["img"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicModele__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicModele__VariantsArgs;
    args?: PlasmicModele__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicModele__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicModele__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicModele__ArgProps,
          internalVariantPropNames: PlasmicModele__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicModele__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicModele";
  } else {
    func.displayName = `PlasmicModele.${nodeName}`;
  }
  return func;
}

export const PlasmicModele = Object.assign(
  // Top-level PlasmicModele renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicModele
    internalVariantProps: PlasmicModele__VariantProps,
    internalArgProps: PlasmicModele__ArgProps
  }
);

export default PlasmicModele;
/* prettier-ignore-end */
