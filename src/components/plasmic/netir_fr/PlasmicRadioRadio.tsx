/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: -UNIrpYLu1Q3

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { BaseRadio } from "@plasmicpkgs/react-aria/skinny/registerRadio";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicRadioRadio.module.css"; // plasmic-import: -UNIrpYLu1Q3/css

createPlasmicElementProxy;

export type PlasmicRadioRadio__VariantMembers = {};
export type PlasmicRadioRadio__VariantsArgs = {};
type VariantPropType = keyof PlasmicRadioRadio__VariantsArgs;
export const PlasmicRadioRadio__VariantProps = new Array<VariantPropType>();

export type PlasmicRadioRadio__ArgsType = {
  value?: string;
  label?: React.ReactNode;
  autoFocus?: boolean;
  disabled?: boolean;
  ariaLabel?: string;
};
type ArgPropType = keyof PlasmicRadioRadio__ArgsType;
export const PlasmicRadioRadio__ArgProps = new Array<ArgPropType>(
  "value",
  "label",
  "autoFocus",
  "disabled",
  "ariaLabel"
);

export type PlasmicRadioRadio__OverridesType = {
  ariaRadio?: Flex__<typeof BaseRadio>;
};

export interface DefaultRadioRadioProps {
  value?: string;
  label?: React.ReactNode;
  autoFocus?: boolean;
  disabled?: boolean;
  ariaLabel?: string;
  className?: string;
}

const $$ = {};

function PlasmicRadioRadio__RenderFunc(props: {
  variants: PlasmicRadioRadio__VariantsArgs;
  args: PlasmicRadioRadio__ArgsType;
  overrides: PlasmicRadioRadio__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  const [$ccVariants, setDollarCcVariants] = React.useState<
    Record<string, boolean>
  >({
    selected: false,
    hovered: false,
    pressed: false,
    focused: false,
    focusVisible: false,
    disabled: false,
    readonly: false
  });
  const updateVariant = React.useCallback(
    (changes: Record<string, boolean>) => {
      setDollarCcVariants(prev => {
        if (!Object.keys(changes).some(k => prev[k] !== changes[k])) {
          return prev;
        }
        return { ...prev, ...changes };
      });
    },
    []
  );

  return (
    <BaseRadio
      data-plasmic-name={"ariaRadio"}
      data-plasmic-override={overrides.ariaRadio}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      aria-label={args.ariaLabel}
      autoFocus={args.autoFocus}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.ariaRadio
      )}
      isDisabled={args.disabled}
      plasmicUpdateVariant={updateVariant}
      value={args.value}
    >
      <div className={classNames(projectcss.all, sty.freeBox__dyDbH)}>
        <div className={classNames(projectcss.all, sty.freeBox__ox3En)} />
      </div>
      {renderPlasmicSlot({
        defaultContents: "Option",
        value: args.label
      })}
    </BaseRadio>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  ariaRadio: ["ariaRadio"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  ariaRadio: typeof BaseRadio;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRadioRadio__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRadioRadio__VariantsArgs;
    args?: PlasmicRadioRadio__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicRadioRadio__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicRadioRadio__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRadioRadio__ArgProps,
          internalVariantPropNames: PlasmicRadioRadio__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRadioRadio__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "ariaRadio") {
    func.displayName = "PlasmicRadioRadio";
  } else {
    func.displayName = `PlasmicRadioRadio.${nodeName}`;
  }
  return func;
}

export const PlasmicRadioRadio = Object.assign(
  // Top-level PlasmicRadioRadio renders the root element
  makeNodeComponent("ariaRadio"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicRadioRadio
    internalVariantProps: PlasmicRadioRadio__VariantProps,
    internalArgProps: PlasmicRadioRadio__ArgProps
  }
);

export default PlasmicRadioRadio;
/* prettier-ignore-end */
