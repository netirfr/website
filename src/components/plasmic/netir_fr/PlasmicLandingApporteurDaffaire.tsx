/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: oJVGrb-jp5QU

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SiteHeader from "../../SiteHeader"; // plasmic-import: Vg4NgSIGKm96/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: byb1-I0x_v8X/component
import Probleme from "../../Probleme"; // plasmic-import: UVDtGkgycWzF/component
import Parcours from "../../Parcours"; // plasmic-import: 4kw4zRyWcW3Y/component
import FreelanceCartesFreelance from "../../FreelanceCartesFreelance"; // plasmic-import: IrYgS-V1Gdk4/component
import Testimonial from "../../Testimonial"; // plasmic-import: dCyluW4eRMLq/component
import Faq from "../../Faq"; // plasmic-import: wBbJjw0EbsaX/component
import ButtonOldHoverNetir from "../../ButtonOldHoverNetir"; // plasmic-import: oz0RlE6uDG5S/component
import Footer from "../../Footer"; // plasmic-import: lPSQkcOmsQQw/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicLandingApporteurDaffaire.module.css"; // plasmic-import: oJVGrb-jp5QU/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: 99U4uMxg1jkf/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: FEzuhm3U7mDW/icon
import PiggyBankSaveSvgrepoComSvgIcon from "./icons/PlasmicIcon__PiggyBankSaveSvgrepoComSvg"; // plasmic-import: f7RZb-9Lyqyq/icon
import BuildSvgrepoComSvgIcon from "./icons/PlasmicIcon__BuildSvgrepoComSvg"; // plasmic-import: ICINrcYsx2ye/icon
import ShareSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__ShareSvgrepoCom1Svg"; // plasmic-import: dv_PMYQhsYzL/icon
import BirdSvgrepoComSvgIcon from "./icons/PlasmicIcon__BirdSvgrepoComSvg"; // plasmic-import: ptdwA2CYCFeS/icon
import NIcons3Icon from "./icons/PlasmicIcon__NIcons3"; // plasmic-import: ZzsUrvDAoxUM/icon
import apporteuraffaire7PngLMz3OuknO9 from "./images/apporteuraffaire7Png.png"; // plasmic-import: -lMZ_3OuknO9/picture
import headhunting17929492PngUTyjj2WD5Bmm from "./images/headhunting17929492Png.png"; // plasmic-import: uTYJJ2wD5Bmm/picture
import performance18218222PngZFTcrpQc3X from "./images/performance18218222Png.png"; // plasmic-import: z-fTcrpQC3-x/picture
import paper18856909PngG0081EOcWk4P from "./images/paper18856909Png.png"; // plasmic-import: g0081eOcWk4P/picture
import roi15101196PngSvQvFvAzOr from "./images/roi15101196Png.png"; // plasmic-import: SVQvFvAZ-OR-/picture
import geminiGeneratedImageRobmisrobmisrobmPngP1FKvt7G1Qiz from "./images/geminiGeneratedImageRobmisrobmisrobmPng.png"; // plasmic-import: P1fKVT7G1Qiz/picture
import geminiGeneratedImageR5Pi6Mr5Pi6Mr5PiPng6Ni0OmcKfOKo from "./images/geminiGeneratedImageR5Pi6Mr5Pi6Mr5PiPng.png"; // plasmic-import: 6ni0OmcKfOKo/picture
import geminiGeneratedImageDo8Lcjdo8Lcjdo8LPngNMbgxDyE5Ve from "./images/geminiGeneratedImageDo8Lcjdo8Lcjdo8LPng.png"; // plasmic-import: n-MbgxDyE5VE/picture
import apporteurRemovebgPreviewPng0TExCjQaEzu0 from "./images/apporteurRemovebgPreviewPng.png"; // plasmic-import: 0tExCjQaEZU0/picture
import geminiGeneratedImage8R11Yk8R11Yk8R11RemovebgPreviewPngBZ8T737YaQxk from "./images/geminiGeneratedImage8R11Yk8R11Yk8R11RemovebgPreviewPng.png"; // plasmic-import: bZ8t737YaQXK/picture
import rectangle3463476SmbueWp0Q4WB from "./images/rectangle3463476.png"; // plasmic-import: SmbueWP0Q4wB/picture
import image41MvZbyZuDk41 from "./images/image41.svg"; // plasmic-import: MvZBY-ZuDK41/picture
import logoTextBlackColorBgWhite1500PngBSyZCbzPXsht from "./images/logoTextBlackColorBgWhite1500Png.png"; // plasmic-import: BSyZCbzPXsht/picture

createPlasmicElementProxy;

export type PlasmicLandingApporteurDaffaire__VariantMembers = {};
export type PlasmicLandingApporteurDaffaire__VariantsArgs = {};
type VariantPropType = keyof PlasmicLandingApporteurDaffaire__VariantsArgs;
export const PlasmicLandingApporteurDaffaire__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLandingApporteurDaffaire__ArgsType = {};
type ArgPropType = keyof PlasmicLandingApporteurDaffaire__ArgsType;
export const PlasmicLandingApporteurDaffaire__ArgProps =
  new Array<ArgPropType>();

export type PlasmicLandingApporteurDaffaire__OverridesType = {
  body?: Flex__<"div">;
  wrapper?: Flex__<"div">;
  hero?: Flex__<"div">;
  siteHeader3?: Flex__<typeof SiteHeader>;
  buttonButton5?: Flex__<typeof ButtonPrimary>;
  interactionEffect6?: Flex__<"div">;
  value2?: Flex__<"div">;
  titre3?: Flex__<"div">;
  h1?: Flex__<"h1">;
  h4?: Flex__<"h4">;
  boutons2?: Flex__<"div">;
  primary3?: Flex__<typeof ButtonPrimary>;
  primary4?: Flex__<typeof ButtonPrimary>;
  solutions?: Flex__<"section">;
  parcours?: Flex__<"section">;
  service?: Flex__<"section">;
  titre2?: Flex__<"div">;
  testimonials?: Flex__<"div">;
  titre4?: Flex__<"div">;
  testimonial?: Flex__<"div">;
  callToAction2?: Flex__<"div">;
  primary5?: Flex__<typeof ButtonPrimary>;
  primary7?: Flex__<typeof ButtonPrimary>;
  faq2?: Flex__<"section">;
  heroCta?: Flex__<"section">;
  buttonOldHoverNetir?: Flex__<typeof ButtonOldHoverNetir>;
  faq?: Flex__<"div">;
  titre7?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultLandingApporteurDaffaireProps {
  className?: string;
}

const $$ = {};

export function Head() {
  return (
    <>
      <meta name="twitter:card" content="summary_large_image" />
      <title key="title">
        {PlasmicLandingApporteurDaffaire.pageMetadata.title}
      </title>
      <meta
        key="og:title"
        property="og:title"
        content={PlasmicLandingApporteurDaffaire.pageMetadata.title}
      />
      <meta
        key="twitter:title"
        name="twitter:title"
        content={PlasmicLandingApporteurDaffaire.pageMetadata.title}
      />
      <meta
        key="description"
        name="description"
        content={PlasmicLandingApporteurDaffaire.pageMetadata.description}
      />
      <meta
        key="og:description"
        property="og:description"
        content={PlasmicLandingApporteurDaffaire.pageMetadata.description}
      />
      <meta
        key="twitter:description"
        name="twitter:description"
        content={PlasmicLandingApporteurDaffaire.pageMetadata.description}
      />
      <meta
        key="og:image"
        property="og:image"
        content={PlasmicLandingApporteurDaffaire.pageMetadata.ogImageSrc}
      />
      <meta
        key="twitter:image"
        name="twitter:image"
        content={PlasmicLandingApporteurDaffaire.pageMetadata.ogImageSrc}
      />
      <link
        rel="canonical"
        href={PlasmicLandingApporteurDaffaire.pageMetadata.canonical}
      />
    </>
  );
}

function PlasmicLandingApporteurDaffaire__RenderFunc(props: {
  variants: PlasmicLandingApporteurDaffaire__VariantsArgs;
  args: PlasmicLandingApporteurDaffaire__ArgsType;
  overrides: PlasmicLandingApporteurDaffaire__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "siteHeader3.isNavopen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonButton5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonButton5.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "primary3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "primary3.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "primary4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "primary4.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "soft"
      },
      {
        path: "primary5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "primary5.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "soft"
      },
      {
        path: "primary7.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "primary7.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "soft"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"body"}
          data-plasmic-override={overrides.body}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.body
          )}
        >
          <div
            data-plasmic-name={"wrapper"}
            data-plasmic-override={overrides.wrapper}
            className={classNames(projectcss.all, sty.wrapper)}
          >
            <div
              data-plasmic-name={"hero"}
              data-plasmic-override={overrides.hero}
              className={classNames(projectcss.all, sty.hero)}
            >
              <SiteHeader
                data-plasmic-name={"siteHeader3"}
                data-plasmic-override={overrides.siteHeader3}
                className={classNames("__wab_instance", sty.siteHeader3)}
                isNavopen={generateStateValueProp($state, [
                  "siteHeader3",
                  "isNavopen"
                ])}
                onIsNavopenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "siteHeader3",
                    "isNavopen"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <ButtonPrimary
                  data-plasmic-name={"buttonButton5"}
                  data-plasmic-override={overrides.buttonButton5}
                  className={classNames("__wab_instance", sty.buttonButton5)}
                  color={generateStateValueProp($state, [
                    "buttonButton5",
                    "color"
                  ])}
                  disabled={false}
                  interactionEffect2={
                    <div
                      data-plasmic-name={"interactionEffect6"}
                      data-plasmic-override={overrides.interactionEffect6}
                      className={classNames(
                        projectcss.all,
                        sty.interactionEffect6
                      )}
                    />
                  }
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__meXog
                      )}
                    >
                      {"Inscription"}
                    </div>
                  }
                  onColorChange2={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "buttonButton5",
                      "color"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onTypeChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "buttonButton5",
                      "type"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  type={generateStateValueProp($state, [
                    "buttonButton5",
                    "type"
                  ])}
                />
              </SiteHeader>
              <div className={classNames(projectcss.all, sty.freeBox___2AhTs)}>
                <div
                  data-plasmic-name={"value2"}
                  data-plasmic-override={overrides.value2}
                  className={classNames(projectcss.all, sty.value2)}
                >
                  <div
                    data-plasmic-name={"titre3"}
                    data-plasmic-override={overrides.titre3}
                    className={classNames(projectcss.all, sty.titre3)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "var(--token-a7EGbo9QyMt7)" }}
                        >
                          {
                            "Apporteurs d'affaires : votre r\u00e9seau a de l'or. Mon\u00e9tisez-le simplement avec Netir."
                          }
                        </span>
                      </React.Fragment>
                    </h1>
                    <h4
                      data-plasmic-name={"h4"}
                      data-plasmic-override={overrides.h4}
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "Faites confiance \u00e0 nos mentors, ils sauront vous proposer nos meilleurs freelances."
                        : "Recommandez des freelances d'\u00e9lite ou des entreprises en qu\u00eate de talent. Touchez une commission sur chaque mise en relation r\u00e9ussie, sans effort ni gestion."}
                    </h4>
                    <div
                      data-plasmic-name={"boutons2"}
                      data-plasmic-override={overrides.boutons2}
                      className={classNames(projectcss.all, sty.boutons2)}
                    >
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__iNeE2
                        )}
                        component={Link}
                        href={"netir.fr/sign-up"}
                        platform={"gatsby"}
                      >
                        <ButtonPrimary
                          data-plasmic-name={"primary3"}
                          data-plasmic-override={overrides.primary3}
                          className={classNames("__wab_instance", sty.primary3)}
                          color={generateStateValueProp($state, [
                            "primary3",
                            "color"
                          ])}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__a50Yc
                              )}
                            >
                              {"Devenez apporteur d'affaires !"}
                            </div>
                          }
                          onColorChange2={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "primary3",
                              "color"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onTypeChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "primary3",
                              "type"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          type={generateStateValueProp($state, [
                            "primary3",
                            "type"
                          ])}
                        />
                      </PlasmicLink__>
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__wc9Hg
                        )}
                        component={Link}
                        href={"#solutions"}
                        platform={"gatsby"}
                      >
                        <ButtonPrimary
                          data-plasmic-name={"primary4"}
                          data-plasmic-override={overrides.primary4}
                          className={classNames("__wab_instance", sty.primary4)}
                          color={generateStateValueProp($state, [
                            "primary4",
                            "color"
                          ])}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8OLqJ
                              )}
                            >
                              {"Comprendre le mod\u00e8le de commission"}
                            </div>
                          }
                          linkTo={"#solutions"}
                          onColorChange2={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "primary4",
                              "color"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onTypeChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "primary4",
                              "type"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          type={generateStateValueProp($state, [
                            "primary4",
                            "type"
                          ])}
                        />
                      </PlasmicLink__>
                    </div>
                  </div>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__npO6G)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "auto"
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "450px"
                          : "600px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "40%"
                          : "37%"
                    }
                    loading={"lazy"}
                    src={{
                      src: apporteuraffaire7PngLMz3OuknO9,
                      fullWidth: 930,
                      fullHeight: 1052,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </div>
            <section
              data-plasmic-name={"solutions"}
              data-plasmic-override={overrides.solutions}
              className={classNames(projectcss.all, sty.solutions)}
              id={"solutions"}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__o5SXn
                )}
              >
                {"Votre r\u00e9seau, votre source de revenus passive."}
              </h2>
              <div className={classNames(projectcss.all, sty.freeBox__n4Yqe)}>
                <Probleme
                  citation={``}
                  className={classNames("__wab_instance", sty.probleme__pTbNv)}
                  description={
                    "Touche un pourcentage de la valeur de chaque mission g\u00e9n\u00e9r\u00e9e gr\u00e2ce \u00e0 tes recommandations. Un revenu compl\u00e9mentaire sans surprise."
                  }
                  titre={"Commissions Transparentes et G\u00e9n\u00e9reuses"}
                >
                  <PiggyBankSaveSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__xMhcf)}
                    role={"img"}
                  />
                </Probleme>
                <Probleme
                  citation={``}
                  className={classNames("__wab_instance", sty.probleme__zniFw)}
                  description={
                    "Pas de paperasse, pas de gestion de projet. Il suffit de recommander. On s'occupe du reste."
                  }
                  titre={"Simplicit\u00e9 In\u00e9gal\u00e9e"}
                >
                  <BuildSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__sdK4D)}
                    role={"img"}
                  />
                </Probleme>
                <Probleme
                  citation={``}
                  className={classNames("__wab_instance", sty.probleme__xSbRa)}
                  description={
                    "Recommandez des talents et des clients de confiance. Vous facilitez des collaborations de qualit\u00e9 et renforcez votre cr\u00e9dibilit\u00e9."
                  }
                  titre={"Valorisez Votre R\u00e9seau"}
                >
                  <ShareSvgrepoCom1SvgIcon
                    className={classNames(projectcss.all, sty.svg__l2Rf9)}
                    role={"img"}
                  />
                </Probleme>
                <Probleme
                  citation={``}
                  className={classNames("__wab_instance", sty.probleme___1Jms4)}
                  description={
                    "Pas d'engagement, pas d'objectifs de vente. Tu es libre de recommander quand et qui tu veux."
                  }
                  titre={"Z\u00e9ro Risque, Z\u00e9ro Contrainte"}
                >
                  <BirdSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__r7WT)}
                    role={"img"}
                  />
                </Probleme>
              </div>
            </section>
            <section
              data-plasmic-name={"parcours"}
              data-plasmic-override={overrides.parcours}
              className={classNames(projectcss.all, sty.parcours)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__pYhYi)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__wFgH
                  )}
                >
                  {"Trois \u00e9tapes pour transformer vos contacts en euros."}
                </h2>
                <div className={classNames(projectcss.all, sty.freeBox__bzBp0)}>
                  <Parcours
                    className={classNames(
                      "__wab_instance",
                      sty.parcours__vFmRj
                    )}
                    description={
                      "Cr\u00e9ez votre compte apporteur d'affaires en quelques clics. C'est simple, rapide et sans engagement."
                    }
                    titre={"Inscrivez-vous rapidement"}
                  />

                  <Parcours
                    className={classNames(
                      "__wab_instance",
                      sty.parcours__oY3X9
                    )}
                    description={
                      "Utilise notre outil intuitif pour nous faire parvenir le contact. Explique-nous en quoi cette personne ou cette entreprise serait un bon fit pour Netir."
                    }
                    etape={"2"}
                    titre={"Recommandez un freelance ou une entreprise"}
                  />

                  <Parcours
                    className={classNames(
                      "__wab_instance",
                      sty.parcours__cbMCp
                    )}
                    description={
                      "D\u00e8s qu'une mission est valid\u00e9e et factur\u00e9e gr\u00e2ce \u00e0 votre contact, vous recevez automatiquement votre commission. Simple, non ?"
                    }
                    etape={"3"}
                    titre={"Touchez vos commissions"}
                  />
                </div>
              </div>
            </section>
            <section
              data-plasmic-name={"service"}
              data-plasmic-override={overrides.service}
              className={classNames(projectcss.all, sty.service)}
            >
              <div
                data-plasmic-name={"titre2"}
                data-plasmic-override={overrides.titre2}
                className={classNames(projectcss.all, sty.titre2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wpzvX
                  )}
                >
                  {
                    "Pr\u00eat\u00b7e \u00e0 transformer tes ambitions en r\u00e9alit\u00e9 ?"
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___12CZb)}>
                <div className={classNames(projectcss.all, sty.freeBox__qn4Yj)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kowOc)}
                  >
                    <FreelanceCartesFreelance
                      className={classNames(
                        "__wab_instance",
                        sty.freelanceCartesFreelance__pLwRh
                      )}
                      icon={{
                        src: headhunting17929492PngUTyjj2WD5Bmm,
                        fullWidth: 512,
                        fullHeight: 512,
                        aspectRatio: undefined
                      }}
                      point1={
                        "Laisse nos apporteurs d\u2019affaires te guider. On t\u2019aide \u00e0 rencontrer des clients s\u00e9rieux et motiv\u00e9s."
                      }
                      titre={"Pas s\u00fbr de trouver tes premiers clients ?"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wGm2P)}
                  >
                    <FreelanceCartesFreelance
                      className={classNames(
                        "__wab_instance",
                        sty.freelanceCartesFreelance__u1CEa
                      )}
                      icon={{
                        src: performance18218222PngZFTcrpQc3X,
                        fullWidth: 512,
                        fullHeight: 512,
                        aspectRatio: undefined
                      }}
                      point1={
                        "Nos mentors t\u2019aident \u00e0 progresser vite et r\u00e9pondre aux attentes des clients."
                      }
                      titre={
                        "Tu doute de ton niveau?          Monte en comp\u00e9tence avec Netir !"
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wu2Be)}
                  >
                    <FreelanceCartesFreelance
                      className={classNames(
                        "__wab_instance",
                        sty.freelanceCartesFreelance__hhReQ
                      )}
                      icon={{
                        src: paper18856909PngG0081EOcWk4P,
                        fullWidth: 512,
                        fullHeight: 512,
                        aspectRatio: undefined
                      }}
                      point1={
                        "Netir simplifie tout pour que tu avances sereinement, avec de vrais humains \u00e0 l\u2019\u00e9coute, pas des bots."
                      }
                      titre={
                        "L\u2019administratif te p\u00e8se ?    Avec Netir bye bye la paperasse ! "
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__npNcc)}
                  >
                    <FreelanceCartesFreelance
                      className={classNames(
                        "__wab_instance",
                        sty.freelanceCartesFreelance__r6RBn
                      )}
                      icon={{
                        src: roi15101196PngSvQvFvAzOr,
                        fullWidth: 512,
                        fullHeight: 512,
                        aspectRatio: undefined
                      }}
                      point1={
                        "Rejoins notre programme SaaS Camp pour lancer ton business en une semaine. Simple, rapide, efficace."
                      }
                      titre={
                        "Lance ton SaaS avec Netir et passe au revenu r\u00e9current."
                      }
                    />
                  </div>
                </div>
              </div>
            </section>
            <div
              data-plasmic-name={"testimonials"}
              data-plasmic-override={overrides.testimonials}
              className={classNames(projectcss.all, sty.testimonials)}
            >
              <div
                data-plasmic-name={"titre4"}
                data-plasmic-override={overrides.titre4}
                className={classNames(projectcss.all, sty.titre4)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__daUXy
                  )}
                >
                  {
                    "Ils ont d\u00e9j\u00e0 boost\u00e9 leur activit\u00e9 avec Netir."
                  }
                </h2>
              </div>
              <div
                data-plasmic-name={"testimonial"}
                data-plasmic-override={overrides.testimonial}
                className={classNames(projectcss.all, sty.testimonial)}
              >
                <Testimonial
                  className={classNames(
                    "__wab_instance",
                    sty.testimonial__b7R5F
                  )}
                  img={{
                    src: geminiGeneratedImageRobmisrobmisrobmPngP1FKvt7G1Qiz,
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["unnamedVariant"]
                      : undefined
                  }
                  name={"Antoine D."}
                  review={
                    "\"Mon r\u00e9seau, je le construis depuis des ann\u00e9es. Avec Netir, je peux enfin le valoriser concr\u00e8tement. J'ai recommand\u00e9 une entreprise qui cherchait un d\u00e9veloppeur et un ancien coll\u00e8gue freelance, et j'ai touch\u00e9 mes commissions sans lever le petit doigt. C'est simple, transparent, et \u00e7a ajoute un beau compl\u00e9ment \u00e0 mes revenus !\""
                  }
                  starColor={"green"}
                  starCount={5}
                />

                <Testimonial
                  className={classNames(
                    "__wab_instance",
                    sty.testimonial__jMOz
                  )}
                  img={{
                    src: geminiGeneratedImageR5Pi6Mr5Pi6Mr5PiPng6Ni0OmcKfOKo,
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["unnamedVariant"]
                      : undefined
                  }
                  name={"Laura M."}
                  review={
                    "\"En RH, on rencontre beaucoup de talents et d'entreprises. Netir m'offre une solution parfaite pour connecter les bons profils aux bonnes opportunit\u00e9s, et d'\u00eatre r\u00e9mun\u00e9r\u00e9e pour cela. C'est rapide, sans aucune gestion administrative pour moi, et j'appr\u00e9cie la qualit\u00e9 des profils Netir. Tout le monde y gagne.\""
                  }
                  starCount={5}
                />

                <Testimonial
                  className={classNames(
                    "__wab_instance",
                    sty.testimonial__bgXig
                  )}
                  img={{
                    src: geminiGeneratedImageDo8Lcjdo8Lcjdo8LPngNMbgxDyE5Ve,
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                  mobile={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ["unnamedVariant"]
                      : undefined
                  }
                  name={"David S."}
                  review={
                    "\"M\u00eame \u00e0 la retraite, mon carnet d'adresses reste actif. Netir est une opportunit\u00e9 g\u00e9niale de continuer \u00e0 faire fructifier mes contacts sans reprendre de vrai travail. Quelques emails, une pr\u00e9sentation rapide, et hop ! Les commissions tombent quand les affaires se concluent. C'est un revenu facile et vraiment appr\u00e9ciable.\""
                  }
                  starColor={"blue"}
                  starCount={5}
                />
              </div>
            </div>
            <div
              data-plasmic-name={"callToAction2"}
              data-plasmic-override={overrides.callToAction2}
              className={classNames(projectcss.all, sty.callToAction2)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__va8Bz)}>
                <div className={classNames(projectcss.all, sty.freeBox__al4X)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2___10H7L
                    )}
                  >
                    {
                      "Pr\u00eat \u00e0 activer la puissance de votre r\u00e9seau ?"
                    }
                  </h2>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ch63Y)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "150px"
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "220px"
                          : "280px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: apporteurRemovebgPreviewPng0TExCjQaEzu0,
                      fullWidth: 500,
                      fullHeight: 500,
                      aspectRatio: undefined
                    }}
                  />

                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : false
                  ) ? (
                    <ButtonPrimary
                      data-plasmic-name={"primary5"}
                      data-plasmic-override={overrides.primary5}
                      className={classNames("__wab_instance", sty.primary5)}
                      color={generateStateValueProp($state, [
                        "primary5",
                        "color"
                      ])}
                      destination={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "netir.fr/sign-up"
                          : undefined
                      }
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qNgsn
                          )}
                        >
                          {"Devenez Apporteur d'Affaires Netir maintenant !"}
                        </div>
                      }
                      linkTo={""}
                      onColorChange2={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "primary5",
                          "color"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onTypeChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "primary5",
                          "type"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      type={generateStateValueProp($state, [
                        "primary5",
                        "type"
                      ])}
                    />
                  ) : null}
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__me7DV
                    )}
                    component={Link}
                    href={"#solutions"}
                    platform={"gatsby"}
                  >
                    <ButtonPrimary
                      data-plasmic-name={"primary7"}
                      data-plasmic-override={overrides.primary7}
                      className={classNames("__wab_instance", sty.primary7)}
                      color={generateStateValueProp($state, [
                        "primary7",
                        "color"
                      ])}
                      destination={"netir.fr/sign-up"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dls6
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Devenez Apporteur d'Affaires !"
                            : "Devenez Apporteur d'Affaires Netir maintenant !"}
                        </div>
                      }
                      linkTo={"#solutions"}
                      onColorChange2={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "primary7",
                          "color"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onTypeChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "primary7",
                          "type"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      type={generateStateValueProp($state, [
                        "primary7",
                        "type"
                      ])}
                    />
                  </PlasmicLink__>
                </div>
              </div>
            </div>
            <section
              data-plasmic-name={"faq2"}
              data-plasmic-override={overrides.faq2}
              className={classNames(projectcss.all, sty.faq2)}
              id={"solutions"}
            >
              <div className={classNames(projectcss.all, sty.freeBox__vsTpo)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__a5IA
                  )}
                >
                  {"Des questions ? On y r\u00e9pond."}
                </h2>
                <div className={classNames(projectcss.all, sty.freeBox__qv64R)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tZtIy)}
                  >
                    <Faq
                      answer={
                        "Tout le monde peut \u00eatre apporteur d'affaires (freelance, mentor, entreprise) ! Si vous connectez un client avec un freelance pour une mission, vous recevez une commission dont le pourcentage est n\u00e9goci\u00e9. Netir d\u00e9duit cette commission du montant de la mission et vous la verse directement."
                      }
                      className={classNames("__wab_instance", sty.faq__ehLwc)}
                      question={
                        "Qui peut \u00eatre apporteur d'affaires et comment suis-je r\u00e9mun\u00e9r\u00e9(e) ?"
                      }
                    />

                    <Faq
                      answer={
                        "Non, comme pour le mentorat, le pourcentage de la commission d'apporteur d'affaires est flexible et est d\u00e9fini lors de la mise en relation."
                      }
                      className={classNames("__wab_instance", sty.faq__mkCxk)}
                      question={
                        "La commission d'apporteur d'affaires est-elle fixe ?"
                      }
                    />

                    <Faq
                      answer={
                        "Notre syst\u00e8me de tra\u00e7abilit\u00e9 est transparent. D\u00e8s qu'un contact que vous avez recommand\u00e9 g\u00e9n\u00e8re une mission factur\u00e9e, votre commission est enregistr\u00e9e et vers\u00e9e automatiquement."
                      }
                      className={classNames("__wab_instance", sty.faq__jnPy3)}
                      question={
                        "Comment suis-je s\u00fbr d'\u00eatre r\u00e9mun\u00e9r\u00e9 ?"
                      }
                    />

                    <Faq
                      answer={
                        "Non, il n'y a pas de plafond. Plus vos recommandations g\u00e9n\u00e8rent d'affaires, plus vos commissions augmentent."
                      }
                      className={classNames("__wab_instance", sty.faq___6Yje5)}
                      question={"Y a-t-il un plafond de commissions ? "}
                    />

                    <Faq
                      answer={
                        "Non, votre r\u00f4le s'arr\u00eate \u00e0 la mise en relation. Nous g\u00e9rons le suivi avec le freelance et l'entreprise. Votre temps est pr\u00e9cieux."
                      }
                      className={classNames("__wab_instance", sty.faq__rGba)}
                      question={"Dois-je faire un suivi des missions ?"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___5Rm2P)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__mtiaM)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"80%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "20px"
                          : "auto"
                      }
                      loading={"lazy"}
                      src={{
                        src: geminiGeneratedImage8R11Yk8R11Yk8R11RemovebgPreviewPngBZ8T737YaQxk,
                        fullWidth: 427,
                        fullHeight: 585,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              </div>
            </section>
            <section
              data-plasmic-name={"heroCta"}
              data-plasmic-override={overrides.heroCta}
              className={classNames(projectcss.all, sty.heroCta)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__e7Yv8)}>
                <div className={classNames(projectcss.all, sty.freeBox__s5Mxz)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jfrmL)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wHm7D
                      )}
                    >
                      {
                        "Netir, ton partenaire pour entreprendre avec confiance !"
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jNWfY
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {"Tu l\u2019as compris : "}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{
                            fontWeight: 700,
                            color: "var(--token-aAKoBM1ZnH0f)"
                          }}
                        >
                          {"Netir"}
                        </span>
                        <React.Fragment>
                          {
                            " est l\u00e0 pour t'accompagner d\u00e8s tes premiers pas en "
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{
                            fontWeight: 700,
                            color: "var(--token-aAKoBM1ZnH0f)"
                          }}
                        >
                          {"entrepreneuriat"}
                        </span>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"."}
                        </span>
                        <React.Fragment>
                          {"\nEnvie de lancer un "}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"business \u00e0 revenu r\u00e9current"}
                        </span>
                        <React.Fragment>
                          {" sans sacrifier ton temps ?"}
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                    <ButtonOldHoverNetir
                      data-plasmic-name={"buttonOldHoverNetir"}
                      data-plasmic-override={overrides.buttonOldHoverNetir}
                      className={classNames(
                        "__wab_instance",
                        sty.buttonOldHoverNetir
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__iyvc4
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__t5NaO
                          )}
                        >
                          {"Je rejoins Netir"}
                        </div>
                        <NIcons3Icon
                          className={classNames(projectcss.all, sty.svg__qs1Gx)}
                          role={"img"}
                        />
                      </div>
                    </ButtonOldHoverNetir>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__elz96)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__b3LQf)}
                      displayHeight={"100%"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      loading={"lazy"}
                      src={{
                        src: rectangle3463476SmbueWp0Q4WB,
                        fullWidth: 800,
                        fullHeight: 533,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              </div>
            </section>
            <div
              data-plasmic-name={"faq"}
              data-plasmic-override={overrides.faq}
              className={classNames(projectcss.all, sty.faq)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__jhBqQ)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___1U6G3)}
                >
                  <div
                    data-plasmic-name={"titre7"}
                    data-plasmic-override={overrides.titre7}
                    className={classNames(projectcss.all, sty.titre7)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ee3T4
                      )}
                    >
                      {"Une petite question ?"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nJukc
                      )}
                    >
                      {
                        "Chez Netir freelances et mentors grandissent ensemble garantissant des meilleurs r\u00e9sultats pour l'entreprise cliente."
                      }
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gd1Gw)}
                  >
                    <Faq
                      answer={
                        "Avec Netir, vous b\u00e9n\u00e9ficiez d\u2019une approche unique : un freelance coach\u00e9 par un mentor pour des r\u00e9sultats encore meilleurs. Vous gagnez en efficacit\u00e9, en temps et en tranquillit\u00e9 d\u2019esprit."
                      }
                      className={classNames("__wab_instance", sty.faq___7YOmn)}
                      question={
                        "Pourquoi Netir plut\u00f4t qu\u2019une autre plateforme ?"
                      }
                    />

                    <Faq
                      answer={
                        "Les freelances Netir peuvent faire le choix d\u2019\u00eatre accompagn\u00e9s par des mentors exp\u00e9riment\u00e9s. Cela assure qu\u2019ils ont les outils et les connaissances n\u00e9cessaires pour d\u00e9passer vos attentes. Dans le cas o\u00f9 ils ne choississent pas de mentors, vous pouvez v\u00e9rifier les avis de pr\u00e9c\u00e9dents clients sur le profils des freelances."
                      }
                      className={classNames("__wab_instance", sty.faq__tCodP)}
                      question={
                        "Comment Netir garantit-il la qualit\u00e9 des freelances propos\u00e9s ?"
                      }
                    />

                    <Faq
                      answer={
                        "Vous pouvez confier des missions vari\u00e9es : cr\u00e9ation de site web, r\u00e9daction, design, strat\u00e9gie marketing, gestion de projet, traduction, montage vid\u00e9oetc. Si un freelance est disponible pour votre projet, Netir vous connecte avec le bon profil !"
                      }
                      className={classNames("__wab_instance", sty.faq__kh86H)}
                      question={
                        "Quel type de missions puis-je confier via Netir ?"
                      }
                    />

                    <Faq
                      answer={
                        "Chez Netir, votre satisfaction est notre priorit\u00e9. Gr\u00e2ce \u00e0 l'accompagnement des mentors, les freelances sont guid\u00e9s \u00e0 chaque \u00e9tape pour r\u00e9duire les risques de r\u00e9sultats insatisfaisants. Si un probl\u00e8me survient malgr\u00e9 tout, nos mentors interviennent pour rectifier la situation, que ce soit en ajustant le travail ou en vous proposant une autre collaboration mieux adapt\u00e9e."
                      }
                      className={classNames("__wab_instance", sty.faq__kikN)}
                      question={
                        "Comment les mentors sont-ils r\u00e9mun\u00e9r\u00e9s sur Netir ?"
                      }
                    />

                    <Faq
                      answer={
                        "Vous d\u00e9posez votre mission et Netir vous propose les freelances les plus qualifi\u00e9s pour celui-ci. Vous pouvez choisir un freelance accompagn\u00e9 par un mentor pour maximiser les r\u00e9sultats, mais ce n\u2019est pas obligatoire. Une fois votre choix fait, vous \u00e9changez directement avec le freelance, suivez l\u2019avancement et recevez votre projet livr\u00e9 dans les d\u00e9lais. Simple, rapide, efficace."
                      }
                      className={classNames("__wab_instance", sty.faq__jr8O7)}
                      question={
                        "Quel est le processus pour trouver le freelance id\u00e9al pour mon projet ?"
                      }
                    />

                    <Faq
                      answer={
                        "Chez Netir, vous payez uniquement \u00e0 la fin de la mission, soit mensuellement, soit au forfait selon vos besoins. La facturation est facilit\u00e9e et auto-g\u00e9n\u00e9r\u00e9e pour vous simplifier la vie et r\u00e9duire la charge administrative."
                      }
                      className={classNames("__wab_instance", sty.faq__gA8Oj)}
                      question={"Comment \u00e7a se passe pour le paiement ?"}
                    />
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__mehJ8)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__eg5FJ)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "100%"
                        : "auto"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "tabletOnly")
                        ? "100%"
                        : "80%"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "20px"
                        : hasVariant(globalVariants, "screen", "tabletOnly")
                          ? "100%"
                          : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: image41MvZbyZuDk41,
                      fullWidth: 720,
                      fullHeight: 997,
                      aspectRatio: 0.722166
                    }}
                  />
                </div>
              </div>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__hxp4C)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"285px"}
                loading={"lazy"}
                src={{
                  src: image41MvZbyZuDk41,
                  fullWidth: 720,
                  fullHeight: 997,
                  aspectRatio: 0.722166
                }}
              />
            </div>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  body: [
    "body",
    "wrapper",
    "hero",
    "siteHeader3",
    "buttonButton5",
    "interactionEffect6",
    "value2",
    "titre3",
    "h1",
    "h4",
    "boutons2",
    "primary3",
    "primary4",
    "solutions",
    "parcours",
    "service",
    "titre2",
    "testimonials",
    "titre4",
    "testimonial",
    "callToAction2",
    "primary5",
    "primary7",
    "faq2",
    "heroCta",
    "buttonOldHoverNetir",
    "faq",
    "titre7",
    "footer"
  ],
  wrapper: [
    "wrapper",
    "hero",
    "siteHeader3",
    "buttonButton5",
    "interactionEffect6",
    "value2",
    "titre3",
    "h1",
    "h4",
    "boutons2",
    "primary3",
    "primary4",
    "solutions",
    "parcours",
    "service",
    "titre2",
    "testimonials",
    "titre4",
    "testimonial",
    "callToAction2",
    "primary5",
    "primary7",
    "faq2",
    "heroCta",
    "buttonOldHoverNetir",
    "faq",
    "titre7",
    "footer"
  ],
  hero: [
    "hero",
    "siteHeader3",
    "buttonButton5",
    "interactionEffect6",
    "value2",
    "titre3",
    "h1",
    "h4",
    "boutons2",
    "primary3",
    "primary4"
  ],
  siteHeader3: ["siteHeader3", "buttonButton5", "interactionEffect6"],
  buttonButton5: ["buttonButton5", "interactionEffect6"],
  interactionEffect6: ["interactionEffect6"],
  value2: ["value2", "titre3", "h1", "h4", "boutons2", "primary3", "primary4"],
  titre3: ["titre3", "h1", "h4", "boutons2", "primary3", "primary4"],
  h1: ["h1"],
  h4: ["h4"],
  boutons2: ["boutons2", "primary3", "primary4"],
  primary3: ["primary3"],
  primary4: ["primary4"],
  solutions: ["solutions"],
  parcours: ["parcours"],
  service: ["service", "titre2"],
  titre2: ["titre2"],
  testimonials: ["testimonials", "titre4", "testimonial"],
  titre4: ["titre4"],
  testimonial: ["testimonial"],
  callToAction2: ["callToAction2", "primary5", "primary7"],
  primary5: ["primary5"],
  primary7: ["primary7"],
  faq2: ["faq2"],
  heroCta: ["heroCta", "buttonOldHoverNetir"],
  buttonOldHoverNetir: ["buttonOldHoverNetir"],
  faq: ["faq", "titre7"],
  titre7: ["titre7"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  body: "div";
  wrapper: "div";
  hero: "div";
  siteHeader3: typeof SiteHeader;
  buttonButton5: typeof ButtonPrimary;
  interactionEffect6: "div";
  value2: "div";
  titre3: "div";
  h1: "h1";
  h4: "h4";
  boutons2: "div";
  primary3: typeof ButtonPrimary;
  primary4: typeof ButtonPrimary;
  solutions: "section";
  parcours: "section";
  service: "section";
  titre2: "div";
  testimonials: "div";
  titre4: "div";
  testimonial: "div";
  callToAction2: "div";
  primary5: typeof ButtonPrimary;
  primary7: typeof ButtonPrimary;
  faq2: "section";
  heroCta: "section";
  buttonOldHoverNetir: typeof ButtonOldHoverNetir;
  faq: "div";
  titre7: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLandingApporteurDaffaire__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLandingApporteurDaffaire__VariantsArgs;
    args?: PlasmicLandingApporteurDaffaire__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicLandingApporteurDaffaire__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicLandingApporteurDaffaire__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLandingApporteurDaffaire__ArgProps,
          internalVariantPropNames:
            PlasmicLandingApporteurDaffaire__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLandingApporteurDaffaire__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "body") {
    func.displayName = "PlasmicLandingApporteurDaffaire";
  } else {
    func.displayName = `PlasmicLandingApporteurDaffaire.${nodeName}`;
  }
  return func;
}

export const PlasmicLandingApporteurDaffaire = Object.assign(
  // Top-level PlasmicLandingApporteurDaffaire renders the root element
  makeNodeComponent("body"),
  {
    // Helper components rendering sub-elements
    wrapper: makeNodeComponent("wrapper"),
    hero: makeNodeComponent("hero"),
    siteHeader3: makeNodeComponent("siteHeader3"),
    buttonButton5: makeNodeComponent("buttonButton5"),
    interactionEffect6: makeNodeComponent("interactionEffect6"),
    value2: makeNodeComponent("value2"),
    titre3: makeNodeComponent("titre3"),
    h1: makeNodeComponent("h1"),
    h4: makeNodeComponent("h4"),
    boutons2: makeNodeComponent("boutons2"),
    primary3: makeNodeComponent("primary3"),
    primary4: makeNodeComponent("primary4"),
    solutions: makeNodeComponent("solutions"),
    parcours: makeNodeComponent("parcours"),
    service: makeNodeComponent("service"),
    titre2: makeNodeComponent("titre2"),
    testimonials: makeNodeComponent("testimonials"),
    titre4: makeNodeComponent("titre4"),
    testimonial: makeNodeComponent("testimonial"),
    callToAction2: makeNodeComponent("callToAction2"),
    primary5: makeNodeComponent("primary5"),
    primary7: makeNodeComponent("primary7"),
    faq2: makeNodeComponent("faq2"),
    heroCta: makeNodeComponent("heroCta"),
    buttonOldHoverNetir: makeNodeComponent("buttonOldHoverNetir"),
    faq: makeNodeComponent("faq"),
    titre7: makeNodeComponent("titre7"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicLandingApporteurDaffaire
    internalVariantProps: PlasmicLandingApporteurDaffaire__VariantProps,
    internalArgProps: PlasmicLandingApporteurDaffaire__ArgProps,

    // Page metadata
    pageMetadata: {
      title:
        "Netir - Les meilleurs freelances et mentors pour votre entreprise",
      description:
        "Netir est la plateforme qui vous garantie la qualité des freelance grâce aux recommandations des mentors.",
      ogImageSrc:
        "https://site-assets.plasmic.app/9f3005b94278521a011c47609ecbb96a.png",
      canonical: "https://www.netir.fr/entreprise"
    }
  }
);

export default PlasmicLandingApporteurDaffaire;
/* prettier-ignore-end */
