/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: fsGXiJvcNs55

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicServices.module.css"; // plasmic-import: fsGXiJvcNs55/css

import image70NH6XjU9J8VVj from "./images/image70.svg"; // plasmic-import: nH6xjU9J8vVj/picture

createPlasmicElementProxy;

export type PlasmicServices__VariantMembers = {
  ugc: "ugcWebDsign";
  managmt: "management";
  montage: "montage";
  devweb: "developpmentWeb";
  design: "design";
  emailing: "emailling";
  marketing: "marketing";
  photo: "photo";
  data: "data";
  expRef: "expRef";
  web3: "web";
};
export type PlasmicServices__VariantsArgs = {
  ugc?: MultiChoiceArg<"ugcWebDsign">;
  managmt?: MultiChoiceArg<"management">;
  montage?: MultiChoiceArg<"montage">;
  devweb?: MultiChoiceArg<"developpmentWeb">;
  design?: MultiChoiceArg<"design">;
  emailing?: MultiChoiceArg<"emailling">;
  marketing?: MultiChoiceArg<"marketing">;
  photo?: MultiChoiceArg<"photo">;
  data?: MultiChoiceArg<"data">;
  expRef?: MultiChoiceArg<"expRef">;
  web3?: MultiChoiceArg<"web">;
};
type VariantPropType = keyof PlasmicServices__VariantsArgs;
export const PlasmicServices__VariantProps = new Array<VariantPropType>(
  "ugc",
  "managmt",
  "montage",
  "devweb",
  "design",
  "emailing",
  "marketing",
  "photo",
  "data",
  "expRef",
  "web3"
);

export type PlasmicServices__ArgsType = {
  img?: React.ComponentProps<typeof PlasmicImg__>["src"];
  texte?: string;
  onMontageChange?: (val: any) => void;
  onDesignChange?: (val: any) => void;
  onDataChange?: (val: any) => void;
  onExpRefChange?: (val: any) => void;
};
type ArgPropType = keyof PlasmicServices__ArgsType;
export const PlasmicServices__ArgProps = new Array<ArgPropType>(
  "img",
  "texte",
  "onMontageChange",
  "onDesignChange",
  "onDataChange",
  "onExpRefChange"
);

export type PlasmicServices__OverridesType = {
  root?: Flex__<"div">;
  text?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultServicesProps {
  img?: React.ComponentProps<typeof PlasmicImg__>["src"];
  texte?: string;
  onMontageChange?: (val: any) => void;
  onDesignChange?: (val: any) => void;
  onDataChange?: (val: any) => void;
  onExpRefChange?: (val: any) => void;
  ugc?: MultiChoiceArg<"ugcWebDsign">;
  managmt?: MultiChoiceArg<"management">;
  montage?: MultiChoiceArg<"montage">;
  devweb?: MultiChoiceArg<"developpmentWeb">;
  design?: MultiChoiceArg<"design">;
  emailing?: MultiChoiceArg<"emailling">;
  marketing?: MultiChoiceArg<"marketing">;
  photo?: MultiChoiceArg<"photo">;
  data?: MultiChoiceArg<"data">;
  expRef?: MultiChoiceArg<"expRef">;
  web3?: MultiChoiceArg<"web">;
  className?: string;
}

const $$ = {};

function PlasmicServices__RenderFunc(props: {
  variants: PlasmicServices__VariantsArgs;
  args: PlasmicServices__ArgsType;
  overrides: PlasmicServices__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          img: {
            src: image70NH6XjU9J8VVj,
            fullWidth: 242,
            fullHeight: 188,
            aspectRatio: 1.287234
          },
          texte: "Webdesign"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "ugc",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.ugc
      },
      {
        path: "managmt",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.managmt
      },
      {
        path: "montage",
        type: "writable",
        variableType: "variant",

        valueProp: "montage",
        onChangeProp: "onMontageChange"
      },
      {
        path: "devweb",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.devweb
      },
      {
        path: "design",
        type: "writable",
        variableType: "variant",

        valueProp: "design",
        onChangeProp: "onDesignChange"
      },
      {
        path: "emailing",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.emailing
      },
      {
        path: "marketing",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.marketing
      },
      {
        path: "photo",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.photo
      },
      {
        path: "data",
        type: "writable",
        variableType: "variant",

        valueProp: "data",
        onChangeProp: "onDataChange"
      },
      {
        path: "expRef",
        type: "writable",
        variableType: "variant",

        valueProp: "expRef",
        onChangeProp: "onExpRefChange"
      },
      {
        path: "web3",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.web3
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootdata]: hasVariant($state, "data", "data"),
          [sty.rootdesign]: hasVariant($state, "design", "design"),
          [sty.rootdevweb_developpmentWeb]: hasVariant(
            $state,
            "devweb",
            "developpmentWeb"
          ),
          [sty.rootemailing_emailling]: hasVariant(
            $state,
            "emailing",
            "emailling"
          ),
          [sty.rootexpRef]: hasVariant($state, "expRef", "expRef"),
          [sty.rootmanagmt_management]: hasVariant(
            $state,
            "managmt",
            "management"
          ),
          [sty.rootmarketing]: hasVariant($state, "marketing", "marketing"),
          [sty.rootmontage]: hasVariant($state, "montage", "montage"),
          [sty.rootphoto]: hasVariant($state, "photo", "photo"),
          [sty.rootugc_ugcWebDsign]: hasVariant($state, "ugc", "ugcWebDsign"),
          [sty.rootweb3_web]: hasVariant($state, "web3", "web")
        }
      )}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textmanagmt_management]: hasVariant(
            $state,
            "managmt",
            "management"
          )
        })}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.texte;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "Webdesign";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <PlasmicImg__
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"auto"}
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={
          hasVariant(globalVariants, "screen", "tabletOnly") ? "150px" : "240px"
        }
        loading={"lazy"}
        src={args.img}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "img"],
  text: ["text"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicServices__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicServices__VariantsArgs;
    args?: PlasmicServices__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicServices__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicServices__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicServices__ArgProps,
          internalVariantPropNames: PlasmicServices__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicServices__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicServices";
  } else {
    func.displayName = `PlasmicServices.${nodeName}`;
  }
  return func;
}

export const PlasmicServices = Object.assign(
  // Top-level PlasmicServices renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicServices
    internalVariantProps: PlasmicServices__VariantProps,
    internalArgProps: PlasmicServices__ArgProps
  }
);

export default PlasmicServices;
/* prettier-ignore-end */
