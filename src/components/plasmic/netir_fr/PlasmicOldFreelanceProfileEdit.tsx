/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: f1mWGcbEkAg7

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import DashboardDashboardLayout from "../../DashboardDashboardLayout"; // plasmic-import: KS-1W6sGklIw/component
import NavNavItem from "../../NavNavItem"; // plasmic-import: emjpN_Inho3r/component
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import InputImageInput from "../../InputImageInput"; // plasmic-import: 4-XpNym7qqig/component
import InputInputImageSquaredShape from "../../InputInputImageSquaredShape"; // plasmic-import: 9vtSo1sSgXcQ/component
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import NiveauDexperience from "../../NiveauDexperience"; // plasmic-import: 8kf_P_rqnLWb/component
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import CheckboxesCheckWithLabel from "../../CheckboxesCheckWithLabel"; // plasmic-import: pqDmGvKea0I3/component
import ButtonOldHoverNetir from "../../ButtonOldHoverNetir"; // plasmic-import: oz0RlE6uDG5S/component
import ButtonOldPrecedent from "../../ButtonOldPrecedent"; // plasmic-import: t7J0gbQy9s_q/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicOldFreelanceProfileEdit.module.css"; // plasmic-import: f1mWGcbEkAg7/css

import MessageSquareDotsSvgrepoComSvgIcon from "./icons/PlasmicIcon__MessageSquareDotsSvgrepoComSvg"; // plasmic-import: lo8y0dFHgTSz/icon
import BusinessFinanceInvoiceSvgrepoComSvgIcon from "./icons/PlasmicIcon__BusinessFinanceInvoiceSvgrepoComSvg"; // plasmic-import: dSOi0A0BQDwy/icon
import EnterpriseSvgrepoComSvgIcon from "./icons/PlasmicIcon__EnterpriseSvgrepoComSvg"; // plasmic-import: HC2LKgzu4-0d/icon
import User2SvgrepoComSvgIcon from "./icons/PlasmicIcon__User2SvgrepoComSvg"; // plasmic-import: yXbiP_2IZqD3/icon
import CapEducationHatSvgrepoComSvgIcon from "./icons/PlasmicIcon__CapEducationHatSvgrepoComSvg"; // plasmic-import: km4JQm5jTwhK/icon
import BurgerMenuIcon from "./icons/PlasmicIcon__BurgerMenu"; // plasmic-import: uiLqCVdai7zb/icon

createPlasmicElementProxy;

export type PlasmicOldFreelanceProfileEdit__VariantMembers = {};
export type PlasmicOldFreelanceProfileEdit__VariantsArgs = {};
type VariantPropType = keyof PlasmicOldFreelanceProfileEdit__VariantsArgs;
export const PlasmicOldFreelanceProfileEdit__VariantProps =
  new Array<VariantPropType>();

export type PlasmicOldFreelanceProfileEdit__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicOldFreelanceProfileEdit__ArgsType;
export const PlasmicOldFreelanceProfileEdit__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicOldFreelanceProfileEdit__OverridesType = {
  root?: Flex__<"div">;
  dashboardLayout?: Flex__<typeof DashboardDashboardLayout>;
  freeBox?: Flex__<"div">;
};

export interface DefaultOldFreelanceProfileEditProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

const $$ = {};

export function Head() {
  return <></>;
}

function PlasmicOldFreelanceProfileEdit__RenderFunc(props: {
  variants: PlasmicOldFreelanceProfileEdit__VariantsArgs;
  args: PlasmicOldFreelanceProfileEdit__ArgsType;
  overrides: PlasmicOldFreelanceProfileEdit__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dashboardLayout.isSidebarOpenn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <DashboardDashboardLayout
            data-plasmic-name={"dashboardLayout"}
            data-plasmic-override={overrides.dashboardLayout}
            children2={
              <React.Fragment>
                <NavNavItem
                  className={classNames(
                    "__wab_instance",
                    sty.navNavItem___73Jl6
                  )}
                  slot={
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__kyi2Y
                      )}
                      key={"menuItemKey1"}
                      onClick={async () => {
                        const $steps = {};

                        $steps["goToFreelanceCompany"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: `/freelance/company`
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __gatsbyNavigate(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToFreelanceCompany"] != null &&
                          typeof $steps["goToFreelanceCompany"] === "object" &&
                          typeof $steps["goToFreelanceCompany"].then ===
                            "function"
                        ) {
                          $steps["goToFreelanceCompany"] =
                            await $steps["goToFreelanceCompany"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fIu9I
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 400 }}
                          >
                            {"Entreprise"}
                          </span>
                        </React.Fragment>
                      </div>
                    </AntdMenuItem>
                  }
                >
                  <EnterpriseSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg___5RNg)}
                    role={"img"}
                  />
                </NavNavItem>
                <NavNavItem
                  className={classNames("__wab_instance", sty.navNavItem__y82B)}
                  slot={
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__z6RGr
                      )}
                      key={"menuItemKey1"}
                      onClick={async () => {
                        const $steps = {};

                        $steps["goToFreelanceCompany"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: `/freelance/company`
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __gatsbyNavigate(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToFreelanceCompany"] != null &&
                          typeof $steps["goToFreelanceCompany"] === "object" &&
                          typeof $steps["goToFreelanceCompany"].then ===
                            "function"
                        ) {
                          $steps["goToFreelanceCompany"] =
                            await $steps["goToFreelanceCompany"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qUeZ
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 400 }}
                          >
                            {"Profil"}
                          </span>
                        </React.Fragment>
                      </div>
                    </AntdMenuItem>
                  }
                >
                  <User2SvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__xFPci)}
                    role={"img"}
                  />
                </NavNavItem>
              </React.Fragment>
            }
            children3={
              <NavNavItem
                className={classNames("__wab_instance", sty.navNavItem___97KKf)}
                slot={
                  <AntdMenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.menuItem__hIxOa
                    )}
                    key={"menuItemKey1"}
                    onClick={async () => {
                      const $steps = {};

                      $steps["goToMentorHome"] = true
                        ? (() => {
                            const actionArgs = { destination: `/mentor/home` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __gatsbyNavigate(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToMentorHome"] != null &&
                        typeof $steps["goToMentorHome"] === "object" &&
                        typeof $steps["goToMentorHome"].then === "function"
                      ) {
                        $steps["goToMentorHome"] =
                          await $steps["goToMentorHome"];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bdIPd
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 400 }}
                        >
                          {"Devenir mentor"}
                        </span>
                      </React.Fragment>
                    </div>
                  </AntdMenuItem>
                }
              >
                <CapEducationHatSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__wV)}
                  role={"img"}
                />
              </NavNavItem>
            }
            className={classNames("__wab_instance", sty.dashboardLayout)}
            isSidebarOpenn={generateStateValueProp($state, [
              "dashboardLayout",
              "isSidebarOpenn"
            ])}
            onIsSidebarOpennChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dashboardLayout",
                "isSidebarOpenn"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            slot={renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mWcdA)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gy8Tz
                      )}
                    >
                      {"Compl\u00e9ter mon profil Freelance"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jJzqm)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qfm1I
                      )}
                    >
                      {"Error box"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jg9C6)}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.form__oJnGx
                        ),
                        formItems: [
                          { label: "Name", name: "name", inputType: "Text" },
                          {
                            label: "Message",
                            name: "message",
                            inputType: "Text Area"
                          }
                        ],
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "advanced",
                        submitSlot: null,
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };

                      return (
                        <FormWrapper {...child$Props}>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__rsAdz
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__g0Hhc
                                )}
                              >
                                {"Nom d'utilisateur"}
                              </div>
                            }
                            name={"name"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ha7Sv
                              )}
                            >
                              {
                                "Indique un nom court pour ton profil, il sera utilis\u00e9 dans ton URL."
                              }
                            </div>
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input___1OKbc
                                )
                              };

                              return <AntdInput {...child$Props} />;
                            })()}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8G7Cj
                              )}
                            >
                              {
                                "il ne peut contenir que des lettres, des chiffres et des tirets (-)"
                              }
                            </div>
                          </FormItemWrapper>
                        </FormWrapper>
                      );
                    })()}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tm4K5
                    )}
                  >
                    {"Informations personnelles\r"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yJzGx)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xmEqw
                      )}
                    >
                      {"Photo de profil"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__z7YEn
                      )}
                    >
                      {
                        "Optez pour une photo de qualit\u00e9, claire et professionnelle. Choisissez un format JPEG ou PNG, 300x300 px pour un rendu optimal.\r"
                      }
                    </div>
                    <InputImageInput
                      className={classNames(
                        "__wab_instance",
                        sty.inputImageInput__i0Lv
                      )}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___8U95P)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6JxD7
                      )}
                    >
                      {"Banni\u00e8re"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4M7Dc
                      )}
                    >
                      {
                        "Affirmez votre marque avec une banni\u00e8re professionnelle. Choisissez un format JPEG ou PNG 1200x400 px pour un rendu optimal."
                      }
                    </div>
                    <InputInputImageSquaredShape
                      className={classNames(
                        "__wab_instance",
                        sty.inputInputImageSquaredShape__thuaL
                      )}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zWo0R)}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.form__d587B
                        ),
                        formItems: [
                          { label: "Name", name: "name", inputType: "Text" },
                          {
                            label: "Message",
                            name: "message",
                            inputType: "Text Area"
                          }
                        ],
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "advanced",
                        submitSlot: null,
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };

                      return (
                        <FormWrapper {...child$Props}>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__fM6E1
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___5RM0
                                )}
                              >
                                {"Quel est ton super pouvoir ?"}
                              </div>
                            }
                            name={"name"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input__viZ0C
                                )
                              };

                              return <AntdInput {...child$Props} />;
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__xLjSa
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__gCZhi
                                )}
                              >
                                {"Votre description en quelques mots"}
                              </div>
                            }
                            name={"message"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dZg3N
                              )}
                            >
                              {
                                "Parlez de votre mission, de votre culture et de ce qui vous rend unique.\r"
                              }
                            </div>
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.textArea__mwIbe
                                )
                              };

                              return <AntdTextArea {...child$Props} />;
                            })()}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__i7Cmp
                              )}
                            >
                              {"2000 caract\u00e8res\r"}
                            </div>
                          </FormItemWrapper>
                        </FormWrapper>
                      );
                    })()}
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.form__iXWqH
                        ),
                        formItems: [
                          { label: "Name", name: "name", inputType: "Text" },
                          {
                            label: "Message",
                            name: "message",
                            inputType: "Text Area"
                          }
                        ],
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "advanced",
                        submitSlot: null,
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };

                      return (
                        <FormWrapper {...child$Props}>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__lowzm
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__dZnFk
                                )}
                              >
                                {"Tes comp\u00e9tences\r"}
                              </div>
                            }
                            name={"name"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0TjZv
                              )}
                            >
                              {
                                "Indique au moins 5 de tes comp\u00e9tences pour avoir 3 fois plus de chances de d\u00e9crocher une mission.\r"
                              }
                            </div>
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input__mUt9Y
                                )
                              };

                              return <AntdInput {...child$Props} />;
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__p6Hz7
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__rx44U
                                )}
                              >
                                {"Niveau d\u2019exp\u00e9rience"}
                              </div>
                            }
                            name={"message"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2FoO
                              )}
                            >
                              {
                                "Depuis combien de temps travailles-tu ? Cette information n'apparaitra pas sur ton profil public.\r"
                              }
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__pqXM
                              )}
                            >
                              <NiveauDexperience
                                className={classNames(
                                  "__wab_instance",
                                  sty.niveauDexperience__ocK3
                                )}
                              />

                              <NiveauDexperience
                                className={classNames(
                                  "__wab_instance",
                                  sty.niveauDexperience__vaPy3
                                )}
                                slot={"Interm\u00e9diaire"}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__eftCv
                                  )}
                                >
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{ color: "#000000" }}
                                    >
                                      {"3-7 ans"}
                                    </span>
                                  </React.Fragment>
                                </div>
                              </NiveauDexperience>
                              <NiveauDexperience
                                className={classNames(
                                  "__wab_instance",
                                  sty.niveauDexperience__zla6T
                                )}
                                slot={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__eP4Te
                                    )}
                                  >
                                    {"Senior"}
                                  </div>
                                }
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__fuGv3
                                  )}
                                >
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{ color: "#000000" }}
                                    >
                                      {"+7 ans"}
                                    </span>
                                  </React.Fragment>
                                </div>
                              </NiveauDexperience>
                            </div>
                          </FormItemWrapper>
                        </FormWrapper>
                      );
                    })()}
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.form__gcHne
                        ),
                        formItems: [
                          { label: "Name", name: "name", inputType: "Text" },
                          {
                            label: "Message",
                            name: "message",
                            inputType: "Text Area"
                          }
                        ],
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "advanced",
                        submitSlot: null,
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };

                      return (
                        <FormWrapper {...child$Props}>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__bi9Tn
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___8MpYb
                                )}
                              >
                                {"Localisation"}
                              </div>
                            }
                            name={"localisation"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input__heH
                                )
                              };

                              return <AntdInput {...child$Props} />;
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__jUmq
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__afKSx
                                )}
                              >
                                {
                                  "Jusqu\u2019\u00e0 combien de kilom\u00e8tres peux-tu te d\u00e9placer ?\r\r"
                                }
                              </div>
                            }
                            name={"name"}
                          >
                            <AntdSelect
                              className={classNames(
                                "__wab_instance",
                                sty.select__ht3Q0
                              )}
                              defaultStylesClassName={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                styleTokensClassNames
                              )}
                              optionClassName={classNames({
                                [sty["pcls_T8IxjHOojfyR"]]: true
                              })}
                              options={(() => {
                                const __composite = [
                                  { value: null, label: null, type: "option" },
                                  { value: null, label: null, type: "option" },
                                  { type: null, value: null, label: null },
                                  { type: "option", value: null, label: null }
                                ];
                                __composite["0"]["value"] = "< 1km";
                                __composite["0"]["label"] = "< 1km";
                                __composite["1"]["value"] = "< 5km";
                                __composite["1"]["label"] = "< 5km";
                                __composite["2"]["type"] = "option";
                                __composite["2"]["value"] = "< 10km";
                                __composite["2"]["label"] = "< 10km";
                                __composite["3"]["value"] = "< 20km";
                                __composite["3"]["label"] = "< 20km";
                                return __composite;
                              })()}
                              placeholder={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__bY2Gx
                                  )}
                                >
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{ color: "#000000" }}
                                    >
                                      {"Km"}
                                    </span>
                                  </React.Fragment>
                                </div>
                              }
                              placeholderClassName={classNames({
                                [sty["pcls_GGcHCZ2sq47V"]]: true
                              })}
                              popupClassName={classNames({
                                [sty["pcls_22-5e-Ez-2yl"]]: true
                              })}
                              popupScopeClassName={sty["select__ht3Q0__popup"]}
                              triggerClassName={classNames({
                                [sty["pcls_E4i6VvQdMshT"]]: true
                              })}
                            />
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__r2Ftu
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__xWKsw
                                )}
                              >
                                {"Localisation"}
                              </div>
                            }
                            name={"name"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__qmLmj
                              )}
                            >
                              <NiveauDexperience
                                className={classNames(
                                  "__wab_instance",
                                  sty.niveauDexperience__cAvqu
                                )}
                                slot={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___15P8J
                                    )}
                                  >
                                    {"Junior"}
                                  </div>
                                }
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__p02No
                                  )}
                                >
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{ color: "#000000" }}
                                    >
                                      {"Chez les clients"}
                                    </span>
                                  </React.Fragment>
                                </div>
                              </NiveauDexperience>
                              <NiveauDexperience
                                className={classNames(
                                  "__wab_instance",
                                  sty.niveauDexperience__nrjDu
                                )}
                                slot={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___2DsBw
                                    )}
                                  >
                                    {"Interm\u00e9diaire"}
                                  </div>
                                }
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__avMhE
                                  )}
                                >
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{ color: "#000000" }}
                                    >
                                      {"Chez les clients et \u00e0 distance"}
                                    </span>
                                  </React.Fragment>
                                </div>
                              </NiveauDexperience>
                              <NiveauDexperience
                                className={classNames(
                                  "__wab_instance",
                                  sty.niveauDexperience__zjm8M
                                )}
                                slot={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__dmzIp
                                    )}
                                  >
                                    {"Senior"}
                                  </div>
                                }
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__w2UPb
                                  )}
                                >
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{ color: "#000000" }}
                                    >
                                      {"\u00c0 distance"}
                                    </span>
                                  </React.Fragment>
                                </div>
                              </NiveauDexperience>
                            </div>
                          </FormItemWrapper>
                        </FormWrapper>
                      );
                    })()}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__twk5I
                      )}
                    >
                      {"Tarifs"}
                    </div>
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.form__fjYtq
                        ),
                        formItems: [
                          { label: "Name", name: "name", inputType: "Text" },
                          {
                            label: "Message",
                            name: "message",
                            inputType: "Text Area"
                          }
                        ],
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "advanced",
                        submitSlot: null,
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };

                      return (
                        <FormWrapper {...child$Props}>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__ncMd1
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__xglgw
                                )}
                              >
                                {"Taux journaliers"}
                              </div>
                            }
                            name={"Taux journaliers"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input__ewrZ2
                                )
                              };

                              return <AntdInput {...child$Props} />;
                            })()}
                          </FormItemWrapper>
                        </FormWrapper>
                      );
                    })()}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nyQ7W
                      )}
                    >
                      {"Liens utiles"}
                    </div>
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.form__x4PnF
                        ),
                        formItems: [
                          { label: "Name", name: "name", inputType: "Text" },
                          {
                            label: "Message",
                            name: "message",
                            inputType: "Text Area"
                          }
                        ],
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "advanced",
                        submitSlot: null,
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };

                      return (
                        <FormWrapper {...child$Props}>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__f5DbA
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ha1Gr
                                )}
                              >
                                {"Site web"}
                              </div>
                            }
                            name={"Site web"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input__g5Rx
                                ),
                                placeholder: "http://monportfolio.com"
                              };

                              return <AntdInput {...child$Props} />;
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__siyqn
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___1Ugfc
                                )}
                              >
                                {"X / Twitter"}
                              </div>
                            }
                            name={"twitter"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input___8XptB
                                ),
                                placeholder: "http://x.com"
                              };

                              return <AntdInput {...child$Props} />;
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField___0ZVav
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__veuLc
                                )}
                              >
                                {"Linkedin"}
                              </div>
                            }
                            name={"linkedin"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input__h9Dgq
                                ),
                                placeholder: "http://linkedin.com"
                              };

                              return <AntdInput {...child$Props} />;
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__ntT9
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___83Ix
                                )}
                              >
                                {"Gihub"}
                              </div>
                            }
                            name={"name"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input__c3PsV
                                ),
                                placeholder: "http://github.com"
                              };

                              return <AntdInput {...child$Props} />;
                            })()}
                          </FormItemWrapper>
                        </FormWrapper>
                      );
                    })()}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pDzHm
                      )}
                    >
                      {"Vilibilit\u00e9 et disponibilit\u00e9"}
                    </div>
                    <CheckboxesCheckWithLabel
                      className={classNames(
                        "__wab_instance",
                        sty.checkboxesCheckWithLabel__whlVs
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bGfAh
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{
                              color: "var(--token-lDLmFdvCjYex)",
                              fontWeight: 500
                            }}
                          >
                            {"Profil visible par les entreprises"}
                          </span>
                        </React.Fragment>
                      </div>
                    </CheckboxesCheckWithLabel>
                    <CheckboxesCheckWithLabel
                      className={classNames(
                        "__wab_instance",
                        sty.checkboxesCheckWithLabel__u9Fzz
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tQwc
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{
                              color: "var(--token-lDLmFdvCjYex)",
                              fontWeight: 500
                            }}
                          >
                            {"Ouvert aux opprotunit\u00e9s"}
                          </span>
                        </React.Fragment>
                      </div>
                    </CheckboxesCheckWithLabel>
                    <div
                      className={classNames(projectcss.all, sty.columns__kLhBj)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__anhvQ
                        )}
                      >
                        <ButtonOldHoverNetir
                          className={classNames(
                            "__wab_instance",
                            sty.buttonOldHoverNetir__oDmEi
                          )}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__jt4OO
                        )}
                      >
                        <ButtonOldPrecedent
                          className={classNames(
                            "__wab_instance",
                            sty.buttonOldPrecedent__wSEk
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___2VaWa
                            )}
                          >
                            {"Annuler"}
                          </div>
                        </ButtonOldPrecedent>
                      </div>
                    </div>
                  </div>
                </React.Fragment>
              ),
              value: args.slot
            })}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <NavNavItem
                    className={classNames(
                      "__wab_instance",
                      sty.navNavItem__rfavf
                    )}
                    slot={
                      <AntdMenuItem
                        className={classNames(
                          "__wab_instance",
                          sty.menuItem__eBy4I
                        )}
                        key={"menuItemKey1"}
                        onClick={async () => {
                          const $steps = {};

                          $steps["goToFreelanceMissions"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: `/freelance/missions`
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __gatsbyNavigate(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToFreelanceMissions"] != null &&
                            typeof $steps["goToFreelanceMissions"] ===
                              "object" &&
                            typeof $steps["goToFreelanceMissions"].then ===
                              "function"
                          ) {
                            $steps["goToFreelanceMissions"] =
                              await $steps["goToFreelanceMissions"];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nU8QA
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 400 }}
                            >
                              {"Missions"}
                            </span>
                          </React.Fragment>
                        </div>
                      </AntdMenuItem>
                    }
                  >
                    <MessageSquareDotsSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__w4FMe)}
                      role={"img"}
                    />
                  </NavNavItem>
                  <NavNavItem
                    className={classNames(
                      "__wab_instance",
                      sty.navNavItem__zwkxT
                    )}
                    slot={
                      <AntdMenuItem
                        className={classNames(
                          "__wab_instance",
                          sty.menuItem___5VhMa
                        )}
                        key={"menuItemKey1"}
                        onClick={async () => {
                          const $steps = {};

                          $steps["goToFreelanceInvoices"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: `/freelance/invoices`
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __gatsbyNavigate(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToFreelanceInvoices"] != null &&
                            typeof $steps["goToFreelanceInvoices"] ===
                              "object" &&
                            typeof $steps["goToFreelanceInvoices"].then ===
                              "function"
                          ) {
                            $steps["goToFreelanceInvoices"] =
                              await $steps["goToFreelanceInvoices"];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kwkCb
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 400 }}
                            >
                              {"Factures"}
                            </span>
                          </React.Fragment>
                        </div>
                      </AntdMenuItem>
                    }
                  />
                </React.Fragment>
              ),
              value: args.children
            })}
          </DashboardDashboardLayout>
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <BurgerMenuIcon
              className={classNames(projectcss.all, sty.svg___4Jcsc)}
              onClick={async event => {
                const $steps = {};

                $steps["updateDashboardLayoutIsSidebarOpenn"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dashboardLayout", "isSidebarOpenn"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDashboardLayoutIsSidebarOpenn"] != null &&
                  typeof $steps["updateDashboardLayoutIsSidebarOpenn"] ===
                    "object" &&
                  typeof $steps["updateDashboardLayoutIsSidebarOpenn"].then ===
                    "function"
                ) {
                  $steps["updateDashboardLayoutIsSidebarOpenn"] =
                    await $steps["updateDashboardLayoutIsSidebarOpenn"];
                }
              }}
              role={"img"}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "dashboardLayout", "freeBox"],
  dashboardLayout: ["dashboardLayout"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dashboardLayout: typeof DashboardDashboardLayout;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOldFreelanceProfileEdit__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOldFreelanceProfileEdit__VariantsArgs;
    args?: PlasmicOldFreelanceProfileEdit__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicOldFreelanceProfileEdit__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicOldFreelanceProfileEdit__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOldFreelanceProfileEdit__ArgProps,
          internalVariantPropNames: PlasmicOldFreelanceProfileEdit__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOldFreelanceProfileEdit__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOldFreelanceProfileEdit";
  } else {
    func.displayName = `PlasmicOldFreelanceProfileEdit.${nodeName}`;
  }
  return func;
}

export const PlasmicOldFreelanceProfileEdit = Object.assign(
  // Top-level PlasmicOldFreelanceProfileEdit renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dashboardLayout: makeNodeComponent("dashboardLayout"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicOldFreelanceProfileEdit
    internalVariantProps: PlasmicOldFreelanceProfileEdit__VariantProps,
    internalArgProps: PlasmicOldFreelanceProfileEdit__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicOldFreelanceProfileEdit;
/* prettier-ignore-end */
