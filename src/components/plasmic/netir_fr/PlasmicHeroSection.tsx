/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: kIZTgKlwJdIm

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicHeroSection.module.css"; // plasmic-import: kIZTgKlwJdIm/css

import image3WLvExS5SNRt4 from "./images/image3.svg"; // plasmic-import: wLVExS5sNRt4/picture
import image4MhvSfKmCuHdq from "./images/image4.svg"; // plasmic-import: MhvSFKmCuHDQ/picture
import image44OGstJ0U836U from "./images/image44.svg"; // plasmic-import: OGstJ0U83_6u/picture

createPlasmicElementProxy;

export type PlasmicHeroSection__VariantMembers = {
  sansFond: "unnamedVariant";
};
export type PlasmicHeroSection__VariantsArgs = {
  sansFond?: MultiChoiceArg<"unnamedVariant">;
};
type VariantPropType = keyof PlasmicHeroSection__VariantsArgs;
export const PlasmicHeroSection__VariantProps = new Array<VariantPropType>(
  "sansFond"
);

export type PlasmicHeroSection__ArgsType = {
  nomFonction?: string;
  photoHero?: React.ComponentProps<typeof PlasmicImg__>["src"];
  fond2?: React.ComponentProps<typeof PlasmicImg__>["src"];
  blur2?: React.ComponentProps<typeof PlasmicImg__>["src"];
};
type ArgPropType = keyof PlasmicHeroSection__ArgsType;
export const PlasmicHeroSection__ArgProps = new Array<ArgPropType>(
  "nomFonction",
  "photoHero",
  "fond2",
  "blur2"
);

export type PlasmicHeroSection__OverridesType = {
  lucasHeroSection?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  blur?: Flex__<typeof PlasmicImg__>;
  fond?: Flex__<typeof PlasmicImg__>;
  hero?: Flex__<typeof PlasmicImg__>;
  lucasFreelanceUxUi?: Flex__<"div">;
};

export interface DefaultHeroSectionProps {
  nomFonction?: string;
  photoHero?: React.ComponentProps<typeof PlasmicImg__>["src"];
  fond2?: React.ComponentProps<typeof PlasmicImg__>["src"];
  blur2?: React.ComponentProps<typeof PlasmicImg__>["src"];
  sansFond?: MultiChoiceArg<"unnamedVariant">;
  className?: string;
}

const $$ = {};

function PlasmicHeroSection__RenderFunc(props: {
  variants: PlasmicHeroSection__VariantsArgs;
  args: PlasmicHeroSection__ArgsType;
  overrides: PlasmicHeroSection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          nomFonction: "Lucas - Freelance UX/UI",
          photoHero: {
            src: image3WLvExS5SNRt4,
            fullWidth: 210,
            fullHeight: 206,
            aspectRatio: 1.019417
          },
          fond2: {
            src: image4MhvSfKmCuHdq,
            fullWidth: 247,
            fullHeight: 235,
            aspectRatio: 1.051064
          },
          blur2: {
            src: image44OGstJ0U836U,
            fullWidth: 606,
            fullHeight: 653,
            aspectRatio: 0.928025
          }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sansFond",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.sansFond
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"lucasHeroSection"}
      data-plasmic-override={overrides.lucasHeroSection}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.lucasHeroSection,
        {
          [sty.lucasHeroSectionsansFond_unnamedVariant]: hasVariant(
            $state,
            "sansFond",
            "unnamedVariant"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <PlasmicImg__
          data-plasmic-name={"blur"}
          data-plasmic-override={overrides.blur}
          alt={""}
          className={classNames(sty.blur)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"540px"}
          loading={"lazy"}
          src={args.blur2}
        />

        <PlasmicImg__
          data-plasmic-name={"fond"}
          data-plasmic-override={overrides.fond}
          alt={""}
          className={classNames(sty.fond, {
            [sty.fondsansFond_unnamedVariant]: hasVariant(
              $state,
              "sansFond",
              "unnamedVariant"
            )
          })}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"350px"}
          loading={"lazy"}
          src={args.fond2}
        />

        <PlasmicImg__
          data-plasmic-name={"hero"}
          data-plasmic-override={overrides.hero}
          alt={""}
          className={classNames(sty.hero, {
            [sty.herosansFond_unnamedVariant]: hasVariant(
              $state,
              "sansFond",
              "unnamedVariant"
            )
          })}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={
            hasVariant($state, "sansFond", "unnamedVariant") ? "100%" : "85%"
          }
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"250px"}
          loading={"lazy"}
          src={args.photoHero}
        />

        <div
          data-plasmic-name={"lucasFreelanceUxUi"}
          data-plasmic-override={overrides.lucasFreelanceUxUi}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.lucasFreelanceUxUi,
            {
              [sty.lucasFreelanceUxUisansFond_unnamedVariant]: hasVariant(
                $state,
                "sansFond",
                "unnamedVariant"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.nomFonction;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Lucas - Freelance UX/UI";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  lucasHeroSection: [
    "lucasHeroSection",
    "freeBox",
    "blur",
    "fond",
    "hero",
    "lucasFreelanceUxUi"
  ],
  freeBox: ["freeBox", "blur", "fond", "hero", "lucasFreelanceUxUi"],
  blur: ["blur"],
  fond: ["fond"],
  hero: ["hero"],
  lucasFreelanceUxUi: ["lucasFreelanceUxUi"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  lucasHeroSection: "div";
  freeBox: "div";
  blur: typeof PlasmicImg__;
  fond: typeof PlasmicImg__;
  hero: typeof PlasmicImg__;
  lucasFreelanceUxUi: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeroSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeroSection__VariantsArgs;
    args?: PlasmicHeroSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicHeroSection__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicHeroSection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeroSection__ArgProps,
          internalVariantPropNames: PlasmicHeroSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeroSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "lucasHeroSection") {
    func.displayName = "PlasmicHeroSection";
  } else {
    func.displayName = `PlasmicHeroSection.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroSection = Object.assign(
  // Top-level PlasmicHeroSection renders the root element
  makeNodeComponent("lucasHeroSection"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    blur: makeNodeComponent("blur"),
    fond: makeNodeComponent("fond"),
    hero: makeNodeComponent("hero"),
    lucasFreelanceUxUi: makeNodeComponent("lucasFreelanceUxUi"),

    // Metadata about props expected for PlasmicHeroSection
    internalVariantProps: PlasmicHeroSection__VariantProps,
    internalArgProps: PlasmicHeroSection__ArgProps
  }
);

export default PlasmicHeroSection;
/* prettier-ignore-end */
