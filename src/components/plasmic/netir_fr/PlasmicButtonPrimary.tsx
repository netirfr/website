/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: byb1-I0x_v8X

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { BaseButton } from "@plasmicpkgs/react-aria/skinny/registerButton";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicButtonPrimary.module.css"; // plasmic-import: byb1-I0x_v8X/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: 99U4uMxg1jkf/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: FEzuhm3U7mDW/icon

createPlasmicElementProxy;

export type PlasmicButtonPrimary__VariantMembers = {
  color: "buttonNoirModifier2";
  type: "soft" | "bordered";
  iconEnd: "iconEnd";
};
export type PlasmicButtonPrimary__VariantsArgs = {
  color?: SingleChoiceArg<"buttonNoirModifier2">;
  type?: SingleChoiceArg<"soft" | "bordered">;
  iconEnd?: SingleBooleanChoiceArg<"iconEnd">;
};
type VariantPropType = keyof PlasmicButtonPrimary__VariantsArgs;
export const PlasmicButtonPrimary__VariantProps = new Array<VariantPropType>(
  "color",
  "type",
  "iconEnd"
);

export type PlasmicButtonPrimary__ArgsType = {
  onColorChange2?: (val: any) => void;
  disabled?: boolean;
  submitsForm?: boolean;
  resetsForm?: boolean;
  ariaLabel?: string;
  onClick?: (event: any) => void;
  onTypeChange?: (val: any) => void;
  linkTo?: string;
  openLinkInNewTab?: boolean;
  destination?: string;
  hoverBack?: any;
  interactionEffect2?: React.ReactNode;
  start?: React.ReactNode;
  label?: React.ReactNode;
  end?: React.ReactNode;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicButtonPrimary__ArgsType;
export const PlasmicButtonPrimary__ArgProps = new Array<ArgPropType>(
  "onColorChange2",
  "disabled",
  "submitsForm",
  "resetsForm",
  "ariaLabel",
  "onClick",
  "onTypeChange",
  "linkTo",
  "openLinkInNewTab",
  "destination",
  "hoverBack",
  "interactionEffect2",
  "start",
  "label",
  "end",
  "children"
);

export type PlasmicButtonPrimary__OverridesType = {
  root?: Flex__<typeof BaseButton>;
  softBackground?: Flex__<"div">;
  border?: Flex__<"div">;
};

export interface DefaultButtonPrimaryProps {
  onColorChange2?: (val: any) => void;
  disabled?: boolean;
  submitsForm?: boolean;
  resetsForm?: boolean;
  ariaLabel?: string;
  onClick?: (event: any) => void;
  onTypeChange?: (val: any) => void;
  linkTo?: string;
  openLinkInNewTab?: boolean;
  destination?: string;
  hoverBack?: any;
  interactionEffect2?: React.ReactNode;
  start?: React.ReactNode;
  label?: React.ReactNode;
  end?: React.ReactNode;
  children?: React.ReactNode;
  color?: SingleChoiceArg<"buttonNoirModifier2">;
  type?: SingleChoiceArg<"soft" | "bordered">;
  iconEnd?: SingleBooleanChoiceArg<"iconEnd">;
  className?: string;
}

const $$ = {};

function PlasmicButtonPrimary__RenderFunc(props: {
  variants: PlasmicButtonPrimary__VariantsArgs;
  args: PlasmicButtonPrimary__ArgsType;
  overrides: PlasmicButtonPrimary__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          disabled: false,
          linkTo: "",
          openLinkInNewTab: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "color",
        type: "writable",
        variableType: "variant",

        valueProp: "color",
        onChangeProp: "onColorChange2"
      },
      {
        path: "iconEnd",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.iconEnd
      },
      {
        path: "type",
        type: "writable",
        variableType: "variant",

        valueProp: "type",
        onChangeProp: "onTypeChange"
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  const [$ccVariants, setDollarCcVariants] = React.useState<
    Record<string, boolean>
  >({
    hovered: false,
    pressed: false,
    focused: false,
    focusVisible: false,
    disabled: false
  });
  const updateVariant = React.useCallback(
    (changes: Record<string, boolean>) => {
      setDollarCcVariants(prev => {
        if (!Object.keys(changes).some(k => prev[k] !== changes[k])) {
          return prev;
        }
        return { ...prev, ...changes };
      });
    },
    []
  );

  return (
    <BaseButton
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      aria-label={args.ariaLabel}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootcolor_buttonNoirModifier2]: hasVariant(
            $state,
            "color",
            "buttonNoirModifier2"
          ),
          [sty.rooticonEnd]: hasVariant($state, "iconEnd", "iconEnd"),
          [sty.roottype_bordered]: hasVariant($state, "type", "bordered"),
          [sty.roottype_soft]: hasVariant($state, "type", "soft")
        }
      )}
      href={args.linkTo}
      isDisabled={args.disabled}
      onFocus={args.onClick}
      onPress={async event => {
        const $steps = {};

        $steps["goToPage"] = true
          ? (() => {
              const actionArgs = {
                destination: (() => {
                  try {
                    return $props.linkTo;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              };
              return (({ destination }) => {
                if (
                  typeof destination === "string" &&
                  destination.startsWith("#")
                ) {
                  document
                    .getElementById(destination.substr(1))
                    .scrollIntoView({ behavior: "smooth" });
                } else {
                  __gatsbyNavigate(destination);
                }
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["goToPage"] != null &&
          typeof $steps["goToPage"] === "object" &&
          typeof $steps["goToPage"].then === "function"
        ) {
          $steps["goToPage"] = await $steps["goToPage"];
        }
      }}
      plasmicUpdateVariant={updateVariant}
      resetsForm={args.resetsForm}
      submitsForm={args.submitsForm}
      target={(() => {
        try {
          return $props.openLinkInNewTab ? "_blank" : "_self";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
    >
      <div
        data-plasmic-name={"softBackground"}
        data-plasmic-override={overrides.softBackground}
        className={classNames(projectcss.all, sty.softBackground, {
          [sty.softBackgroundtype_bordered]: hasVariant(
            $state,
            "type",
            "bordered"
          ),
          [sty.softBackgroundtype_soft]: hasVariant($state, "type", "soft")
        })}
      />

      <div
        data-plasmic-name={"border"}
        data-plasmic-override={overrides.border}
        className={classNames(projectcss.all, sty.border, {
          [sty.bordertype_bordered]: hasVariant($state, "type", "bordered"),
          [sty.bordertype_soft]: hasVariant($state, "type", "soft")
        })}
      />

      {renderPlasmicSlot({
        defaultContents: (
          <div className={classNames(projectcss.all, sty.freeBox__xyzcU)} />
        ),

        value: args.interactionEffect2
      })}
      <div
        className={classNames(projectcss.all, sty.freeBox__jMl8D, {
          [sty.freeBoxtype_bordered__jMl8DjoFw9]: hasVariant(
            $state,
            "type",
            "bordered"
          ),
          [sty.freeBoxtype_soft__jMl8DbMkRm]: hasVariant($state, "type", "soft")
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__b3GzH, {
            [sty.freeBoxtype_bordered__b3GzHjoFw9]: hasVariant(
              $state,
              "type",
              "bordered"
            ),
            [sty.freeBoxtype_soft__b3GzHbMkRm]: hasVariant(
              $state,
              "type",
              "soft"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <CircleIcon
                className={classNames(projectcss.all, sty.svg___0N8JJ)}
                role={"img"}
              />
            ),

            value: args.start,
            className: classNames(sty.slotTargetStart, {
              [sty.slotTargetStarttype_bordered]: hasVariant(
                $state,
                "type",
                "bordered"
              ),
              [sty.slotTargetStarttype_soft]: hasVariant($state, "type", "soft")
            })
          })}
        </div>
        {renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oa9Ow
              )}
            >
              {"texte"}
            </div>
          ),
          value: args.label,
          className: classNames(sty.slotTargetLabel, {
            [sty.slotTargetLabeliconEnd]: hasVariant(
              $state,
              "iconEnd",
              "iconEnd"
            ),
            [sty.slotTargetLabeltype_bordered]: hasVariant(
              $state,
              "type",
              "bordered"
            ),
            [sty.slotTargetLabeltype_soft]: hasVariant($state, "type", "soft")
          })
        })}
        <div
          className={classNames(projectcss.all, sty.freeBox__bc6Cp, {
            [sty.freeBoxiconEnd__bc6Cp5Vr7I]: hasVariant(
              $state,
              "iconEnd",
              "iconEnd"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <ChevronDownIcon
                className={classNames(projectcss.all, sty.svg__xhVyC)}
                role={"img"}
              />
            ),

            value: args.end,
            className: classNames(sty.slotTargetEnd, {
              [sty.slotTargetEndiconEnd]: hasVariant(
                $state,
                "iconEnd",
                "iconEnd"
              ),
              [sty.slotTargetEndtype_bordered]: hasVariant(
                $state,
                "type",
                "bordered"
              ),
              [sty.slotTargetEndtype_soft]: hasVariant($state, "type", "soft")
            })
          })}
        </div>
      </div>
      {false ? (
        <div
          className={classNames(projectcss.all, sty.freeBox___0Lpmr)}
          onClick={async event => {
            const $steps = {};

            $steps["goToCompanyMissionsModifierMissions"] = true
              ? (() => {
                  const actionArgs = {
                    destination: `/company/missions/modifier-missions`
                  };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __gatsbyNavigate(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToCompanyMissionsModifierMissions"] != null &&
              typeof $steps["goToCompanyMissionsModifierMissions"] ===
                "object" &&
              typeof $steps["goToCompanyMissionsModifierMissions"].then ===
                "function"
            ) {
              $steps["goToCompanyMissionsModifierMissions"] =
                await $steps["goToCompanyMissionsModifierMissions"];
            }
          }}
        >
          <div className={classNames(projectcss.all, sty.freeBox___8HOye)}>
            {renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tJqpa
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "var(--token-bTfc8s3xNwDj)" }}
                    >
                      {"Modifier"}
                    </span>
                  </React.Fragment>
                </div>
              ),
              value: args.children,
              className: classNames(sty.slotTargetChildren)
            })}
          </div>
        </div>
      ) : null}
    </BaseButton>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "softBackground", "border"],
  softBackground: ["softBackground"],
  border: ["border"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof BaseButton;
  softBackground: "div";
  border: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButtonPrimary__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButtonPrimary__VariantsArgs;
    args?: PlasmicButtonPrimary__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicButtonPrimary__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicButtonPrimary__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicButtonPrimary__ArgProps,
          internalVariantPropNames: PlasmicButtonPrimary__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicButtonPrimary__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButtonPrimary";
  } else {
    func.displayName = `PlasmicButtonPrimary.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonPrimary = Object.assign(
  // Top-level PlasmicButtonPrimary renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    softBackground: makeNodeComponent("softBackground"),
    border: makeNodeComponent("border"),

    // Metadata about props expected for PlasmicButtonPrimary
    internalVariantProps: PlasmicButtonPrimary__VariantProps,
    internalArgProps: PlasmicButtonPrimary__ArgProps
  }
);

export default PlasmicButtonPrimary;
/* prettier-ignore-end */
