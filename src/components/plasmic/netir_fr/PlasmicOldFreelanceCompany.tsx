/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: ZG2k50gQwrlQ

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import DashboardDashboardLayout from "../../DashboardDashboardLayout"; // plasmic-import: KS-1W6sGklIw/component
import NavNavItem from "../../NavNavItem"; // plasmic-import: emjpN_Inho3r/component
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import SwitchMyOwnSwitch from "../../SwitchMyOwnSwitch"; // plasmic-import: grg6bA13A4jK/component
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicOldFreelanceCompany.module.css"; // plasmic-import: ZG2k50gQwrlQ/css

import BurgerMenuIcon from "./icons/PlasmicIcon__BurgerMenu"; // plasmic-import: uiLqCVdai7zb/icon
import MessageSquareDotsSvgrepoComSvgIcon from "./icons/PlasmicIcon__MessageSquareDotsSvgrepoComSvg"; // plasmic-import: lo8y0dFHgTSz/icon
import BusinessFinanceInvoiceSvgrepoComSvgIcon from "./icons/PlasmicIcon__BusinessFinanceInvoiceSvgrepoComSvg"; // plasmic-import: dSOi0A0BQDwy/icon
import EnterpriseSvgrepoComSvgIcon from "./icons/PlasmicIcon__EnterpriseSvgrepoComSvg"; // plasmic-import: HC2LKgzu4-0d/icon
import User2SvgrepoComSvgIcon from "./icons/PlasmicIcon__User2SvgrepoComSvg"; // plasmic-import: yXbiP_2IZqD3/icon
import WarningTriangleSvgrepoComSvgIcon from "./icons/PlasmicIcon__WarningTriangleSvgrepoComSvg"; // plasmic-import: pfAlygKF7OoM/icon
import CapEducationHatSvgrepoComSvgIcon from "./icons/PlasmicIcon__CapEducationHatSvgrepoComSvg"; // plasmic-import: km4JQm5jTwhK/icon

createPlasmicElementProxy;

export type PlasmicOldFreelanceCompany__VariantMembers = {};
export type PlasmicOldFreelanceCompany__VariantsArgs = {};
type VariantPropType = keyof PlasmicOldFreelanceCompany__VariantsArgs;
export const PlasmicOldFreelanceCompany__VariantProps =
  new Array<VariantPropType>();

export type PlasmicOldFreelanceCompany__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicOldFreelanceCompany__ArgsType;
export const PlasmicOldFreelanceCompany__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicOldFreelanceCompany__OverridesType = {
  root?: Flex__<"div">;
  dashboardLayout?: Flex__<typeof DashboardDashboardLayout>;
  columns?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  form?: Flex__<typeof FormWrapper>;
  input?: Flex__<typeof AntdInput>;
  input2?: Flex__<typeof AntdInput>;
  input3?: Flex__<typeof AntdInput>;
  input4?: Flex__<typeof AntdInput>;
  input5?: Flex__<typeof AntdInput>;
  switchMyOwnSwitch?: Flex__<typeof SwitchMyOwnSwitch>;
  input6?: Flex__<typeof AntdInput>;
  input7?: Flex__<typeof AntdInput>;
  textArea?: Flex__<typeof AntdTextArea>;
  input9?: Flex__<typeof AntdInput>;
  input10?: Flex__<typeof AntdInput>;
  input11?: Flex__<typeof AntdInput>;
  button?: Flex__<typeof AntdButton>;
};

export interface DefaultOldFreelanceCompanyProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

const $$ = {};

export function Head() {
  return <></>;
}

function PlasmicOldFreelanceCompany__RenderFunc(props: {
  variants: PlasmicOldFreelanceCompany__VariantsArgs;
  args: PlasmicOldFreelanceCompany__ArgsType;
  overrides: PlasmicOldFreelanceCompany__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "dashboardLayout.isSidebarOpenn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "input10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__z92Lz)}>
            <BurgerMenuIcon
              className={classNames(projectcss.all, sty.svg__ynJWz)}
              onClick={async event => {
                const $steps = {};

                $steps["updateDashboardLayoutIsSidebarOpenn"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dashboardLayout", "isSidebarOpenn"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDashboardLayoutIsSidebarOpenn"] != null &&
                  typeof $steps["updateDashboardLayoutIsSidebarOpenn"] ===
                    "object" &&
                  typeof $steps["updateDashboardLayoutIsSidebarOpenn"].then ===
                    "function"
                ) {
                  $steps["updateDashboardLayoutIsSidebarOpenn"] =
                    await $steps["updateDashboardLayoutIsSidebarOpenn"];
                }
              }}
              role={"img"}
            />
          </div>
          <DashboardDashboardLayout
            data-plasmic-name={"dashboardLayout"}
            data-plasmic-override={overrides.dashboardLayout}
            children2={
              <React.Fragment>
                <NavNavItem
                  className={classNames(
                    "__wab_instance",
                    sty.navNavItem___7C3Y
                  )}
                  slot={
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem___3Jro4
                      )}
                      key={"menuItemKey1"}
                      onClick={async () => {
                        const $steps = {};

                        $steps["goToFreelanceMissions"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: `/freelance/company`
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __gatsbyNavigate(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToFreelanceMissions"] != null &&
                          typeof $steps["goToFreelanceMissions"] === "object" &&
                          typeof $steps["goToFreelanceMissions"].then ===
                            "function"
                        ) {
                          $steps["goToFreelanceMissions"] =
                            await $steps["goToFreelanceMissions"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__h2Gww
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 400 }}
                          >
                            {"Entreprise"}
                          </span>
                        </React.Fragment>
                      </div>
                    </AntdMenuItem>
                  }
                >
                  <EnterpriseSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg___9GiYx)}
                    role={"img"}
                  />
                </NavNavItem>
                <NavNavItem
                  className={classNames(
                    "__wab_instance",
                    sty.navNavItem__gdRvf
                  )}
                  slot={
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__aHsN
                      )}
                      key={"menuItemKey1"}
                      onClick={async () => {
                        const $steps = {};

                        $steps["goToFreelanceMissions"] = true
                          ? (() => {
                              const actionArgs = { destination: `/profile` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __gatsbyNavigate(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToFreelanceMissions"] != null &&
                          typeof $steps["goToFreelanceMissions"] === "object" &&
                          typeof $steps["goToFreelanceMissions"].then ===
                            "function"
                        ) {
                          $steps["goToFreelanceMissions"] =
                            await $steps["goToFreelanceMissions"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cZgZ
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 400 }}
                          >
                            {"Profil"}
                          </span>
                        </React.Fragment>
                      </div>
                    </AntdMenuItem>
                  }
                >
                  <User2SvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__kTmNh)}
                    role={"img"}
                  />
                </NavNavItem>
              </React.Fragment>
            }
            children3={
              <NavNavItem
                className={classNames("__wab_instance", sty.navNavItem__takdX)}
                slot={
                  <AntdMenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.menuItem__ljLiy
                    )}
                    key={"menuItemKey1"}
                    onClick={async () => {
                      const $steps = {};

                      $steps["goToFreelanceCompany"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/freelance/company`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __gatsbyNavigate(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToFreelanceCompany"] != null &&
                        typeof $steps["goToFreelanceCompany"] === "object" &&
                        typeof $steps["goToFreelanceCompany"].then ===
                          "function"
                      ) {
                        $steps["goToFreelanceCompany"] =
                          await $steps["goToFreelanceCompany"];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gNerB
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 400 }}
                        >
                          {"Devenir mentor"}
                        </span>
                      </React.Fragment>
                    </div>
                  </AntdMenuItem>
                }
              >
                <CapEducationHatSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__eslr)}
                  role={"img"}
                />
              </NavNavItem>
            }
            className={classNames("__wab_instance", sty.dashboardLayout)}
            isSidebarOpenn={generateStateValueProp($state, [
              "dashboardLayout",
              "isSidebarOpenn"
            ])}
            onIsSidebarOpennChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dashboardLayout",
                "isSidebarOpenn"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            slot={
              <React.Fragment>
                <div
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__xSyIt)}
                  >
                    {renderPlasmicSlot({
                      defaultContents: (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fBtN
                          )}
                        >
                          {"Mon entreprise"}
                        </div>
                      ),
                      value: args.slot,
                      className: classNames(sty.slotTargetSlot)
                    })}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column___9Dcou)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__n6LsE
                      )}
                    >
                      {"Profil d'entreprise \u00e0 compl\u00e9ter\r\n"}
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__iaEh4)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wo3I0)}
                  >
                    <WarningTriangleSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg___5Ntps)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oMOk
                      )}
                    >
                      {
                        "Afin de pouvoir participer \u00e0 des missions, tu dois d'abord compl\u00e9ter tous les champs comprenant une ast\u00e9risque*. (Dur\u00e9e estim\u00e9e: 1 minute.)"
                      }
                    </div>
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bYjM
                  )}
                >
                  {"Compte de paiement\r"}
                </div>
                <PlasmicLink__
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link
                  )}
                  component={Link}
                  platform={"gatsby"}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{
                        fontWeight: 400,
                        color: "var(--token-aAKoBM1ZnH0f)"
                      }}
                    >
                      {"Ajouter un compte de paiement"}
                    </span>
                  </React.Fragment>
                </PlasmicLink__>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form),
                    extendedOnValuesChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form", "value"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onIsSubmittingChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form", "isSubmitting"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    ref: ref => {
                      $refs["form"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"form"}
                      data-plasmic-override={overrides.form}
                      {...child$Props}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__irwKn
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gfUfh
                            )}
                          >
                            {"Nom d'usage"}
                          </div>
                        }
                        name={"Nom d'usage"}
                        rules={[{ ruleType: "required" }]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            value: generateStateValueProp($state, [
                              "input",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input"}
                              data-plasmic-override={overrides.input}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__yn4Ny
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zk7Oz
                            )}
                          >
                            {"Nom commercial"}
                          </div>
                        }
                        name={"Nom commercial"}
                        rules={[{ ruleType: "required" }]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input2),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input2", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            value: generateStateValueProp($state, [
                              "input2",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input2.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input2"}
                              data-plasmic-override={overrides.input2}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__nWVoO
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gppb7
                            )}
                          >
                            {"Adresse"}
                          </div>
                        }
                        name={"Adresse"}
                        rules={[{ ruleType: "required" }]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input3),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input3", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            value: generateStateValueProp($state, [
                              "input3",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input3.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input3"}
                              data-plasmic-override={overrides.input3}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__dMNy
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___1C82
                            )}
                          >
                            {"Num\u00e9ro Siren"}
                          </div>
                        }
                        name={"Num\u00e9ro Siren"}
                        rules={[{ ruleType: "required" }]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input4),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input4", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            value: generateStateValueProp($state, [
                              "input4",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input4.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input4"}
                              data-plasmic-override={overrides.input4}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__zVsvh
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bYmuO
                            )}
                          >
                            {"Code APE"}
                          </div>
                        }
                        name={"Code APE*"}
                        rules={[{ ruleType: "required" }]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input5),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input5", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            value: generateStateValueProp($state, [
                              "input5",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input5.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input5"}
                              data-plasmic-override={overrides.input5}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__fiqYb
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__azbDi
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kyQkn
                              )}
                            >
                              {"Num\u00e9ro de TVA intracommunautaire\r"}
                            </div>
                            <SwitchMyOwnSwitch
                              data-plasmic-name={"switchMyOwnSwitch"}
                              data-plasmic-override={
                                overrides.switchMyOwnSwitch
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.switchMyOwnSwitch
                              )}
                            />
                          </div>
                        }
                        name={"name"}
                        rules={[{ ruleType: "required" }]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input6),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input6", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            value: generateStateValueProp($state, [
                              "input6",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input6.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input6"}
                              data-plasmic-override={overrides.input6}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__npqZj
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__z5Gne
                            )}
                          >
                            {"Statut juridique"}
                          </div>
                        }
                        name={"Statut juridique"}
                        rules={[{ ruleType: "required" }]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input7),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input7", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            value: generateStateValueProp($state, [
                              "input7",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input7.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input7"}
                              data-plasmic-override={overrides.input7}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___4WxZ
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lAlmX
                            )}
                          >
                            {"Document d'identification de l'entreprise"}
                          </div>
                        }
                        name={"Document d'identification de l'entreprise"}
                        rules={[{ ruleType: "required" }]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.textArea
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["textArea", "value"],
                                AntdTextArea_Helpers
                              ).apply(null, eventArgs);
                            },
                            value: generateStateValueProp($state, [
                              "textArea",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "textArea.value"
                              }
                            ],
                            [],
                            AntdTextArea_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdTextArea
                              data-plasmic-name={"textArea"}
                              data-plasmic-override={overrides.textArea}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zGtuF
                        )}
                      >
                        {
                          "Pour les soci\u00e9t\u00e9s: Extrait Kbis de moins de 3 mois (monidenum.fr)\r"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uv8To
                        )}
                      >
                        {
                          "Pour les auto-entrepreneurs: Attestation RNE (data.inpi.fr)\r"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__no3Db
                        )}
                      >
                        {
                          "Pour les professions lib\u00e9rales: Attestation de situation SIRENE (avis-situation-sirene.insee.fr)\r\n\r"
                        }
                      </div>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__f5Mu1
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__psWdQ
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 500 }}
                              >
                                {"Responsabilit\u00e9 civile"}
                              </span>
                            </React.Fragment>
                          </div>
                        }
                        name={"Responsabilit\u00e9 civile"}
                        rules={[{ ruleType: "required" }]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input9),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input9", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            value: generateStateValueProp($state, [
                              "input9",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input9.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input9"}
                              data-plasmic-override={overrides.input9}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___9UY
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0NhOa
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 500 }}
                              >
                                {"Attestation de vigilance\r\n\r"}
                              </span>
                            </React.Fragment>
                          </div>
                        }
                        name={
                          "Champs obligatoires pour avoir un profil complet"
                        }
                        rules={[{ ruleType: "required" }]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.input10
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input10", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            value: generateStateValueProp($state, [
                              "input10",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input10.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input10"}
                              data-plasmic-override={overrides.input10}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___1KKxk
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___6EUh
                            )}
                          >
                            {
                              " Champs obligatoires pour avoir un profil complet\r\n\r"
                            }
                          </div>
                        }
                        name={
                          "Champs obligatoires pour avoir un profil complet"
                        }
                        rules={[{ ruleType: "required" }]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.input11
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input11", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            value: generateStateValueProp($state, [
                              "input11",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input11.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input11"}
                              data-plasmic-override={overrides.input11}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <AntdButton
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                        size={"medium"}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oPhP
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 600 }}
                            >
                              {"Enregistrer mes informations"}
                            </span>
                          </React.Fragment>
                        </div>
                      </AntdButton>
                    </FormWrapper>
                  );
                })()}
              </React.Fragment>
            }
          >
            {renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <NavNavItem
                    className={classNames(
                      "__wab_instance",
                      sty.navNavItem__uOxG
                    )}
                    slot={
                      <AntdMenuItem
                        className={classNames(
                          "__wab_instance",
                          sty.menuItem__s4NPf
                        )}
                        key={"menuItemKey1"}
                        onClick={async () => {
                          const $steps = {};

                          $steps["goToFreelanceMissions"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: `/freelance/missions`
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __gatsbyNavigate(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToFreelanceMissions"] != null &&
                            typeof $steps["goToFreelanceMissions"] ===
                              "object" &&
                            typeof $steps["goToFreelanceMissions"].then ===
                              "function"
                          ) {
                            $steps["goToFreelanceMissions"] =
                              await $steps["goToFreelanceMissions"];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qJlK
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 400 }}
                            >
                              {"Missions"}
                            </span>
                          </React.Fragment>
                        </div>
                      </AntdMenuItem>
                    }
                  >
                    <MessageSquareDotsSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__pEdub)}
                      role={"img"}
                    />
                  </NavNavItem>
                  <NavNavItem
                    className={classNames(
                      "__wab_instance",
                      sty.navNavItem__se3Cx
                    )}
                    slot={
                      <AntdMenuItem
                        className={classNames(
                          "__wab_instance",
                          sty.menuItem__l3UGa
                        )}
                        key={"menuItemKey1"}
                        onClick={async () => {
                          const $steps = {};

                          $steps["goToFreelanceMissions"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: `/freelance/invoices`
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __gatsbyNavigate(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToFreelanceMissions"] != null &&
                            typeof $steps["goToFreelanceMissions"] ===
                              "object" &&
                            typeof $steps["goToFreelanceMissions"].then ===
                              "function"
                          ) {
                            $steps["goToFreelanceMissions"] =
                              await $steps["goToFreelanceMissions"];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hFyE
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 400 }}
                            >
                              {"Factures"}
                            </span>
                          </React.Fragment>
                        </div>
                      </AntdMenuItem>
                    }
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9CX6Z
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return undefined;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </React.Fragment>
              ),
              value: args.children
            })}
          </DashboardDashboardLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "dashboardLayout",
    "columns",
    "link",
    "form",
    "input",
    "input2",
    "input3",
    "input4",
    "input5",
    "switchMyOwnSwitch",
    "input6",
    "input7",
    "textArea",
    "input9",
    "input10",
    "input11",
    "button"
  ],
  dashboardLayout: [
    "dashboardLayout",
    "columns",
    "link",
    "form",
    "input",
    "input2",
    "input3",
    "input4",
    "input5",
    "switchMyOwnSwitch",
    "input6",
    "input7",
    "textArea",
    "input9",
    "input10",
    "input11",
    "button"
  ],
  columns: ["columns"],
  link: ["link"],
  form: [
    "form",
    "input",
    "input2",
    "input3",
    "input4",
    "input5",
    "switchMyOwnSwitch",
    "input6",
    "input7",
    "textArea",
    "input9",
    "input10",
    "input11",
    "button"
  ],
  input: ["input"],
  input2: ["input2"],
  input3: ["input3"],
  input4: ["input4"],
  input5: ["input5"],
  switchMyOwnSwitch: ["switchMyOwnSwitch"],
  input6: ["input6"],
  input7: ["input7"],
  textArea: ["textArea"],
  input9: ["input9"],
  input10: ["input10"],
  input11: ["input11"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dashboardLayout: typeof DashboardDashboardLayout;
  columns: "div";
  link: "a";
  form: typeof FormWrapper;
  input: typeof AntdInput;
  input2: typeof AntdInput;
  input3: typeof AntdInput;
  input4: typeof AntdInput;
  input5: typeof AntdInput;
  switchMyOwnSwitch: typeof SwitchMyOwnSwitch;
  input6: typeof AntdInput;
  input7: typeof AntdInput;
  textArea: typeof AntdTextArea;
  input9: typeof AntdInput;
  input10: typeof AntdInput;
  input11: typeof AntdInput;
  button: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOldFreelanceCompany__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOldFreelanceCompany__VariantsArgs;
    args?: PlasmicOldFreelanceCompany__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicOldFreelanceCompany__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicOldFreelanceCompany__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOldFreelanceCompany__ArgProps,
          internalVariantPropNames: PlasmicOldFreelanceCompany__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOldFreelanceCompany__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOldFreelanceCompany";
  } else {
    func.displayName = `PlasmicOldFreelanceCompany.${nodeName}`;
  }
  return func;
}

export const PlasmicOldFreelanceCompany = Object.assign(
  // Top-level PlasmicOldFreelanceCompany renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dashboardLayout: makeNodeComponent("dashboardLayout"),
    columns: makeNodeComponent("columns"),
    link: makeNodeComponent("link"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    input3: makeNodeComponent("input3"),
    input4: makeNodeComponent("input4"),
    input5: makeNodeComponent("input5"),
    switchMyOwnSwitch: makeNodeComponent("switchMyOwnSwitch"),
    input6: makeNodeComponent("input6"),
    input7: makeNodeComponent("input7"),
    textArea: makeNodeComponent("textArea"),
    input9: makeNodeComponent("input9"),
    input10: makeNodeComponent("input10"),
    input11: makeNodeComponent("input11"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicOldFreelanceCompany
    internalVariantProps: PlasmicOldFreelanceCompany__VariantProps,
    internalArgProps: PlasmicOldFreelanceCompany__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicOldFreelanceCompany;
/* prettier-ignore-end */
