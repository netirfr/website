/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: fOPPhGthRv7y

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicHomepageQuatuor.module.css"; // plasmic-import: fOPPhGthRv7y/css

import image5Qx3YxbmsGlP6 from "./images/image5.svg"; // plasmic-import: Qx3YxbmsGlP6/picture

createPlasmicElementProxy;

export type PlasmicHomepageQuatuor__VariantMembers = {
  mobile: "unnamedVariant";
};
export type PlasmicHomepageQuatuor__VariantsArgs = {
  mobile?: MultiChoiceArg<"unnamedVariant">;
};
type VariantPropType = keyof PlasmicHomepageQuatuor__VariantsArgs;
export const PlasmicHomepageQuatuor__VariantProps = new Array<VariantPropType>(
  "mobile"
);

export type PlasmicHomepageQuatuor__ArgsType = {
  n?: number;
  nom?: string;
  description?: string;
  vector?: React.ComponentProps<typeof PlasmicImg__>["src"];
  liens?: string;
};
type ArgPropType = keyof PlasmicHomepageQuatuor__ArgsType;
export const PlasmicHomepageQuatuor__ArgProps = new Array<ArgPropType>(
  "n",
  "nom",
  "description",
  "vector",
  "liens"
);

export type PlasmicHomepageQuatuor__OverridesType = {
  frame313777?: Flex__<"div">;
  frame313784?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  freeBox?: Flex__<"div">;
};

export interface DefaultHomepageQuatuorProps {
  n?: number;
  nom?: string;
  description?: string;
  vector?: React.ComponentProps<typeof PlasmicImg__>["src"];
  liens?: string;
  mobile?: MultiChoiceArg<"unnamedVariant">;
  className?: string;
}

const $$ = {};

function PlasmicHomepageQuatuor__RenderFunc(props: {
  variants: PlasmicHomepageQuatuor__VariantsArgs;
  args: PlasmicHomepageQuatuor__ArgsType;
  overrides: PlasmicHomepageQuatuor__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          n: 1,
          nom: "Le freelance",
          description:
            "monte en comp\u00e9tence gr\u00e2ce au mentor pour surpasser les objectifs de l'entreprise.",
          vector: {
            src: image5Qx3YxbmsGlP6,
            fullWidth: 45,
            fullHeight: 40,
            aspectRatio: 1.125
          }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "mobile",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.mobile
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"frame313777"}
      data-plasmic-override={overrides.frame313777}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.frame313777,
        {
          [sty.frame313777mobile_unnamedVariant]: hasVariant(
            $state,
            "mobile",
            "unnamedVariant"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"frame313784"}
        data-plasmic-override={overrides.frame313784}
        className={classNames(projectcss.all, sty.frame313784)}
      >
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img, {
            [sty.imgmobile_unnamedVariant]: hasVariant(
              $state,
              "mobile",
              "unnamedVariant"
            )
          })}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant($state, "mobile", "unnamedVariant") ? "25px" : "45px"
          }
          loading={"lazy"}
          src={args.vector}
        />

        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxmobile_unnamedVariant]: hasVariant(
              $state,
              "mobile",
              "unnamedVariant"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__uY1SU,
              {
                [sty.textmobile_unnamedVariant__uY1SU3OivN]: hasVariant(
                  $state,
                  "mobile",
                  "unnamedVariant"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.n;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "1";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dzUze,
              {
                [sty.textmobile_unnamedVariant__dzUze3OivN]: hasVariant(
                  $state,
                  "mobile",
                  "unnamedVariant"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.nom;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Le freelance";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__lNup,
          {
            [sty.textmobile_unnamedVariant__lNup3OivN]: hasVariant(
              $state,
              "mobile",
              "unnamedVariant"
            )
          }
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.description;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "monte en comp\u00e9tence gr\u00e2ce au mentor pour surpasser les objectifs de l'entreprise.";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame313777: ["frame313777", "frame313784", "img", "freeBox"],
  frame313784: ["frame313784", "img", "freeBox"],
  img: ["img"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame313777: "div";
  frame313784: "div";
  img: typeof PlasmicImg__;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepageQuatuor__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepageQuatuor__VariantsArgs;
    args?: PlasmicHomepageQuatuor__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicHomepageQuatuor__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicHomepageQuatuor__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepageQuatuor__ArgProps,
          internalVariantPropNames: PlasmicHomepageQuatuor__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepageQuatuor__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame313777") {
    func.displayName = "PlasmicHomepageQuatuor";
  } else {
    func.displayName = `PlasmicHomepageQuatuor.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepageQuatuor = Object.assign(
  // Top-level PlasmicHomepageQuatuor renders the root element
  makeNodeComponent("frame313777"),
  {
    // Helper components rendering sub-elements
    frame313784: makeNodeComponent("frame313784"),
    img: makeNodeComponent("img"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicHomepageQuatuor
    internalVariantProps: PlasmicHomepageQuatuor__VariantProps,
    internalArgProps: PlasmicHomepageQuatuor__ArgProps
  }
);

export default PlasmicHomepageQuatuor;
/* prettier-ignore-end */
