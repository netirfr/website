/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: N3B2_amtFUoM

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TypeCompte from "../../TypeCompte"; // plasmic-import: aucno-nNxHPh/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicOldInscription.module.css"; // plasmic-import: N3B2_amtFUoM/css

import image61SMcC1UjheNqc from "./images/image61.svg"; // plasmic-import: SMcC1UjheNQC/picture
import logoTextBlackColorBgWhite1500PngBSyZCbzPXsht from "./images/logoTextBlackColorBgWhite1500Png.png"; // plasmic-import: BSyZCbzPXsht/picture

createPlasmicElementProxy;

export type PlasmicOldInscription__VariantMembers = {};
export type PlasmicOldInscription__VariantsArgs = {};
type VariantPropType = keyof PlasmicOldInscription__VariantsArgs;
export const PlasmicOldInscription__VariantProps = new Array<VariantPropType>();

export type PlasmicOldInscription__ArgsType = {};
type ArgPropType = keyof PlasmicOldInscription__ArgsType;
export const PlasmicOldInscription__ArgProps = new Array<ArgPropType>();

export type PlasmicOldInscription__OverridesType = {
  root?: Flex__<"div">;
  body?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  h1?: Flex__<"h1">;
};

export interface DefaultOldInscriptionProps {
  className?: string;
}

const $$ = {};

export function Head() {
  return (
    <>
      <meta name="twitter:card" content="summary_large_image" />
      <title key="title">{PlasmicOldInscription.pageMetadata.title}</title>
      <meta
        key="og:title"
        property="og:title"
        content={PlasmicOldInscription.pageMetadata.title}
      />
      <meta
        key="twitter:title"
        name="twitter:title"
        content={PlasmicOldInscription.pageMetadata.title}
      />
      <meta
        key="description"
        name="description"
        content={PlasmicOldInscription.pageMetadata.description}
      />
      <meta
        key="og:description"
        property="og:description"
        content={PlasmicOldInscription.pageMetadata.description}
      />
      <meta
        key="twitter:description"
        name="twitter:description"
        content={PlasmicOldInscription.pageMetadata.description}
      />
      <meta
        key="og:image"
        property="og:image"
        content={PlasmicOldInscription.pageMetadata.ogImageSrc}
      />
      <meta
        key="twitter:image"
        name="twitter:image"
        content={PlasmicOldInscription.pageMetadata.ogImageSrc}
      />
      <link
        rel="canonical"
        href={PlasmicOldInscription.pageMetadata.canonical}
      />
    </>
  );
}

function PlasmicOldInscription__RenderFunc(props: {
  variants: PlasmicOldInscription__VariantsArgs;
  args: PlasmicOldInscription__ArgsType;
  overrides: PlasmicOldInscription__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"body"}
            data-plasmic-override={overrides.body}
            className={classNames(projectcss.all, sty.body)}
          >
            <section className={classNames(projectcss.all, sty.section__o9O3Q)}>
              <div className={classNames(projectcss.all, sty.freeBox__g8T1U)}>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__harDz
                  )}
                  component={Link}
                  href={`/`}
                  platform={"gatsby"}
                >
                  <PlasmicImg__
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"200px"}
                    loading={"lazy"}
                    src={{
                      src: image61SMcC1UjheNqc,
                      fullWidth: 101,
                      fullHeight: 38,
                      aspectRatio: 2.657895
                    }}
                  />
                </PlasmicLink__>
              </div>
            </section>
            <section className={classNames(projectcss.all, sty.section__ayh1E)}>
              <div className={classNames(projectcss.all, sty.freeBox__qzkiQ)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__d30F
                  )}
                >
                  {"Bonjour !"}
                </div>
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {"Quel type de compte souhaitez-vous cr\u00e9er ?"}
                </h1>
                <div className={classNames(projectcss.all, sty.freeBox__zp9Jm)}>
                  <TypeCompte
                    className={classNames(
                      "__wab_instance",
                      sty.typeCompte__akOkE
                    )}
                  />

                  <TypeCompte
                    className={classNames(
                      "__wab_instance",
                      sty.typeCompte__fsJxt
                    )}
                    descritption={"Je cr\u00e9e mon profil de freeelance"}
                    emoji={" \ud83d\udcbb"}
                    nom={"Freelance"}
                  />

                  <TypeCompte
                    className={classNames(
                      "__wab_instance",
                      sty.typeCompte__zlOhF
                    )}
                    descritption={"Je cr\u00e9e mon profil de mentor"}
                    emoji={"\ud83d\udc51"}
                    nom={"Mentor"}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___9RJfV)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jdai7
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {"Vous avez d\u00e9j\u00e0 un compte ? "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link___0IlnO
                          )}
                          component={Link}
                          href={`/sign-in`}
                          platform={"gatsby"}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "var(--token-9HNAvI0pqHnB)" }}
                            >
                              {"Me connecter"}
                            </span>
                          </React.Fragment>
                        </PlasmicLink__>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                </div>
              </div>
            </section>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "body", "img", "h1"],
  body: ["body", "img", "h1"],
  img: ["img"],
  h1: ["h1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  body: "div";
  img: typeof PlasmicImg__;
  h1: "h1";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOldInscription__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOldInscription__VariantsArgs;
    args?: PlasmicOldInscription__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicOldInscription__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicOldInscription__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOldInscription__ArgProps,
          internalVariantPropNames: PlasmicOldInscription__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOldInscription__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOldInscription";
  } else {
    func.displayName = `PlasmicOldInscription.${nodeName}`;
  }
  return func;
}

export const PlasmicOldInscription = Object.assign(
  // Top-level PlasmicOldInscription renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    body: makeNodeComponent("body"),
    img: makeNodeComponent("img"),
    h1: makeNodeComponent("h1"),

    // Metadata about props expected for PlasmicOldInscription
    internalVariantProps: PlasmicOldInscription__VariantProps,
    internalArgProps: PlasmicOldInscription__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Netir - Mentions légales",
      description:
        "Consultez nos mentions légales pour plus d'informations sur nos services, nos politiques et nos conditions d'utilisation.",
      ogImageSrc:
        "https://site-assets.plasmic.app/9f3005b94278521a011c47609ecbb96a.png",
      canonical: "https://netir.fr/sign-up"
    }
  }
);

export default PlasmicOldInscription;
/* prettier-ignore-end */
