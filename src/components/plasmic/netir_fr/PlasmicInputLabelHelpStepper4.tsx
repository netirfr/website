/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: SzgCO1KR_MVp

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicInputLabelHelpStepper4.module.css"; // plasmic-import: SzgCO1KR_MVp/css

createPlasmicElementProxy;

export type PlasmicInputLabelHelpStepper4__VariantMembers = {};
export type PlasmicInputLabelHelpStepper4__VariantsArgs = {};
type VariantPropType = keyof PlasmicInputLabelHelpStepper4__VariantsArgs;
export const PlasmicInputLabelHelpStepper4__VariantProps =
  new Array<VariantPropType>();

export type PlasmicInputLabelHelpStepper4__ArgsType = {};
type ArgPropType = keyof PlasmicInputLabelHelpStepper4__ArgsType;
export const PlasmicInputLabelHelpStepper4__ArgProps = new Array<ArgPropType>();

export type PlasmicInputLabelHelpStepper4__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultInputLabelHelpStepper4Props {
  className?: string;
}

const $$ = {};

function PlasmicInputLabelHelpStepper4__RenderFunc(props: {
  variants: PlasmicInputLabelHelpStepper4__VariantsArgs;
  args: PlasmicInputLabelHelpStepper4__ArgsType;
  overrides: PlasmicInputLabelHelpStepper4__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.__wab_text,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <React.Fragment>
        <span
          className={"plasmic_default__all plasmic_default__span"}
          style={{ fontWeight: 400, color: "#9CA3C1" }}
        >
          {
            "On vous contacte seulement lorsque c'est n\u00e9cessaire. Aucune sollicitation commerciale."
          }
        </span>
      </React.Fragment>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInputLabelHelpStepper4__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInputLabelHelpStepper4__VariantsArgs;
    args?: PlasmicInputLabelHelpStepper4__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicInputLabelHelpStepper4__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicInputLabelHelpStepper4__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInputLabelHelpStepper4__ArgProps,
          internalVariantPropNames: PlasmicInputLabelHelpStepper4__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInputLabelHelpStepper4__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputLabelHelpStepper4";
  } else {
    func.displayName = `PlasmicInputLabelHelpStepper4.${nodeName}`;
  }
  return func;
}

export const PlasmicInputLabelHelpStepper4 = Object.assign(
  // Top-level PlasmicInputLabelHelpStepper4 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicInputLabelHelpStepper4
    internalVariantProps: PlasmicInputLabelHelpStepper4__VariantProps,
    internalArgProps: PlasmicInputLabelHelpStepper4__ArgProps
  }
);

export default PlasmicInputLabelHelpStepper4;
/* prettier-ignore-end */
