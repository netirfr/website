/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: lP1cYv7WnWil

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import StepperStpeerForm from "../../StepperStpeerForm"; // plasmic-import: gdnfT_wfy0B6/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import FormInputFieldForm1Step2 from "../../FormInputFieldForm1Step2"; // plasmic-import: S5CfGFKzkl_1/component
import FormInputFieldForm2Step2 from "../../FormInputFieldForm2Step2"; // plasmic-import: lHCTf6JpcZH7/component
import ButtonOldPrecedent from "../../ButtonOldPrecedent"; // plasmic-import: t7J0gbQy9s_q/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import StepperTitle from "../../StepperTitle"; // plasmic-import: irWtc9mQGjvf/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicOldSignUpCompanyStep2.module.css"; // plasmic-import: lP1cYv7WnWil/css

import CheckIcon from "./icons/PlasmicIcon__Check"; // plasmic-import: L4RC0xhJ0uBL/icon
import BarSvgrepoComSvgIcon from "./icons/PlasmicIcon__BarSvgrepoComSvg"; // plasmic-import: L_A-j4tKSVFr/icon
import Bag4SvgrepoComSvgIcon from "./icons/PlasmicIcon__Bag4SvgrepoComSvg"; // plasmic-import: xeojuuOAnBdF/icon
import DollarCircleSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__DollarCircleSvgrepoCom1Svg"; // plasmic-import: _B8xOJaCg617/icon
import UserSvgrepoCom4SvgIcon from "./icons/PlasmicIcon__UserSvgrepoCom4Svg"; // plasmic-import: QydiZu8DMym3/icon
import nLogo4X7VwM2YjHhq from "./images/nLogo.svg"; // plasmic-import: 4X7vwM2yjHHQ/picture

createPlasmicElementProxy;

export type PlasmicOldSignUpCompanyStep2__VariantMembers = {};
export type PlasmicOldSignUpCompanyStep2__VariantsArgs = {};
type VariantPropType = keyof PlasmicOldSignUpCompanyStep2__VariantsArgs;
export const PlasmicOldSignUpCompanyStep2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicOldSignUpCompanyStep2__ArgsType = {
  iconsSteps?: boolean;
  icon?: boolean;
  children?: React.ReactNode;
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  children4?: React.ReactNode;
  form2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicOldSignUpCompanyStep2__ArgsType;
export const PlasmicOldSignUpCompanyStep2__ArgProps = new Array<ArgPropType>(
  "iconsSteps",
  "icon",
  "children",
  "children2",
  "children3",
  "children4",
  "form2"
);

export type PlasmicOldSignUpCompanyStep2__OverridesType = {
  companyPage?: Flex__<"div">;
  stepperStpeerForm?: Flex__<typeof StepperStpeerForm>;
  stepperTitle?: Flex__<typeof StepperTitle>;
  text?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultOldSignUpCompanyStep2Props {
  iconsSteps?: boolean;
  icon?: boolean;
  children?: React.ReactNode;
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  children4?: React.ReactNode;
  form2?: React.ReactNode;
  className?: string;
}

const $$ = {};

export function Head() {
  return (
    <>
      <meta name="twitter:card" content="summary" />
      <title key="title">
        {PlasmicOldSignUpCompanyStep2.pageMetadata.title}
      </title>
      <meta
        key="og:title"
        property="og:title"
        content={PlasmicOldSignUpCompanyStep2.pageMetadata.title}
      />
      <meta
        key="twitter:title"
        name="twitter:title"
        content={PlasmicOldSignUpCompanyStep2.pageMetadata.title}
      />
    </>
  );
}

function PlasmicOldSignUpCompanyStep2__RenderFunc(props: {
  variants: PlasmicOldSignUpCompanyStep2__VariantsArgs;
  args: PlasmicOldSignUpCompanyStep2__ArgsType;
  overrides: PlasmicOldSignUpCompanyStep2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          iconsSteps: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"companyPage"}
          data-plasmic-override={overrides.companyPage}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.companyPage
          )}
        >
          <StepperStpeerForm
            data-plasmic-name={"stepperStpeerForm"}
            data-plasmic-override={overrides.stepperStpeerForm}
            children2={renderPlasmicSlot({
              defaultContents: (
                <div className={classNames(projectcss.all, sty.columns__hkiTc)}>
                  <div
                    className={classNames(projectcss.all, sty.column__qZzp3)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bl4A9)}
                    >
                      <Bag4SvgrepoComSvgIcon
                        className={classNames(projectcss.all, sty.svg__wb4Xb)}
                        role={"img"}
                      />
                    </div>
                    <BarSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__ruWHh)}
                      role={"img"}
                    />
                  </div>
                  <div className={classNames(projectcss.all, sty.column__qrKt)}>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__elFzp)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___8L8Hl
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eK5Nq
                          )}
                        >
                          {"\u00c9tape 2"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aBge0
                        )}
                      >
                        {"Votre entreprise"}
                      </div>
                    </div>
                  </div>
                </div>
              ),
              value: args.children2
            })}
            children3={renderPlasmicSlot({
              defaultContents: (
                <div className={classNames(projectcss.all, sty.columns__xvLeo)}>
                  <div className={classNames(projectcss.all, sty.column__dGKm)}>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rMnz)}
                    >
                      <DollarCircleSvgrepoCom1SvgIcon
                        className={classNames(projectcss.all, sty.svg__nMnDe)}
                        role={"img"}
                      />
                    </div>
                    <BarSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg___7YjNg)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column___9Bsoh)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ns27T)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bLi9
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tMg16
                          )}
                        >
                          {"\u00c9tape 3"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tC98U
                        )}
                      >
                        {"Facturation"}
                      </div>
                    </div>
                  </div>
                </div>
              ),
              value: args.children3
            })}
            children4={renderPlasmicSlot({
              defaultContents: (
                <div className={classNames(projectcss.all, sty.columns__fLDep)}>
                  <div className={classNames(projectcss.all, sty.column__oVt7)}>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3RhWx
                      )}
                    >
                      <UserSvgrepoCom4SvgIcon
                        className={classNames(projectcss.all, sty.svg___0EzMh)}
                        role={"img"}
                      />
                    </div>
                  </div>
                  <div className={classNames(projectcss.all, sty.column__sMRx)}>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oqlDc)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__oTcs2
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ouKyv
                          )}
                        >
                          {"\u00c9tape 4"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hSuYk
                        )}
                      >
                        {"Responsable du compte"}
                      </div>
                    </div>
                  </div>
                </div>
              ),
              value: args.children4
            })}
            className={classNames("__wab_instance", sty.stepperStpeerForm)}
            form2={renderPlasmicSlot({
              defaultContents: (() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form__xSwDq),
                  formItems: [
                    { label: "Name", name: "name", inputType: "Text" },
                    {
                      label: "Message",
                      name: "message",
                      inputType: "Text Area"
                    }
                  ],
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: "advanced",
                  requiredMark: true,
                  submitSlot: null,
                  validateTrigger: [],
                  wrapperCol: (() => {
                    const __composite = {
                      span: null,
                      horizontalOnly: null,
                      offset: null
                    };
                    __composite["span"] = 24;
                    __composite["horizontalOnly"] = true;
                    __composite["offset"] = 23;
                    return __composite;
                  })()
                };

                return (
                  <FormWrapper {...child$Props}>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nj5WT)}
                    >
                      <FormInputFieldForm1Step2
                        className={classNames(
                          "__wab_instance",
                          sty.formInputFieldForm1Step2__prQ
                        )}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__itiKh)}
                    >
                      <FormInputFieldForm2Step2
                        className={classNames(
                          "__wab_instance",
                          sty.formInputFieldForm2Step2__nxRBb
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___4LpaV
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__sCrTk
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__xvSW
                            )}
                          >
                            <ButtonOldPrecedent
                              className={classNames(
                                "__wab_instance",
                                sty.buttonOldPrecedent__grW9
                              )}
                              lienDestiantion={`/sign-up/company`}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__yBgDj
                            )}
                          >
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button___3YU85
                              )}
                              danger={true}
                              href={`/sign-up/company-3`}
                              type={"primary"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__fpj4W
                                )}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 500 }}
                                  >
                                    {"Valider"}
                                  </span>
                                </React.Fragment>
                              </div>
                            </AntdButton>
                          </div>
                        </div>
                      </div>
                    </div>
                  </FormWrapper>
                );
              })(),
              value: args.form2
            })}
            slot={
              <StepperTitle
                data-plasmic-name={"stepperTitle"}
                data-plasmic-override={overrides.stepperTitle}
                className={classNames("__wab_instance", sty.stepperTitle)}
              />
            }
            slot2={
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#000000" }}
                  >
                    {"Vous n\u2019\u00eates plus qu\u2019\u00e0"}
                  </span>
                  <React.Fragment> </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700, color: "#F43F5E" }}
                  >
                    {"3 \u00e9tapes"}
                  </span>
                  <React.Fragment> </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#000000" }}
                  >
                    {"de trouver LE freelance id\u00e9al pour votre projet !"}
                  </span>
                  <React.Fragment>{"\r\n\r"}</React.Fragment>
                </React.Fragment>
              </div>
            }
            slot3={
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"28px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"76px"}
                loading={"lazy"}
                src={{
                  src: nLogo4X7VwM2YjHhq,
                  fullWidth: 100.26872253417969,
                  fullHeight: 36.720001220703125,
                  aspectRatio: 2.72973
                }}
              />
            }
          >
            {renderPlasmicSlot({
              defaultContents: (
                <div className={classNames(projectcss.all, sty.columns__uQzfF)}>
                  <div
                    className={classNames(projectcss.all, sty.column__kbCtc)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__szQc)}
                    >
                      <CheckIcon
                        className={classNames(projectcss.all, sty.svg__iRdb)}
                        role={"img"}
                      />
                    </div>
                    <BarSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__f1Xw7)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__chBf9)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__hRwQ)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rlEs
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__txp7
                          )}
                        >
                          {"\u00c9tape 1"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vc9Jl
                        )}
                      >
                        {"Inscription"}
                      </div>
                    </div>
                  </div>
                </div>
              ),
              value: args.children
            })}
          </StepperStpeerForm>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  companyPage: [
    "companyPage",
    "stepperStpeerForm",
    "stepperTitle",
    "text",
    "img"
  ],
  stepperStpeerForm: ["stepperStpeerForm", "stepperTitle", "text", "img"],
  stepperTitle: ["stepperTitle"],
  text: ["text"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  companyPage: "div";
  stepperStpeerForm: typeof StepperStpeerForm;
  stepperTitle: typeof StepperTitle;
  text: "div";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOldSignUpCompanyStep2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOldSignUpCompanyStep2__VariantsArgs;
    args?: PlasmicOldSignUpCompanyStep2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicOldSignUpCompanyStep2__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicOldSignUpCompanyStep2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOldSignUpCompanyStep2__ArgProps,
          internalVariantPropNames: PlasmicOldSignUpCompanyStep2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOldSignUpCompanyStep2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "companyPage") {
    func.displayName = "PlasmicOldSignUpCompanyStep2";
  } else {
    func.displayName = `PlasmicOldSignUpCompanyStep2.${nodeName}`;
  }
  return func;
}

export const PlasmicOldSignUpCompanyStep2 = Object.assign(
  // Top-level PlasmicOldSignUpCompanyStep2 renders the root element
  makeNodeComponent("companyPage"),
  {
    // Helper components rendering sub-elements
    stepperStpeerForm: makeNodeComponent("stepperStpeerForm"),
    stepperTitle: makeNodeComponent("stepperTitle"),
    text: makeNodeComponent("text"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicOldSignUpCompanyStep2
    internalVariantProps: PlasmicOldSignUpCompanyStep2__VariantProps,
    internalArgProps: PlasmicOldSignUpCompanyStep2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Netir – Inscription : Ton activité",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicOldSignUpCompanyStep2;
/* prettier-ignore-end */
