/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: lPSQkcOmsQQw

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicFooter.module.css"; // plasmic-import: lPSQkcOmsQQw/css

import XColorSvg2Icon from "./icons/PlasmicIcon__XColorSvg2"; // plasmic-import: ZsCTjijG4AeZ/icon
import _317735CareerLinkedinIconSvg2Icon from "./icons/PlasmicIcon___317735CareerLinkedinIconSvg2"; // plasmic-import: lEcDObHzKdVC/icon
import logoNetirWhite1SvgV2JQ1BxTpNii from "./images/logoNetirWhite1Svg.svg"; // plasmic-import: V2jQ1BxTPNii/picture

createPlasmicElementProxy;

export type PlasmicFooter__VariantMembers = {};
export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter__OverridesType = {
  footer?: Flex__<"div">;
  ligne1?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  ligne2?: Flex__<"div">;
  ligne3?: Flex__<"div">;
  text?: Flex__<"div">;
};

export interface DefaultFooterProps {
  className?: string;
}

const $$ = {};

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"footer"}
      data-plasmic-override={overrides.footer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.footer
      )}
    >
      <div
        data-plasmic-name={"ligne1"}
        data-plasmic-override={overrides.ligne1}
        className={classNames(projectcss.all, sty.ligne1)}
      >
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "20%" : "10%"
          }
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          onClick={async event => {
            const $steps = {};

            $steps["goToHomepage"] = true
              ? (() => {
                  const actionArgs = { destination: `/` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __gatsbyNavigate(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToHomepage"] != null &&
              typeof $steps["goToHomepage"] === "object" &&
              typeof $steps["goToHomepage"].then === "function"
            ) {
              $steps["goToHomepage"] = await $steps["goToHomepage"];
            }
          }}
          src={{
            src: logoNetirWhite1SvgV2JQ1BxTpNii,
            fullWidth: 55,
            fullHeight: 20,
            aspectRatio: 2.75
          }}
        />

        <div className={classNames(projectcss.all, sty.freeBox__fOsOm)}>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__cpqLp
            )}
            component={Link}
            href={`/legal-notices`}
            platform={"gatsby"}
          >
            {"Mentions l\u00e9gales"}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__uIjtb
            )}
            component={Link}
            href={"https://status.netir.fr/"}
            platform={"gatsby"}
            target={"_blank"}
          >
            {"Page de statut"}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link___23Iik
            )}
            component={Link}
            href={`/confidential-policies`}
            platform={"gatsby"}
          >
            {"Politique de confidentialit\u00e9"}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__gxdcO
            )}
            component={Link}
            href={`/legal`}
            platform={"gatsby"}
          >
            {"Conditions d'utilisation"}
          </PlasmicLink__>
        </div>
      </div>
      <div
        data-plasmic-name={"ligne2"}
        data-plasmic-override={overrides.ligne2}
        className={classNames(projectcss.all, sty.ligne2)}
      >
        <PlasmicLink__
          className={classNames(
            projectcss.all,
            projectcss.a,
            projectcss.__wab_text,
            sty.link__cqc47
          )}
          component={Link}
          href={"mailto:contact@netir.com"}
          platform={"gatsby"}
          target={"_blank"}
        >
          <React.Fragment>
            <React.Fragment>
              {"Envoyer-nous un Hello \ud83d\udc4b\ud83c\udffc sur "}
            </React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ textDecorationLine: "underline" }}
            >
              {"contact@netir.com"}
            </span>
            <React.Fragment>{" !"}</React.Fragment>
          </React.Fragment>
        </PlasmicLink__>
        <div className={classNames(projectcss.all, sty.freeBox__nipWl)}>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link___1E47M
            )}
            component={Link}
            href={"https://x.com/_Netir"}
            platform={"gatsby"}
            target={"_blank"}
          >
            <XColorSvg2Icon
              className={classNames(projectcss.all, sty.svg___3Eqo6)}
              role={"img"}
            />
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link___6VgC1
            )}
            component={Link}
            href={"https://www.linkedin.com/company/netir/about/"}
            platform={"gatsby"}
            target={"_blank"}
          >
            <_317735CareerLinkedinIconSvg2Icon
              className={classNames(projectcss.all, sty.svg__l7Ipu)}
              role={"img"}
            />
          </PlasmicLink__>
        </div>
      </div>
      <div
        data-plasmic-name={"ligne3"}
        data-plasmic-override={overrides.ligne3}
        className={classNames(projectcss.all, sty.ligne3)}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"\u00a9 Netir. Tous droits r\u00e9serv\u00e9s."}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  footer: ["footer", "ligne1", "img", "ligne2", "ligne3", "text"],
  ligne1: ["ligne1", "img"],
  img: ["img"],
  ligne2: ["ligne2"],
  ligne3: ["ligne3", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  footer: "div";
  ligne1: "div";
  img: typeof PlasmicImg__;
  ligne2: "div";
  ligne3: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "footer") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("footer"),
  {
    // Helper components rendering sub-elements
    ligne1: makeNodeComponent("ligne1"),
    img: makeNodeComponent("img"),
    ligne2: makeNodeComponent("ligne2"),
    ligne3: makeNodeComponent("ligne3"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
