/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: gdnfT_wfy0B6

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import StepperComponentFormContainer from "../../StepperComponentFormContainer"; // plasmic-import: TFft5XGJ-fUJ/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdPassword } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdPassword_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdCheckbox } from "@plasmicpkgs/antd5/skinny/registerCheckbox";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicStepperStpeerForm.module.css"; // plasmic-import: gdnfT_wfy0B6/css

import PadlockLockedSvgrepoComSvgIcon from "./icons/PlasmicIcon__PadlockLockedSvgrepoComSvg"; // plasmic-import: vpZ026OiGQE1/icon
import BarSvgrepoComSvgIcon from "./icons/PlasmicIcon__BarSvgrepoComSvg"; // plasmic-import: L_A-j4tKSVFr/icon
import Bag4SvgrepoComSvgIcon from "./icons/PlasmicIcon__Bag4SvgrepoComSvg"; // plasmic-import: xeojuuOAnBdF/icon
import DollarCircleSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__DollarCircleSvgrepoCom1Svg"; // plasmic-import: _B8xOJaCg617/icon
import UserSvgrepoCom4SvgIcon from "./icons/PlasmicIcon__UserSvgrepoCom4Svg"; // plasmic-import: QydiZu8DMym3/icon
import nLogo4X7VwM2YjHhq from "./images/nLogo.svg"; // plasmic-import: 4X7vwM2yjHHQ/picture

createPlasmicElementProxy;

export type PlasmicStepperStpeerForm__VariantMembers = {};
export type PlasmicStepperStpeerForm__VariantsArgs = {};
type VariantPropType = keyof PlasmicStepperStpeerForm__VariantsArgs;
export const PlasmicStepperStpeerForm__VariantProps =
  new Array<VariantPropType>();

export type PlasmicStepperStpeerForm__ArgsType = {
  children?: React.ReactNode;
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  children4?: React.ReactNode;
  form2?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
};
type ArgPropType = keyof PlasmicStepperStpeerForm__ArgsType;
export const PlasmicStepperStpeerForm__ArgProps = new Array<ArgPropType>(
  "children",
  "children2",
  "children3",
  "children4",
  "form2",
  "slot",
  "slot2",
  "slot3"
);

export type PlasmicStepperStpeerForm__OverridesType = {
  root?: Flex__<typeof StepperComponentFormContainer>;
  text?: Flex__<"div">;
};

export interface DefaultStepperStpeerFormProps {
  children?: React.ReactNode;
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  children4?: React.ReactNode;
  form2?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicStepperStpeerForm__RenderFunc(props: {
  variants: PlasmicStepperStpeerForm__VariantsArgs;
  args: PlasmicStepperStpeerForm__ArgsType;
  overrides: PlasmicStepperStpeerForm__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <StepperComponentFormContainer
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      children2={renderPlasmicSlot({
        defaultContents: (
          <div className={classNames(projectcss.all, sty.columns__rfLlm)}>
            <div className={classNames(projectcss.all, sty.column__e9N9U)}>
              <div className={classNames(projectcss.all, sty.freeBox___9YOz3)}>
                <Bag4SvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg___2AVcc)}
                  role={"img"}
                />
              </div>
              <BarSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__xoeSl)}
                role={"img"}
              />
            </div>
            <div className={classNames(projectcss.all, sty.column___6LUyj)}>
              <div className={classNames(projectcss.all, sty.freeBox__tyr1W)}>
                <div className={classNames(projectcss.all, sty.freeBox__ko1G)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xrqSe
                    )}
                  >
                    {"\u00c9tape 2"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__e265C
                  )}
                >
                  {"Votre entreprise"}
                </div>
              </div>
            </div>
          </div>
        ),
        value: args.children2
      })}
      children3={renderPlasmicSlot({
        defaultContents: (
          <div className={classNames(projectcss.all, sty.columns__h2Mim)}>
            <div className={classNames(projectcss.all, sty.column__pOhPi)}>
              <div className={classNames(projectcss.all, sty.freeBox__mB4Sc)}>
                <DollarCircleSvgrepoCom1SvgIcon
                  className={classNames(projectcss.all, sty.svg__swZhl)}
                  role={"img"}
                />
              </div>
              <BarSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__dL7Kr)}
                role={"img"}
              />
            </div>
            <div className={classNames(projectcss.all, sty.column__oQuIf)}>
              <div className={classNames(projectcss.all, sty.freeBox__zDv8P)}>
                <div className={classNames(projectcss.all, sty.freeBox__v24Pz)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lEs1O
                    )}
                  >
                    {"\u00c9tape 3"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sAvw2
                  )}
                >
                  {"Facturation"}
                </div>
              </div>
            </div>
          </div>
        ),
        value: args.children3
      })}
      children4={renderPlasmicSlot({
        defaultContents: (
          <div className={classNames(projectcss.all, sty.columns__xWhqu)}>
            <div className={classNames(projectcss.all, sty.column__lWpyO)}>
              <div className={classNames(projectcss.all, sty.freeBox__shImr)}>
                <UserSvgrepoCom4SvgIcon
                  className={classNames(projectcss.all, sty.svg__cFfXq)}
                  role={"img"}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.column__dRnyi)}>
              <div className={classNames(projectcss.all, sty.freeBox__jvTP)}>
                <div className={classNames(projectcss.all, sty.freeBox__tlbuk)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nCGl
                    )}
                  >
                    {"\u00c9tape 4"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jtbzD
                  )}
                >
                  {"Responsable du compte"}
                </div>
              </div>
            </div>
          </div>
        ),
        value: args.children4
      })}
      className={classNames("__wab_instance", sty.root)}
      form2={renderPlasmicSlot({
        defaultContents: (() => {
          const child$Props = {
            className: classNames("__wab_instance", sty.form__d0Ur9),
            formItems: [
              { label: "Name", name: "name", inputType: "Text" },
              { label: "Message", name: "message", inputType: "Text Area" }
            ],
            labelCol: { span: 8, horizontalOnly: true },
            layout: "vertical",
            mode: "advanced",
            requiredMark: true,
            submitSlot: null,
            validateTrigger: [],
            wrapperCol: (() => {
              const __composite = {
                span: null,
                horizontalOnly: null,
                offset: null
              };
              __composite["span"] = 24;
              __composite["horizontalOnly"] = true;
              __composite["offset"] = 23;
              return __composite;
            })()
          };

          return (
            <FormWrapper {...child$Props}>
              <div className={classNames(projectcss.all, sty.freeBox__wrLmf)}>
                <FormItemWrapper
                  className={classNames("__wab_instance", sty.formField__pag2W)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__a4A8O
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700, color: "#040000" }}
                        >
                          {"Prenom"}
                        </span>
                      </React.Fragment>
                    </div>
                  }
                  name={"prenom"}
                  valuePropName={"prenom"}
                >
                  {(() => {
                    const child$Props = {
                      autoFocus: true,
                      className: classNames("__wab_instance", sty.input__qWfMm),
                      placeholder: "Pr\u00e9nom",
                      size: "large"
                    };

                    return <AntdInput {...child$Props} />;
                  })()}
                </FormItemWrapper>
                <FormItemWrapper
                  className={classNames("__wab_instance", sty.formField__w84Be)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2C93
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#010000" }}
                        >
                          {"Nom"}
                        </span>
                      </React.Fragment>
                    </div>
                  }
                  name={"nom"}
                  valuePropName={"nom"}
                >
                  {(() => {
                    const child$Props = {
                      autoFocus: true,
                      className: classNames("__wab_instance", sty.input__i8NhX),
                      placeholder: "Nom",
                      size: "large"
                    };

                    return <AntdInput {...child$Props} />;
                  })()}
                </FormItemWrapper>
              </div>
              <FormItemWrapper
                className={classNames("__wab_instance", sty.formField__rprvA)}
                hidden={false}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2DzFp
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700, color: "#000000" }}
                      >
                        {"Email"}
                      </span>
                    </React.Fragment>
                  </div>
                }
                name={"email"}
                noLabel={false}
                rules={[{ ruleType: "required", message: "Email obligatoire" }]}
                valuePropName={"email"}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.input__fOoVv),
                    placeholder: "Email",
                    size: "large"
                  };

                  return <AntdInput {...child$Props} />;
                })()}
              </FormItemWrapper>
              <FormItemWrapper
                className={classNames("__wab_instance", sty.formField__rB1Av)}
                hidden={false}
                hideValidationMessage={false}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uqNs5
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000", fontWeight: 700 }}
                      >
                        {"Mot de passe"}
                      </span>
                    </React.Fragment>
                  </div>
                }
                name={"password"}
                noLabel={false}
                noStyle={false}
                shouldUpdate={false}
                valuePropName={"password"}
              >
                <div className={classNames(projectcss.all, sty.freeBox__akaMf)}>
                  {(() => {
                    const child$Props = {
                      bordered: true,
                      className: classNames(
                        "__wab_instance",
                        sty.passwordInput__eoMdK
                      ),
                      maxLength: 8,
                      placeholder: "Mot de passe"
                    };

                    return <AntdPassword {...child$Props} />;
                  })()}
                </div>
              </FormItemWrapper>
              <AntdCheckbox
                autoFocus={false}
                className={classNames("__wab_instance", sty.checkbox__sdhM8)}
                defaultChecked={false}
                disabled={false}
                indeterminate={false}
                onChange={async checked => {
                  const $steps = {};

                  $steps["updateVariant"] = true
                    ? (() => {
                        const actionArgs = {};
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }
                          undefined;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateVariant"] != null &&
                    typeof $steps["updateVariant"] === "object" &&
                    typeof $steps["updateVariant"].then === "function"
                  ) {
                    $steps["updateVariant"] = await $steps["updateVariant"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mcgQ
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#000000" }}
                    >
                      {"J'accepte"}
                    </span>
                    <React.Fragment> </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#FB0101" }}
                    >
                      {"les termes et conditions"}
                    </span>
                  </React.Fragment>
                </div>
              </AntdCheckbox>
              <AntdButton
                className={classNames("__wab_instance", sty.button__aRiZc)}
                danger={true}
                disabled={false}
                ghost={false}
                shape={"default"}
                size={"large"}
                submitsForm={true}
                target={false}
                type={"primary"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1LwzA
                  )}
                >
                  {"Valider"}
                </div>
              </AntdButton>
            </FormWrapper>
          );
        })(),
        value: args.form2
      })}
      slot={renderPlasmicSlot({
        defaultContents: (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vtRoL
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <h5
                  className={classNames(
                    projectcss.all,
                    projectcss.h5,
                    projectcss.__wab_text,
                    sty.h5__foNo3
                  )}
                >
                  {"Tout commence ici !\r"}
                </h5>
              }
              <React.Fragment>
                {
                  "Utilisez une adresse e-mail professionnelle pour vous inscrire.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"
                }
              </React.Fragment>
            </React.Fragment>
          </div>
        ),
        value: args.slot
      })}
      slot2={
        <React.Fragment>
          {renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__w9OV
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {"Vous n\u2019\u00eates plus qu\u2019\u00e0 "}
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700, color: "#FF0000" }}
                  >
                    {"1 \u00e9tapes"}
                  </span>
                  <React.Fragment>
                    {
                      " de trouver LE freelance id\u00e9al pour votre projet !\r\n\r"
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
            ),
            value: args.slot2
          })}
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"\r\n"}
          </div>
        </React.Fragment>
      }
      slot3={renderPlasmicSlot({
        defaultContents: (
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__kpbh5)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"87px"}
            loading={"lazy"}
            src={{
              src: nLogo4X7VwM2YjHhq,
              fullWidth: 100.26872253417969,
              fullHeight: 36.720001220703125,
              aspectRatio: 2.72973
            }}
          />
        ),

        value: args.slot3
      })}
    >
      {renderPlasmicSlot({
        defaultContents: (
          <div className={classNames(projectcss.all, sty.columns__dxiko)}>
            <div className={classNames(projectcss.all, sty.column__sWlUd)}>
              <div className={classNames(projectcss.all, sty.freeBox___8Jtln)}>
                <PadlockLockedSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__oec1B)}
                  role={"img"}
                />
              </div>
              <BarSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__uslPu)}
                role={"img"}
              />
            </div>
            <div className={classNames(projectcss.all, sty.column__gdacp)}>
              <div className={classNames(projectcss.all, sty.freeBox___4JgVc)}>
                <div className={classNames(projectcss.all, sty.freeBox__rJlT0)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sHqGl
                    )}
                  >
                    {"\u00c9tape 1"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6Dzbj
                  )}
                >
                  {"Inscription"}
                </div>
              </div>
            </div>
          </div>
        ),
        value: args.children
      })}
    </StepperComponentFormContainer>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof StepperComponentFormContainer;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStepperStpeerForm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStepperStpeerForm__VariantsArgs;
    args?: PlasmicStepperStpeerForm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicStepperStpeerForm__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicStepperStpeerForm__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStepperStpeerForm__ArgProps,
          internalVariantPropNames: PlasmicStepperStpeerForm__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStepperStpeerForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStepperStpeerForm";
  } else {
    func.displayName = `PlasmicStepperStpeerForm.${nodeName}`;
  }
  return func;
}

export const PlasmicStepperStpeerForm = Object.assign(
  // Top-level PlasmicStepperStpeerForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicStepperStpeerForm
    internalVariantProps: PlasmicStepperStpeerForm__VariantProps,
    internalArgProps: PlasmicStepperStpeerForm__ArgProps
  }
);

export default PlasmicStepperStpeerForm;
/* prettier-ignore-end */
