/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: dCyluW4eRMLq

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicTestimonial.module.css"; // plasmic-import: dCyluW4eRMLq/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: ve2oeUzZomz5/icon
import image18QaNhuIc9PRlg from "./images/image18.svg"; // plasmic-import: QANhuIc9pRlg/picture

createPlasmicElementProxy;

export type PlasmicTestimonial__VariantMembers = {
  mobile: "unnamedVariant";
};
export type PlasmicTestimonial__VariantsArgs = {
  mobile?: MultiChoiceArg<"unnamedVariant">;
};
type VariantPropType = keyof PlasmicTestimonial__VariantsArgs;
export const PlasmicTestimonial__VariantProps = new Array<VariantPropType>(
  "mobile"
);

export type PlasmicTestimonial__ArgsType = {
  name?: string;
  review?: string;
  img?: React.ComponentProps<typeof PlasmicImg__>["src"];
  starCount?: number;
  starColor?: string;
};
type ArgPropType = keyof PlasmicTestimonial__ArgsType;
export const PlasmicTestimonial__ArgProps = new Array<ArgPropType>(
  "name",
  "review",
  "img",
  "starCount",
  "starColor"
);

export type PlasmicTestimonial__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultTestimonialProps {
  name?: string;
  review?: string;
  img?: React.ComponentProps<typeof PlasmicImg__>["src"];
  starCount?: number;
  starColor?: string;
  mobile?: MultiChoiceArg<"unnamedVariant">;
  className?: string;
}

const $$ = {};

function PlasmicTestimonial__RenderFunc(props: {
  variants: PlasmicTestimonial__VariantsArgs;
  args: PlasmicTestimonial__ArgsType;
  overrides: PlasmicTestimonial__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          name: "Julien F.",
          review:
            "J'ai utilis\u00e9 Netir pour trouver un freelance pour la refonte de notre site web. D'habitude, je passais beaucoup de temps \u00e0 chercher un bon freelance, mais avec Netir ils m'ont propos\u00e9 non seulement un freelance comp\u00e9tent, mais aussi un mentor pour l'accompagner. C\u2019est un syst\u00e8me auquel je n'avais jamais pens\u00e9, mais \u00e7a a vraiment fait la diff\u00e9rence. En un mois, le trafic de notre site a augment\u00e9 de 40%, et j'ai eu l'esprit tranquille en sachant que tout \u00e9tait bien encadr\u00e9. Je recommande !",
          img: {
            src: image18QaNhuIc9PRlg,
            fullWidth: 90,
            fullHeight: 90,
            aspectRatio: 1
          },
          starCount: 3,
          starColor: "purple"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "mobile",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.mobile
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootmobile_unnamedVariant]: hasVariant(
            $state,
            "mobile",
            "unnamedVariant"
          )
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__gmXkI)}>
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img, {
            [sty.imgmobile_unnamedVariant]: hasVariant(
              $state,
              "mobile",
              "unnamedVariant"
            )
          })}
          displayHeight={
            hasVariant($state, "mobile", "unnamedVariant") ? "50px" : "60px"
          }
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant($state, "mobile", "unnamedVariant") ? "50px" : "60px"
          }
          loading={"lazy"}
          src={args.img}
        />

        <div className={classNames(projectcss.all, sty.freeBox__taJa5)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__sM2S,
              {
                [sty.textmobile_unnamedVariant__sM2SyYfvy]: hasVariant(
                  $state,
                  "mobile",
                  "unnamedVariant"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.name;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Julien F.";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__jkpey)}>
            <IconIcon
              className={classNames(projectcss.all, sty.svg___9OQSe)}
              role={"img"}
            />

            <IconIcon
              className={classNames(projectcss.all, sty.svg__jaWak)}
              role={"img"}
            />

            <IconIcon
              className={classNames(projectcss.all, sty.svg__fyiDe)}
              role={"img"}
            />

            <IconIcon
              className={classNames(projectcss.all, sty.svg__dg8P9)}
              role={"img"}
            />

            <IconIcon
              className={classNames(projectcss.all, sty.svg___34TTe)}
              role={"img"}
            />
          </div>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__mWdIg)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__aVxvX,
            {
              [sty.textmobile_unnamedVariant__aVxvXyYfvy]: hasVariant(
                $state,
                "mobile",
                "unnamedVariant"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.review;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "J'ai utilis\u00e9 Netir pour trouver un freelance pour la refonte de notre site web. D'habitude, je passais beaucoup de temps \u00e0 chercher un bon freelance, mais avec Netir ils m'ont propos\u00e9 non seulement un freelance comp\u00e9tent, mais aussi un mentor pour l'accompagner. C\u2019est un syst\u00e8me auquel je n'avais jamais pens\u00e9, mais \u00e7a a vraiment fait la diff\u00e9rence. En un mois, le trafic de notre site a augment\u00e9 de 40%, et j'ai eu l'esprit tranquille en sachant que tout \u00e9tait bien encadr\u00e9. Je recommande !";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTestimonial__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTestimonial__VariantsArgs;
    args?: PlasmicTestimonial__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicTestimonial__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicTestimonial__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTestimonial__ArgProps,
          internalVariantPropNames: PlasmicTestimonial__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTestimonial__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTestimonial";
  } else {
    func.displayName = `PlasmicTestimonial.${nodeName}`;
  }
  return func;
}

export const PlasmicTestimonial = Object.assign(
  // Top-level PlasmicTestimonial renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicTestimonial
    internalVariantProps: PlasmicTestimonial__VariantProps,
    internalArgProps: PlasmicTestimonial__ArgProps
  }
);

export default PlasmicTestimonial;
/* prettier-ignore-end */
