/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: Wjqq6b62Ui8w

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: byb1-I0x_v8X/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicContentSide.module.css"; // plasmic-import: Wjqq6b62Ui8w/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: 99U4uMxg1jkf/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: FEzuhm3U7mDW/icon

createPlasmicElementProxy;

export type PlasmicContentSide__VariantMembers = {};
export type PlasmicContentSide__VariantsArgs = {};
type VariantPropType = keyof PlasmicContentSide__VariantsArgs;
export const PlasmicContentSide__VariantProps = new Array<VariantPropType>();

export type PlasmicContentSide__ArgsType = { children?: React.ReactNode };
type ArgPropType = keyof PlasmicContentSide__ArgsType;
export const PlasmicContentSide__ArgProps = new Array<ArgPropType>("children");

export type PlasmicContentSide__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultContentSideProps {
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicContentSide__RenderFunc(props: {
  variants: PlasmicContentSide__VariantsArgs;
  args: PlasmicContentSide__ArgsType;
  overrides: PlasmicContentSide__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__mj8Ma)}>
        <div className={classNames(projectcss.all, sty.freeBox__wf63H)}>
          {renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__c3D4A
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3___7464A
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2__fXbfb
                              )}
                            >
                              {"Bonjour nom + prenom"}
                            </h2>
                          }
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <h5
                              className={classNames(
                                projectcss.all,
                                projectcss.h5,
                                projectcss.__wab_text,
                                sty.h5__t8OiG
                              )}
                            >
                              {"Nom de l'entreprise"}
                            </h5>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </h3>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aMynr
                  )}
                >
                  {
                    "Renseigne les informations de ton entreprise pour cr\u00e9er des missions, ce qui permettra \u00e0 Netir de faciliter la contractualisation et la facturation entre toi (freelance) et ton entreprise cliente.\r\n\r\n"
                  }
                </div>
                <ButtonPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.buttonPrimary__lCnAu
                  )}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eB31G
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Renseigner mon entreprise"}
                        </span>
                      </React.Fragment>
                    </div>
                  }
                />
              </React.Fragment>
            ),
            value: args.children
          })}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContentSide__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContentSide__VariantsArgs;
    args?: PlasmicContentSide__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicContentSide__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicContentSide__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicContentSide__ArgProps,
          internalVariantPropNames: PlasmicContentSide__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicContentSide__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContentSide";
  } else {
    func.displayName = `PlasmicContentSide.${nodeName}`;
  }
  return func;
}

export const PlasmicContentSide = Object.assign(
  // Top-level PlasmicContentSide renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicContentSide
    internalVariantProps: PlasmicContentSide__VariantProps,
    internalArgProps: PlasmicContentSide__ArgProps
  }
);

export default PlasmicContentSide;
/* prettier-ignore-end */
