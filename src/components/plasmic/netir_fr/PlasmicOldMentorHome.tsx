/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: 9gDAP2rhHBxP

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import DashboardDashboardLayout from "../../DashboardDashboardLayout"; // plasmic-import: KS-1W6sGklIw/component
import NavNavItem from "../../NavNavItem"; // plasmic-import: emjpN_Inho3r/component
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicOldMentorHome.module.css"; // plasmic-import: 9gDAP2rhHBxP/css

import BurgerMenuIcon from "./icons/PlasmicIcon__BurgerMenu"; // plasmic-import: uiLqCVdai7zb/icon
import BabyKidMaleSmileBoySvgrepoComSvgIcon from "./icons/PlasmicIcon__BabyKidMaleSmileBoySvgrepoComSvg"; // plasmic-import: n0IT9fBY_FHy/icon
import PercentSvgrepoComSvgIcon from "./icons/PlasmicIcon__PercentSvgrepoComSvg"; // plasmic-import: nXpg24v8ZY1P/icon

createPlasmicElementProxy;

export type PlasmicOldMentorHome__VariantMembers = {};
export type PlasmicOldMentorHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicOldMentorHome__VariantsArgs;
export const PlasmicOldMentorHome__VariantProps = new Array<VariantPropType>();

export type PlasmicOldMentorHome__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicOldMentorHome__ArgsType;
export const PlasmicOldMentorHome__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicOldMentorHome__OverridesType = {
  root?: Flex__<"div">;
  svg?: Flex__<"svg">;
  dashboardLayout?: Flex__<typeof DashboardDashboardLayout>;
};

export interface DefaultOldMentorHomeProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

const $$ = {};

export function Head() {
  return <></>;
}

function PlasmicOldMentorHome__RenderFunc(props: {
  variants: PlasmicOldMentorHome__VariantsArgs;
  args: PlasmicOldMentorHome__ArgsType;
  overrides: PlasmicOldMentorHome__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dashboardLayout.isSidebarOpenn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__sq3K9)}>
            <BurgerMenuIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              onClick={async event => {
                const $steps = {};

                $steps["updateDashboardLayoutIsSidebarOpenn"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dashboardLayout", "isSidebarOpenn"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDashboardLayoutIsSidebarOpenn"] != null &&
                  typeof $steps["updateDashboardLayoutIsSidebarOpenn"] ===
                    "object" &&
                  typeof $steps["updateDashboardLayoutIsSidebarOpenn"].then ===
                    "function"
                ) {
                  $steps["updateDashboardLayoutIsSidebarOpenn"] =
                    await $steps["updateDashboardLayoutIsSidebarOpenn"];
                }
              }}
              role={"img"}
            />
          </div>
          <DashboardDashboardLayout
            data-plasmic-name={"dashboardLayout"}
            data-plasmic-override={overrides.dashboardLayout}
            className={classNames("__wab_instance", sty.dashboardLayout)}
            isSidebarOpenn={generateStateValueProp($state, [
              "dashboardLayout",
              "isSidebarOpenn"
            ])}
            onIsSidebarOpennChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dashboardLayout",
                "isSidebarOpenn"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            slot={
              <div className={classNames(projectcss.all, sty.freeBox___6Xs5H)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nBiuz
                  )}
                >
                  {"Bonjour Nom + prenom \ud83d\udc4b"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eo52
                  )}
                >
                  {"Nom de votre entreprise"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__g6MeO
                  )}
                >
                  {"Entreprise en attente de compl\u00e9tion\r"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qvzxn
                  )}
                >
                  {
                    "Renseigne les informations de ton entreprise pour cr\u00e9er des missions, ce qui permettra \u00e0 Netir de faciliter la contractualisation et la facturation entre toi (freelance) et ton entreprise cliente.\r\n\r"
                  }
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__akDEn)}>
                  {renderPlasmicSlot({
                    defaultContents: (
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__vrSl
                        )}
                        danger={true}
                        disabled={false}
                        ghost={false}
                        href={`/sign-up/company-3`}
                        shape={"default"}
                        size={"large"}
                        submitsForm={true}
                        target={false}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tS4Vq
                          )}
                        >
                          {"Renseigner mon entreprise"}
                        </div>
                      </AntdButton>
                    ),
                    value: args.slot
                  })}
                </div>
              </div>
            }
          >
            {renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <NavNavItem
                    className={classNames(
                      "__wab_instance",
                      sty.navNavItem__w6Y7E
                    )}
                    slot={
                      <AntdMenuItem
                        className={classNames(
                          "__wab_instance",
                          sty.menuItem__cUclZ
                        )}
                        key={"menuItemKey1"}
                        onClick={async () => {
                          const $steps = {};

                          $steps["goToMentorFreelances"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: `/mentor/freelances`
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __gatsbyNavigate(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToMentorFreelances"] != null &&
                            typeof $steps["goToMentorFreelances"] ===
                              "object" &&
                            typeof $steps["goToMentorFreelances"].then ===
                              "function"
                          ) {
                            $steps["goToMentorFreelances"] =
                              await $steps["goToMentorFreelances"];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___8R96J
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 400 }}
                            >
                              {"Freelance"}
                            </span>
                          </React.Fragment>
                        </div>
                      </AntdMenuItem>
                    }
                  >
                    <BabyKidMaleSmileBoySvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__pd48J)}
                      role={"img"}
                    />
                  </NavNavItem>
                  <NavNavItem
                    className={classNames(
                      "__wab_instance",
                      sty.navNavItem__yRu7
                    )}
                    slot={
                      <AntdMenuItem
                        className={classNames(
                          "__wab_instance",
                          sty.menuItem__kSoh
                        )}
                        key={"menuItemKey1"}
                        onClick={async () => {
                          const $steps = {};

                          $steps["goToMentorPerksTiers"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: `/mentor/perks-tiers`
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __gatsbyNavigate(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToMentorPerksTiers"] != null &&
                            typeof $steps["goToMentorPerksTiers"] ===
                              "object" &&
                            typeof $steps["goToMentorPerksTiers"].then ===
                              "function"
                          ) {
                            $steps["goToMentorPerksTiers"] =
                              await $steps["goToMentorPerksTiers"];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vOI1
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 400 }}
                            >
                              {"Offres de mentorat"}
                            </span>
                          </React.Fragment>
                        </div>
                      </AntdMenuItem>
                    }
                  >
                    <PercentSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__ahC9H)}
                      role={"img"}
                    />
                  </NavNavItem>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qopI8
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return undefined;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </React.Fragment>
              ),
              value: args.children
            })}
          </DashboardDashboardLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "dashboardLayout"],
  svg: ["svg"],
  dashboardLayout: ["dashboardLayout"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  dashboardLayout: typeof DashboardDashboardLayout;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOldMentorHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOldMentorHome__VariantsArgs;
    args?: PlasmicOldMentorHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicOldMentorHome__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicOldMentorHome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOldMentorHome__ArgProps,
          internalVariantPropNames: PlasmicOldMentorHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOldMentorHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOldMentorHome";
  } else {
    func.displayName = `PlasmicOldMentorHome.${nodeName}`;
  }
  return func;
}

export const PlasmicOldMentorHome = Object.assign(
  // Top-level PlasmicOldMentorHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    dashboardLayout: makeNodeComponent("dashboardLayout"),

    // Metadata about props expected for PlasmicOldMentorHome
    internalVariantProps: PlasmicOldMentorHome__VariantProps,
    internalArgProps: PlasmicOldMentorHome__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicOldMentorHome;
/* prettier-ignore-end */
