/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: lHCTf6JpcZH7

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicFormInputFieldForm2Step2.module.css"; // plasmic-import: lHCTf6JpcZH7/css

createPlasmicElementProxy;

export type PlasmicFormInputFieldForm2Step2__VariantMembers = {};
export type PlasmicFormInputFieldForm2Step2__VariantsArgs = {};
type VariantPropType = keyof PlasmicFormInputFieldForm2Step2__VariantsArgs;
export const PlasmicFormInputFieldForm2Step2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFormInputFieldForm2Step2__ArgsType = { placholder?: string };
type ArgPropType = keyof PlasmicFormInputFieldForm2Step2__ArgsType;
export const PlasmicFormInputFieldForm2Step2__ArgProps = new Array<ArgPropType>(
  "placholder"
);

export type PlasmicFormInputFieldForm2Step2__OverridesType = {
  root?: Flex__<typeof FormItemWrapper>;
  text?: Flex__<"div">;
  input3?: Flex__<typeof AntdInput>;
};

export interface DefaultFormInputFieldForm2Step2Props {
  placholder?: string;
  className?: string;
}

const $$ = {};

function PlasmicFormInputFieldForm2Step2__RenderFunc(props: {
  variants: PlasmicFormInputFieldForm2Step2__VariantsArgs;
  args: PlasmicFormInputFieldForm2Step2__ArgsType;
  overrides: PlasmicFormInputFieldForm2Step2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          placholder: "L'adresse postale de votre entreprise"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <FormItemWrapper
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
      hidden={false}
      label={
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          <React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ fontWeight: 500, color: "#0A043C" }}
            >
              {"Localisation"}
            </span>
          </React.Fragment>
        </div>
      }
      name={"localisation"}
      noLabel={false}
      rules={[]}
      valuePropName={"localisation"}
    >
      {(() => {
        const child$Props = {
          className: classNames("__wab_instance", sty.input3),
          disabled: false,
          onChange: async (...eventArgs: any) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              "value",
              ["input3", "value"],
              AntdInput_Helpers
            ).apply(null, eventArgs);
          },
          placeholder: ` ${$props.placholder}`,
          readOnly: false,
          size: "large",
          value: generateStateValueProp($state, ["input3", "value"])
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "value",
              plasmicStateName: "input3.value"
            }
          ],
          [],
          AntdInput_Helpers ?? {},
          child$Props
        );

        return (
          <AntdInput
            data-plasmic-name={"input3"}
            data-plasmic-override={overrides.input3}
            {...child$Props}
          />
        );
      })()}
    </FormItemWrapper>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "input3"],
  text: ["text"],
  input3: ["input3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof FormItemWrapper;
  text: "div";
  input3: typeof AntdInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFormInputFieldForm2Step2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFormInputFieldForm2Step2__VariantsArgs;
    args?: PlasmicFormInputFieldForm2Step2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicFormInputFieldForm2Step2__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicFormInputFieldForm2Step2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFormInputFieldForm2Step2__ArgProps,
          internalVariantPropNames:
            PlasmicFormInputFieldForm2Step2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFormInputFieldForm2Step2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFormInputFieldForm2Step2";
  } else {
    func.displayName = `PlasmicFormInputFieldForm2Step2.${nodeName}`;
  }
  return func;
}

export const PlasmicFormInputFieldForm2Step2 = Object.assign(
  // Top-level PlasmicFormInputFieldForm2Step2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    input3: makeNodeComponent("input3"),

    // Metadata about props expected for PlasmicFormInputFieldForm2Step2
    internalVariantProps: PlasmicFormInputFieldForm2Step2__VariantProps,
    internalArgProps: PlasmicFormInputFieldForm2Step2__ArgProps
  }
);

export default PlasmicFormInputFieldForm2Step2;
/* prettier-ignore-end */
