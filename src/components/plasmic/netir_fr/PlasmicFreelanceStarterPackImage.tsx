/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: h_YoDDWaO8L3

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicFreelanceStarterPackImage.module.css"; // plasmic-import: h_YoDDWaO8L3/css

import HandshakeSvgrepoComSvgIcon from "./icons/PlasmicIcon__HandshakeSvgrepoComSvg"; // plasmic-import: c2KRno7NOo7H/icon
import partnershipWemindJpgFF6OWwXYwhZc from "./images/partnershipWemindJpg.jpg"; // plasmic-import: fF6oWwXYwhZC/picture
import image106WH1Du1MbvdFm from "./images/image106.svg"; // plasmic-import: wH1DU1MbvdFM/picture
import wemindLogoRemovebgPreviewPngE3F1NpoftFle from "./images/wemindLogoRemovebgPreviewPng.png"; // plasmic-import: E3F1npoftFle/picture

createPlasmicElementProxy;

export type PlasmicFreelanceStarterPackImage__VariantMembers = {};
export type PlasmicFreelanceStarterPackImage__VariantsArgs = {};
type VariantPropType = keyof PlasmicFreelanceStarterPackImage__VariantsArgs;
export const PlasmicFreelanceStarterPackImage__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFreelanceStarterPackImage__ArgsType = {};
type ArgPropType = keyof PlasmicFreelanceStarterPackImage__ArgsType;
export const PlasmicFreelanceStarterPackImage__ArgProps =
  new Array<ArgPropType>();

export type PlasmicFreelanceStarterPackImage__OverridesType = {
  root?: Flex__<"div">;
  image3Etapes?: Flex__<typeof PlasmicImg__>;
  freeBox?: Flex__<"div">;
  netir?: Flex__<typeof PlasmicImg__>;
  text?: Flex__<"div">;
  svg?: Flex__<"svg">;
  wemind?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultFreelanceStarterPackImageProps {
  className?: string;
}

const $$ = {};

function PlasmicFreelanceStarterPackImage__RenderFunc(props: {
  variants: PlasmicFreelanceStarterPackImage__VariantsArgs;
  args: PlasmicFreelanceStarterPackImage__ArgsType;
  overrides: PlasmicFreelanceStarterPackImage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <PlasmicImg__
        data-plasmic-name={"image3Etapes"}
        data-plasmic-override={overrides.image3Etapes}
        alt={""}
        className={classNames(sty.image3Etapes)}
        displayHeight={
          hasVariant(globalVariants, "screen", "tabletOnly") ? "228px" : "252px"
        }
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"601px"}
        loading={"lazy"}
        src={{
          src: partnershipWemindJpgFF6OWwXYwhZc,
          fullWidth: 1788,
          fullHeight: 1104,
          aspectRatio: undefined
        }}
      />

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <PlasmicImg__
          data-plasmic-name={"netir"}
          data-plasmic-override={overrides.netir}
          alt={""}
          className={classNames(sty.netir)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "50px"
              : "100px"
          }
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          src={{
            src: image106WH1Du1MbvdFm,
            fullWidth: 147,
            fullHeight: 54,
            aspectRatio: undefined
          }}
        />

        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {" "}
        </div>
        <HandshakeSvgrepoComSvgIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />

        <PlasmicImg__
          data-plasmic-name={"wemind"}
          data-plasmic-override={overrides.wemind}
          alt={""}
          className={classNames(sty.wemind)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "150px"
              : "250px"
          }
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          src={{
            src: wemindLogoRemovebgPreviewPngE3F1NpoftFle,
            fullWidth: 500,
            fullHeight: 500,
            aspectRatio: undefined
          }}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "image3Etapes", "freeBox", "netir", "text", "svg", "wemind"],
  image3Etapes: ["image3Etapes"],
  freeBox: ["freeBox", "netir", "text", "svg", "wemind"],
  netir: ["netir"],
  text: ["text"],
  svg: ["svg"],
  wemind: ["wemind"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  image3Etapes: typeof PlasmicImg__;
  freeBox: "div";
  netir: typeof PlasmicImg__;
  text: "div";
  svg: "svg";
  wemind: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFreelanceStarterPackImage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFreelanceStarterPackImage__VariantsArgs;
    args?: PlasmicFreelanceStarterPackImage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicFreelanceStarterPackImage__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicFreelanceStarterPackImage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFreelanceStarterPackImage__ArgProps,
          internalVariantPropNames:
            PlasmicFreelanceStarterPackImage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFreelanceStarterPackImage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFreelanceStarterPackImage";
  } else {
    func.displayName = `PlasmicFreelanceStarterPackImage.${nodeName}`;
  }
  return func;
}

export const PlasmicFreelanceStarterPackImage = Object.assign(
  // Top-level PlasmicFreelanceStarterPackImage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    image3Etapes: makeNodeComponent("image3Etapes"),
    freeBox: makeNodeComponent("freeBox"),
    netir: makeNodeComponent("netir"),
    text: makeNodeComponent("text"),
    svg: makeNodeComponent("svg"),
    wemind: makeNodeComponent("wemind"),

    // Metadata about props expected for PlasmicFreelanceStarterPackImage
    internalVariantProps: PlasmicFreelanceStarterPackImage__VariantProps,
    internalArgProps: PlasmicFreelanceStarterPackImage__ArgProps
  }
);

export default PlasmicFreelanceStarterPackImage;
/* prettier-ignore-end */
