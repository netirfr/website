/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oiQgZxfnSVj2maau7x1Bhf
// Component: Vg4NgSIGKm96

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NavNavLink from "../../NavNavLink"; // plasmic-import: XXKcaWGePncg/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: byb1-I0x_v8X/component
import HomepageNavbar from "../../HomepageNavbar"; // plasmic-import: eyoxTGMzE-Q0/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic.module.css"; // plasmic-import: oiQgZxfnSVj2maau7x1Bhf/projectcss
import * as sty from "./PlasmicSiteHeader.module.css"; // plasmic-import: Vg4NgSIGKm96/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: 99U4uMxg1jkf/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: FEzuhm3U7mDW/icon
import BurgerMenuIcon from "./icons/PlasmicIcon__BurgerMenu"; // plasmic-import: uiLqCVdai7zb/icon
import image106WH1Du1MbvdFm from "./images/image106.svg"; // plasmic-import: wH1DU1MbvdFM/picture

createPlasmicElementProxy;

export type PlasmicSiteHeader__VariantMembers = {
  page: "headerSimple";
};
export type PlasmicSiteHeader__VariantsArgs = {
  page?: MultiChoiceArg<"headerSimple">;
};
type VariantPropType = keyof PlasmicSiteHeader__VariantsArgs;
export const PlasmicSiteHeader__VariantProps = new Array<VariantPropType>(
  "page"
);

export type PlasmicSiteHeader__ArgsType = {
  isNavopen?: boolean;
  onIsNavopenChange?: (val: string) => void;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicSiteHeader__ArgsType;
export const PlasmicSiteHeader__ArgProps = new Array<ArgPropType>(
  "isNavopen",
  "onIsNavopenChange",
  "children"
);

export type PlasmicSiteHeader__OverridesType = {
  navbar?: Flex__<"div">;
  logoContainer?: Flex__<"a"> & Partial<LinkProps>;
  img?: Flex__<typeof PlasmicImg__>;
  linksContainer?: Flex__<"div">;
  actionsContainer?: Flex__<"div">;
  homepageNavbar?: Flex__<typeof HomepageNavbar>;
  actionsContainer2?: Flex__<"div">;
};

export interface DefaultSiteHeaderProps {
  isNavopen?: boolean;
  onIsNavopenChange?: (val: string) => void;
  children?: React.ReactNode;
  page?: MultiChoiceArg<"headerSimple">;
  className?: string;
}

const $$ = {};

function PlasmicSiteHeader__RenderFunc(props: {
  variants: PlasmicSiteHeader__VariantsArgs;
  args: PlasmicSiteHeader__ArgsType;
  overrides: PlasmicSiteHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "page",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.page
      },
      {
        path: "isNavopen",
        type: "writable",
        variableType: "boolean",

        valueProp: "isNavopen",
        onChangeProp: "onIsNavopenChange"
      },
      {
        path: "homepageNavbar.close",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"navbar"}
      data-plasmic-override={overrides.navbar}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.navbar,
        {
          [sty.navbarpage_headerSimple]: hasVariant(
            $state,
            "page",
            "headerSimple"
          )
        }
      )}
    >
      <PlasmicLink__
        data-plasmic-name={"logoContainer"}
        data-plasmic-override={overrides.logoContainer}
        className={classNames(projectcss.all, projectcss.a, sty.logoContainer)}
        component={Link}
        href={`/`}
        platform={"gatsby"}
      >
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "auto" : "auto"
          }
          displayMaxHeight={"none"}
          displayMaxWidth={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "100%" : "100%"
          }
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "100.26872253417969px"
              : "100.26872253417969px"
          }
          loading={"lazy"}
          onClick={async event => {
            const $steps = {};

            $steps["goToHomepage"] = true
              ? (() => {
                  const actionArgs = { destination: `/` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __gatsbyNavigate(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToHomepage"] != null &&
              typeof $steps["goToHomepage"] === "object" &&
              typeof $steps["goToHomepage"].then === "function"
            ) {
              $steps["goToHomepage"] = await $steps["goToHomepage"];
            }
          }}
          src={{
            src: image106WH1Du1MbvdFm,
            fullWidth: 147,
            fullHeight: 54,
            aspectRatio: undefined
          }}
        />
      </PlasmicLink__>
      <div
        data-plasmic-name={"linksContainer"}
        data-plasmic-override={overrides.linksContainer}
        className={classNames(projectcss.all, sty.linksContainer)}
      >
        <NavNavLink
          className={classNames("__wab_instance", sty.navNavLink__tZvBd, {
            [sty.navNavLinkpage_headerSimple__tZvBDyWrmy]: hasVariant(
              $state,
              "page",
              "headerSimple"
            )
          })}
          content={"Accueil"}
          destination={`/`}
        />

        <NavNavLink
          className={classNames("__wab_instance", sty.navNavLink__iSq3D, {
            [sty.navNavLinkpage_headerSimple__iSq3DyWrmy]: hasVariant(
              $state,
              "page",
              "headerSimple"
            )
          })}
          content={"Entreprise"}
          destination={`/company`}
        />

        <NavNavLink
          className={classNames("__wab_instance", sty.navNavLink__oc10V, {
            [sty.navNavLinkpage_headerSimple__oc10VyWrmy]: hasVariant(
              $state,
              "page",
              "headerSimple"
            )
          })}
          content={"Freelance"}
          destination={`/freelance`}
        />

        <NavNavLink
          className={classNames("__wab_instance", sty.navNavLink__cgaMe, {
            [sty.navNavLinkpage_headerSimple__cgaMeyWrmy]: hasVariant(
              $state,
              "page",
              "headerSimple"
            )
          })}
          content={"Mentor"}
          destination={`/mentor`}
        />

        <NavNavLink
          className={classNames("__wab_instance", sty.navNavLink__yFdZr, {
            [sty.navNavLinkpage_headerSimple__yFdZRyWrmy]: hasVariant(
              $state,
              "page",
              "headerSimple"
            )
          })}
          content={"Apporteur d'affaire"}
          destination={`/apporteur-daffaires`}
        />

        <NavNavLink
          className={classNames("__wab_instance", sty.navNavLink__ulPqz, {
            [sty.navNavLinkpage_headerSimple__ulPqzyWrmy]: hasVariant(
              $state,
              "page",
              "headerSimple"
            )
          })}
          content={"Mentions L\u00e9gales"}
          destination={`/legal-notices`}
        />

        <NavNavLink
          className={classNames("__wab_instance", sty.navNavLink__yT7Qo, {
            [sty.navNavLinkpage_headerSimple__yT7QOyWrmy]: hasVariant(
              $state,
              "page",
              "headerSimple"
            )
          })}
          content={"Politique de confidentialit\u00e9"}
          destination={`/confidential-policies`}
        />

        <NavNavLink
          className={classNames("__wab_instance", sty.navNavLink__klMxE, {
            [sty.navNavLinkpage_headerSimple__klMxEyWrmy]: hasVariant(
              $state,
              "page",
              "headerSimple"
            )
          })}
          content={"Conditions d'utilisation"}
          destination={`/legal`}
        />
      </div>
      <div
        data-plasmic-name={"actionsContainer"}
        data-plasmic-override={overrides.actionsContainer}
        className={classNames(projectcss.all, sty.actionsContainer, {
          [sty.actionsContainerpage_headerSimple]: hasVariant(
            $state,
            "page",
            "headerSimple"
          )
        })}
      >
        <NavNavLink
          className={classNames("__wab_instance", sty.navNavLink__lUo4W, {
            [sty.navNavLinkpage_headerSimple__lUo4WyWrmy]: hasVariant(
              $state,
              "page",
              "headerSimple"
            )
          })}
          content={"Connexion"}
          destination={"https://netir.fr/sign-in"}
        />

        {renderPlasmicSlot({
          defaultContents: (
            <ButtonPrimary
              className={classNames("__wab_instance", sty.buttonPrimary__xoPqQ)}
              disabled={false}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xClaX
                  )}
                >
                  {"Inscription"}
                </div>
              }
              linkTo={"https://netir.fr/sign-up"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ywccy
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "var(--token-bTfc8s3xNwDj)" }}
                  >
                    {"Modifier"}
                  </span>
                </React.Fragment>
              </div>
            </ButtonPrimary>
          ),
          value: args.children
        })}
        {(hasVariant(globalVariants, "screen", "tabletOnly") ? true : false) ? (
          <BurgerMenuIcon
            className={classNames(projectcss.all, sty.svg__t9Z64)}
            onClick={async event => {
              const $steps = {};

              $steps["updateIsNavopen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["isNavopen"]
                      },
                      operation: 4
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateIsNavopen"] != null &&
                typeof $steps["updateIsNavopen"] === "object" &&
                typeof $steps["updateIsNavopen"].then === "function"
              ) {
                $steps["updateIsNavopen"] = await $steps["updateIsNavopen"];
              }
            }}
            role={"img"}
          />
        ) : null}
      </div>
      {(
        hasVariant(globalVariants, "screen", "tabletOnly")
          ? (() => {
              try {
                return $state.isNavopen;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
          : false
      ) ? (
        <HomepageNavbar
          data-plasmic-name={"homepageNavbar"}
          data-plasmic-override={overrides.homepageNavbar}
          className={classNames("__wab_instance", sty.homepageNavbar)}
          close={generateStateValueProp($state, ["homepageNavbar", "close"])}
          onClickClosenav={async event => {
            const $steps = {};

            $steps["updateIsNavopen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["isNavopen"]
                    },
                    operation: 0,
                    value: false
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateIsNavopen"] != null &&
              typeof $steps["updateIsNavopen"] === "object" &&
              typeof $steps["updateIsNavopen"].then === "function"
            ) {
              $steps["updateIsNavopen"] = await $steps["updateIsNavopen"];
            }
          }}
          onCloseChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "homepageNavbar",
              "close"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
        />
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
        <div
          data-plasmic-name={"actionsContainer2"}
          data-plasmic-override={overrides.actionsContainer2}
          className={classNames(projectcss.all, sty.actionsContainer2, {
            [sty.actionsContainer2page_headerSimple]: hasVariant(
              $state,
              "page",
              "headerSimple"
            )
          })}
        >
          <BurgerMenuIcon
            className={classNames(projectcss.all, sty.svg___85IAc)}
            onClick={async event => {
              const $steps = {};

              $steps["updateIsNavopen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["isNavopen"]
                      },
                      operation: 4
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateIsNavopen"] != null &&
                typeof $steps["updateIsNavopen"] === "object" &&
                typeof $steps["updateIsNavopen"].then === "function"
              ) {
                $steps["updateIsNavopen"] = await $steps["updateIsNavopen"];
              }
            }}
            role={"img"}
          />
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  navbar: [
    "navbar",
    "logoContainer",
    "img",
    "linksContainer",
    "actionsContainer",
    "homepageNavbar",
    "actionsContainer2"
  ],
  logoContainer: ["logoContainer", "img"],
  img: ["img"],
  linksContainer: ["linksContainer"],
  actionsContainer: ["actionsContainer"],
  homepageNavbar: ["homepageNavbar"],
  actionsContainer2: ["actionsContainer2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  navbar: "div";
  logoContainer: "a";
  img: typeof PlasmicImg__;
  linksContainer: "div";
  actionsContainer: "div";
  homepageNavbar: typeof HomepageNavbar;
  actionsContainer2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSiteHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSiteHeader__VariantsArgs;
    args?: PlasmicSiteHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicSiteHeader__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicSiteHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSiteHeader__ArgProps,
          internalVariantPropNames: PlasmicSiteHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSiteHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "navbar") {
    func.displayName = "PlasmicSiteHeader";
  } else {
    func.displayName = `PlasmicSiteHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicSiteHeader = Object.assign(
  // Top-level PlasmicSiteHeader renders the root element
  makeNodeComponent("navbar"),
  {
    // Helper components rendering sub-elements
    logoContainer: makeNodeComponent("logoContainer"),
    img: makeNodeComponent("img"),
    linksContainer: makeNodeComponent("linksContainer"),
    actionsContainer: makeNodeComponent("actionsContainer"),
    homepageNavbar: makeNodeComponent("homepageNavbar"),
    actionsContainer2: makeNodeComponent("actionsContainer2"),

    // Metadata about props expected for PlasmicSiteHeader
    internalVariantProps: PlasmicSiteHeader__VariantProps,
    internalArgProps: PlasmicSiteHeader__ArgProps
  }
);

export default PlasmicSiteHeader;
/* prettier-ignore-end */
